#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.68.1 */

pub const MAX_AXIS: u32 = 32;
pub const MAX_SPINDLE: u32 = 8;
pub const MAX_AXISNAME: u32 = 4;
pub const ALL_AXES: i32 = -1;
pub const ALL_SPINDLES: i32 = -1;
pub const MAX_IFSB_LINE: u32 = 4;
pub const MAX_CNCPATH: u32 = 15;
pub const MAX_LOCK_PROG: u32 = 12;
pub const EW_PROTOCOL: i32 = -17;
pub const EW_SOCKET: i32 = -16;
pub const EW_NODLL: i32 = -15;
pub const EW_INIERR: i32 = -14;
pub const EW_ITLOW: i32 = -13;
pub const EW_ITHIGHT: i32 = -12;
pub const EW_BUS: i32 = -11;
pub const EW_SYSTEM2: i32 = -10;
pub const EW_HSSB: i32 = -9;
pub const EW_HANDLE: i32 = -8;
pub const EW_VERSION: i32 = -7;
pub const EW_UNEXP: i32 = -6;
pub const EW_SYSTEM: i32 = -5;
pub const EW_PARITY: i32 = -4;
pub const EW_MMCSYS: i32 = -3;
pub const EW_RESET: i32 = -2;
pub const EW_BUSY: i32 = -1;
pub const EW_OK: u32 = 0;
pub const EW_FUNC: u32 = 1;
pub const EW_NOPMC: u32 = 1;
pub const EW_LENGTH: u32 = 2;
pub const EW_NUMBER: u32 = 3;
pub const EW_RANGE: u32 = 3;
pub const EW_ATTRIB: u32 = 4;
pub const EW_TYPE: u32 = 4;
pub const EW_DATA: u32 = 5;
pub const EW_NOOPT: u32 = 6;
pub const EW_PROT: u32 = 7;
pub const EW_OVRFLOW: u32 = 8;
pub const EW_PARAM: u32 = 9;
pub const EW_BUFFER: u32 = 10;
pub const EW_PATH: u32 = 11;
pub const EW_MODE: u32 = 12;
pub const EW_REJECT: u32 = 13;
pub const EW_DTSRVR: u32 = 14;
pub const EW_ALARM: u32 = 15;
pub const EW_STOP: u32 = 16;
pub const EW_PASSWD: u32 = 17;
pub const EW_PMC: u32 = 18;
pub const EW_PMCHANDLE: u32 = 19;
pub const EW_RD_OVWSTP: u32 = 20;
pub const EW_RD_RSTFIN: u32 = 21;
pub const DNC_NORMAL: i32 = -1;
pub const DNC_CANCEL: i32 = -32768;
pub const DNC_OPENERR: i32 = -514;
pub const DNC_NOFILE: i32 = -516;
pub const DNC_READERR: i32 = -517;
pub const LIB_MODE: u32 = 0;
pub const MOVE_RDPRGPTR: u32 = 1;
pub const PRM_ALLPATH: u32 = 2;
pub const UPLOAD_M02M99: u32 = 3;
pub const MSG_NOCTRL: u32 = 4;
pub const DIAM_RAD_SWITCH: u32 = 5;
pub const MSG_CONV: u32 = 6;
pub const ASYNC_READ_PROG3: u32 = 7;
pub const UP_DNLOAD_EDT: u32 = 8;
pub const PROG_WORD_SRCH: u32 = 9;
pub const ONUM_ZERO_SUP: u32 = 10;
pub const LONG_ISE_FIG: u32 = 11;
pub const INT_CHK_UNIT: u32 = 12;
pub const HZR_PRM_WR_SKIP: u32 = 13;
pub const SLVSRAM_ACCESS: u32 = 14;
pub const GET_SMTCP_STAT: u32 = 15;
pub const TLIFE_OPTION: u32 = 16;
pub const SVGD_MATE_PUNCH: u32 = 17;
pub const READ_FLD_ON: u32 = 18;
pub const DELETE_RECURSIVE: u32 = 19;
pub const READ_ORIG_OPT: u32 = 20;
pub const SVGD_MATE_ORIGIN: u32 = 21;
pub const PUN_SFZN_MDP: u32 = 22;
pub const PAXIS_PATH: u32 = 23;
pub const AXDATA_G198: u32 = 24;
pub const BG_EDIT_SIGNAL: u32 = 25;
pub const UPLOAD_BG: u32 = 26;
pub const TDATA_EXTRACT: u32 = 27;
pub const PROG_CHECK_CMNT: u32 = 28;
pub const INITIAL_AX_CONFIG: u32 = 29;
pub const MGI_SPECIFICATION: u32 = 30;
pub const EFFECTIVE_COND: u32 = 31;
pub const LEVEL8_PROTECT: u32 = 32;
pub const ACTPT_M198: u32 = 33;
pub const SYSINFO_AXIS: u32 = 34;
pub const ALARM_INFO_TYPE: u32 = 35;
pub const PROG_LEDT_SPUP: u32 = 36;
pub const OPMSG_STATUS: u32 = 37;
pub const ASYNC_SEARCHWORD: u32 = 38;
pub const MA_OPT: u32 = 39;
pub const ENABLE_FOCAS_DMA: u32 = 40;
pub const DSHOST_RD_SRCH: u32 = 41;
pub const BG_EDIT_CONTINUE: u32 = 42;
pub const BG_EDIT_GRAPH: u32 = 43;
pub const SEARCHWORD_PNTR: u32 = 44;
pub const PROG_UPLD_PROT: u32 = 45;
pub const POLAR_IPL_POS: u32 = 46;
pub const PRG_NO_RD_PROT: u32 = 47;
pub const TOOL_STORAGE: u32 = 48;
pub const PRG_FMT_CK: u32 = 49;
pub const NCPROG_MODE: u32 = 50;
pub const COMMAND_TIMEOUT: u32 = 51;
pub const PGLOCK_TYPE: u32 = 64;
pub const TLIFE_TOOL0: u32 = 128;
pub const OPPROG_DSP: u32 = 256;
pub const OPPROG_MODE: u32 = 512;
pub const PROGRAM_CHECK: u32 = 1024;
pub const CZPP_NEDPP: u32 = 2048;
pub const MULTI_PATH_MIX_AXIS_NAME: u32 = 4096;
pub const WSETER_GRP: u32 = 8;
pub const WSETER_DATA: u32 = 8;
pub const MAX_POS_BUF: u32 = 2;
pub const TLGS_EMP: u32 = 2147483647;
pub const DC_PRM: u32 = 1;
pub const DC_OFS: u32 = 2;
pub const DC_WKZ: u32 = 3;
pub const DC_MAC: u32 = 4;
pub const DC_PCD: u32 = 5;
pub const DC_RTM: u32 = 6;
pub const MAX_PITCH_GROUP: u32 = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbact {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbact() {
    const UNINIT: ::std::mem::MaybeUninit<odbact> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbact>(),
        16usize,
        concat!("Size of: ", stringify!(odbact))
    );
    assert_eq!(
        ::std::mem::align_of::<odbact>(),
        8usize,
        concat!("Alignment of ", stringify!(odbact))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbact),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbact),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBACT = odbact;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbact2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_odbact2() {
    const UNINIT: ::std::mem::MaybeUninit<odbact2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbact2>(),
        72usize,
        concat!("Size of: ", stringify!(odbact2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbact2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbact2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbact2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbact2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbact2),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBACT2 = odbact2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxis {
    pub dummy: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbaxis() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxis>(),
        264usize,
        concat!("Size of: ", stringify!(odbaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxis>(),
        8usize,
        concat!("Alignment of ", stringify!(odbaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBAXIS = odbaxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxis_ex {
    pub counter: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbaxis_ex() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxis_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxis_ex>(),
        264usize,
        concat!("Size of: ", stringify!(odbaxis_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxis_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(odbaxis_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis_ex),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis_ex),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis_ex),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBAXIS_EX = odbaxis_ex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct realdata {
    pub val: f64,
    pub dec: ::std::os::raw::c_long,
    pub dummy: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_realdata() {
    const UNINIT: ::std::mem::MaybeUninit<realdata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<realdata>(),
        24usize,
        concat!("Size of: ", stringify!(realdata))
    );
    assert_eq!(
        ::std::mem::align_of::<realdata>(),
        8usize,
        concat!("Alignment of ", stringify!(realdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(realdata),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(realdata),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(realdata),
            "::",
            stringify!(dummy)
        )
    );
}
pub type REALDATA = realdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbwra64 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_idbwra64() {
    const UNINIT: ::std::mem::MaybeUninit<idbwra64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbwra64>(),
        776usize,
        concat!("Size of: ", stringify!(idbwra64))
    );
    assert_eq!(
        ::std::mem::align_of::<idbwra64>(),
        8usize,
        concat!("Alignment of ", stringify!(idbwra64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra64),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra64),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBWRA64 = idbwra64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbwrr64 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_idbwrr64() {
    const UNINIT: ::std::mem::MaybeUninit<idbwrr64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbwrr64>(),
        776usize,
        concat!("Size of: ", stringify!(idbwrr64))
    );
    assert_eq!(
        ::std::mem::align_of::<idbwrr64>(),
        8usize,
        concat!("Alignment of ", stringify!(idbwrr64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr64),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr64),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBWRR64 = idbwrr64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcmd64 {
    pub adrs: ::std::os::raw::c_char,
    pub num: ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_short,
    pub dec_val: ::std::os::raw::c_long,
    pub cmd_val: f64,
}
#[test]
fn bindgen_test_layout_odbcmd64() {
    const UNINIT: ::std::mem::MaybeUninit<odbcmd64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcmd64>(),
        24usize,
        concat!("Size of: ", stringify!(odbcmd64))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcmd64>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcmd64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd64),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd64),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd64),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd64),
            "::",
            stringify!(dec_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd64),
            "::",
            stringify!(cmd_val)
        )
    );
}
pub type ODBCMD64 = odbcmd64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdatrng64 {
    pub data_min: f64,
    pub data_max: f64,
    pub dec: ::std::os::raw::c_long,
    pub status: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdatrng64() {
    const UNINIT: ::std::mem::MaybeUninit<odbdatrng64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdatrng64>(),
        32usize,
        concat!("Size of: ", stringify!(odbdatrng64))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdatrng64>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdatrng64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng64),
            "::",
            stringify!(data_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng64),
            "::",
            stringify!(data_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng64),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng64),
            "::",
            stringify!(status)
        )
    );
}
pub type ODBDATRNG64 = odbdatrng64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbzor64 {
    pub datano_s: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub data: [REALDATA; 256usize],
}
#[test]
fn bindgen_test_layout_iodbzor64() {
    const UNINIT: ::std::mem::MaybeUninit<iodbzor64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbzor64>(),
        6152usize,
        concat!("Size of: ", stringify!(iodbzor64))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbzor64>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbzor64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor64),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor64),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor64),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBZOR64 = iodbzor64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbpsd64 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub u: iodbpsd64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbpsd64__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALDATA,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_iodbpsd64__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpsd64__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpsd64__bindgen_ty_1>(),
        768usize,
        concat!("Size of: ", stringify!(iodbpsd64__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpsd64__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpsd64__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpsd64() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpsd64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpsd64>(),
        776usize,
        concat!("Size of: ", stringify!(iodbpsd64))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpsd64>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpsd64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd64),
            "::",
            stringify!(u)
        )
    );
}
pub type IODBPSD64 = iodbpsd64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwcsf64 {
    pub dummy1: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy2: [::std::os::raw::c_short; 2usize],
    pub data: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_iodbwcsf64() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwcsf64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwcsf64>(),
        776usize,
        concat!("Size of: ", stringify!(iodbwcsf64))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwcsf64>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwcsf64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf64),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf64),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf64),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBWCSF64 = iodbwcsf64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbzofs64 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_iodbzofs64() {
    const UNINIT: ::std::mem::MaybeUninit<iodbzofs64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbzofs64>(),
        776usize,
        concat!("Size of: ", stringify!(iodbzofs64))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbzofs64>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbzofs64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs64),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs64),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBZOFS64 = iodbzofs64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxis64 {
    pub dummy1: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy2: [::std::os::raw::c_short; 2usize],
    pub data: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_odbaxis64() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxis64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxis64>(),
        776usize,
        concat!("Size of: ", stringify!(odbaxis64))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxis64>(),
        8usize,
        concat!("Alignment of ", stringify!(odbaxis64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis64),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis64),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxis64),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBAXIS64 = odbaxis64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxdt64 {
    pub name: [::std::os::raw::c_char; 4usize],
    pub dummy: [::std::os::raw::c_char; 4usize],
    pub data: f64,
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub flag: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbaxdt64() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxdt64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxdt64>(),
        24usize,
        concat!("Size of: ", stringify!(odbaxdt64))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxdt64>(),
        8usize,
        concat!("Alignment of ", stringify!(odbaxdt64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt64),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBAXDT64 = odbaxdt64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdgn64 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub u: odbdgn64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdgn64__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALDATA,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALDATA; 32usize],
}
#[test]
fn bindgen_test_layout_odbdgn64__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdgn64__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdgn64__bindgen_ty_1>(),
        768usize,
        concat!("Size of: ", stringify!(odbdgn64__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdgn64__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdgn64__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdgn64() {
    const UNINIT: ::std::mem::MaybeUninit<odbdgn64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdgn64>(),
        776usize,
        concat!("Size of: ", stringify!(odbdgn64))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdgn64>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdgn64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn64),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBDGN64 = odbdgn64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct realmes64 {
    pub mes_val: f64,
    pub dec_val: ::std::os::raw::c_long,
    pub dummy: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_realmes64() {
    const UNINIT: ::std::mem::MaybeUninit<realmes64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<realmes64>(),
        24usize,
        concat!("Size of: ", stringify!(realmes64))
    );
    assert_eq!(
        ::std::mem::align_of::<realmes64>(),
        8usize,
        concat!("Alignment of ", stringify!(realmes64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(realmes64),
            "::",
            stringify!(mes_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(realmes64),
            "::",
            stringify!(dec_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(realmes64),
            "::",
            stringify!(dummy)
        )
    );
}
pub type REALMES64 = realmes64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdy {
    pub dummy: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_short,
    pub prgnum: ::std::os::raw::c_short,
    pub prgmnum: ::std::os::raw::c_short,
    pub seqnum: ::std::os::raw::c_long,
    pub actf: ::std::os::raw::c_long,
    pub acts: ::std::os::raw::c_long,
    pub pos: odbdy__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdy__bindgen_ty_1 {
    pub faxis: odbdy__bindgen_ty_1__bindgen_ty_1,
    pub oaxis: odbdy__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy__bindgen_ty_1__bindgen_ty_1 {
    pub absolute: [::std::os::raw::c_long; 32usize],
    pub machine: [::std::os::raw::c_long; 32usize],
    pub relative: [::std::os::raw::c_long; 32usize],
    pub distance: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbdy__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy__bindgen_ty_1__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy__bindgen_ty_1__bindgen_ty_2 {
    pub absolute: ::std::os::raw::c_long,
    pub machine: ::std::os::raw::c_long,
    pub relative: ::std::os::raw::c_long,
    pub distance: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdy__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(odbdy__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(distance)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1),
            "::",
            stringify!(faxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy__bindgen_ty_1),
            "::",
            stringify!(oaxis)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy>(),
        1064usize,
        concat!("Size of: ", stringify!(odbdy))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgnum) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(prgnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgmnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(prgmnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acts) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(acts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy),
            "::",
            stringify!(pos)
        )
    );
}
pub type ODBDY = odbdy;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdy2 {
    pub dummy: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_long,
    pub prgnum: ::std::os::raw::c_long,
    pub prgmnum: ::std::os::raw::c_long,
    pub seqnum: ::std::os::raw::c_long,
    pub actf: ::std::os::raw::c_long,
    pub acts: ::std::os::raw::c_long,
    pub pos: odbdy2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdy2__bindgen_ty_1 {
    pub faxis: odbdy2__bindgen_ty_1__bindgen_ty_1,
    pub oaxis: odbdy2__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy2__bindgen_ty_1__bindgen_ty_1 {
    pub absolute: [::std::os::raw::c_long; 32usize],
    pub machine: [::std::os::raw::c_long; 32usize],
    pub relative: [::std::os::raw::c_long; 32usize],
    pub distance: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbdy2__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy2__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy2__bindgen_ty_1__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy2__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy2__bindgen_ty_1__bindgen_ty_2 {
    pub absolute: ::std::os::raw::c_long,
    pub machine: ::std::os::raw::c_long,
    pub relative: ::std::os::raw::c_long,
    pub distance: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdy2__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy2__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy2__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(odbdy2__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy2__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(distance)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy2__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy2__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1),
            "::",
            stringify!(faxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2__bindgen_ty_1),
            "::",
            stringify!(oaxis)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy2>(),
        1080usize,
        concat!("Size of: ", stringify!(odbdy2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(prgnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgmnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(prgmnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(acts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy2),
            "::",
            stringify!(pos)
        )
    );
}
pub type ODBDY2 = odbdy2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdy3 {
    pub dummy: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_long,
    pub prgnum: ::std::os::raw::c_long,
    pub prgmnum: ::std::os::raw::c_long,
    pub seqnum: ::std::os::raw::c_long,
    pub actf: ::std::os::raw::c_long,
    pub acts: ::std::os::raw::c_long,
    pub pos: odbdy3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdy3__bindgen_ty_1 {
    pub faxis: odbdy3__bindgen_ty_1__bindgen_ty_1,
    pub oaxis: odbdy3__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy3__bindgen_ty_1__bindgen_ty_1 {
    pub absolute: [::std::os::raw::c_long; 32usize],
    pub machine: [::std::os::raw::c_long; 32usize],
    pub relative: [::std::os::raw::c_long; 32usize],
    pub distance: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbdy3__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3__bindgen_ty_1__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy3__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy3__bindgen_ty_1__bindgen_ty_2 {
    pub absolute: ::std::os::raw::c_long,
    pub machine: ::std::os::raw::c_long,
    pub relative: ::std::os::raw::c_long,
    pub distance: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdy3__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(odbdy3__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(distance)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1),
            "::",
            stringify!(faxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3__bindgen_ty_1),
            "::",
            stringify!(oaxis)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy3() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3>(),
        1080usize,
        concat!("Size of: ", stringify!(odbdy3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(prgnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgmnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(prgmnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(acts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3),
            "::",
            stringify!(pos)
        )
    );
}
pub type ODBDY3 = odbdy3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdy3m {
    pub dummy: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_long,
    pub prgnum: ::std::os::raw::c_long,
    pub prgmnum: ::std::os::raw::c_long,
    pub seqnum: ::std::os::raw::c_long,
    pub actf: ::std::os::raw::c_long,
    pub acts: ::std::os::raw::c_long,
    pub pos: odbdy3m__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdy3m__bindgen_ty_1 {
    pub faxis: odbdy3m__bindgen_ty_1__bindgen_ty_1,
    pub oaxis: odbdy3m__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy3m__bindgen_ty_1__bindgen_ty_1 {
    pub absolute: [::std::os::raw::c_long; 32usize],
    pub machine: [::std::os::raw::c_long; 32usize],
    pub relative: [::std::os::raw::c_long; 32usize],
    pub distance: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbdy3m__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3m__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3m__bindgen_ty_1__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3m__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdy3m__bindgen_ty_1__bindgen_ty_2 {
    pub absolute: ::std::os::raw::c_long,
    pub machine: ::std::os::raw::c_long,
    pub relative: ::std::os::raw::c_long,
    pub distance: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdy3m__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3m__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3m__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3m__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(distance)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy3m__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3m__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3m__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdy3m__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3m__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy3m__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1),
            "::",
            stringify!(faxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m__bindgen_ty_1),
            "::",
            stringify!(oaxis)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdy3m() {
    const UNINIT: ::std::mem::MaybeUninit<odbdy3m> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdy3m>(),
        1080usize,
        concat!("Size of: ", stringify!(odbdy3m))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdy3m>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdy3m))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(prgnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgmnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(prgmnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(acts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdy3m),
            "::",
            stringify!(pos)
        )
    );
}
pub type ODBDY3M = odbdy3m;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbwrr {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_idbwrr() {
    const UNINIT: ::std::mem::MaybeUninit<idbwrr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbwrr>(),
        264usize,
        concat!("Size of: ", stringify!(idbwrr))
    );
    assert_eq!(
        ::std::mem::align_of::<idbwrr>(),
        8usize,
        concat!("Alignment of ", stringify!(idbwrr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrr),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBWRR = idbwrr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbwra {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_idbwra() {
    const UNINIT: ::std::mem::MaybeUninit<idbwra> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbwra>(),
        264usize,
        concat!("Size of: ", stringify!(idbwra))
    );
    assert_eq!(
        ::std::mem::align_of::<idbwra>(),
        8usize,
        concat!("Alignment of ", stringify!(idbwra))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwra),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBWRA = idbwra;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbovl {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [[::std::os::raw::c_long; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_iodbovl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbovl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbovl>(),
        520usize,
        concat!("Size of: ", stringify!(iodbovl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbovl>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbovl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovl),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovl),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBOVL = iodbovl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbovlm {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [[::std::os::raw::c_long; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_iodbovlm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbovlm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbovlm>(),
        520usize,
        concat!("Size of: ", stringify!(iodbovlm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbovlm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbovlm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovlm),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovlm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovlm),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBOVLM = iodbovlm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbspn {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_short; 8usize],
}
#[test]
fn bindgen_test_layout_odbspn() {
    const UNINIT: ::std::mem::MaybeUninit<odbspn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbspn>(),
        20usize,
        concat!("Size of: ", stringify!(odbspn))
    );
    assert_eq!(
        ::std::mem::align_of::<odbspn>(),
        2usize,
        concat!("Alignment of ", stringify!(odbspn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspn),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspn),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspn),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBSPN = odbspn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poselm {
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub disp: ::std::os::raw::c_short,
    pub name: ::std::os::raw::c_char,
    pub suff: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_poselm() {
    const UNINIT: ::std::mem::MaybeUninit<poselm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poselm>(),
        16usize,
        concat!("Size of: ", stringify!(poselm))
    );
    assert_eq!(
        ::std::mem::align_of::<poselm>(),
        8usize,
        concat!("Alignment of ", stringify!(poselm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(poselm),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(poselm),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(poselm),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(poselm),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(poselm),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(poselm),
            "::",
            stringify!(suff)
        )
    );
}
pub type POSELM = poselm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpos {
    pub abs: POSELM,
    pub mach: POSELM,
    pub rel: POSELM,
    pub dist: POSELM,
}
#[test]
fn bindgen_test_layout_odbpos() {
    const UNINIT: ::std::mem::MaybeUninit<odbpos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpos>(),
        64usize,
        concat!("Size of: ", stringify!(odbpos))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpos>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpos),
            "::",
            stringify!(abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mach) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpos),
            "::",
            stringify!(mach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpos),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpos),
            "::",
            stringify!(dist)
        )
    );
}
pub type ODBPOS = odbpos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhnd {
    pub input: POSELM,
    pub output: POSELM,
}
#[test]
fn bindgen_test_layout_odbhnd() {
    const UNINIT: ::std::mem::MaybeUninit<odbhnd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhnd>(),
        32usize,
        concat!("Size of: ", stringify!(odbhnd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhnd>(),
        8usize,
        concat!("Alignment of ", stringify!(odbhnd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhnd),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhnd),
            "::",
            stringify!(output)
        )
    );
}
pub type ODBHND = odbhnd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct speedelm {
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub disp: ::std::os::raw::c_short,
    pub name: ::std::os::raw::c_char,
    pub suff: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_speedelm() {
    const UNINIT: ::std::mem::MaybeUninit<speedelm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<speedelm>(),
        16usize,
        concat!("Size of: ", stringify!(speedelm))
    );
    assert_eq!(
        ::std::mem::align_of::<speedelm>(),
        8usize,
        concat!("Alignment of ", stringify!(speedelm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(speedelm),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(speedelm),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(speedelm),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(speedelm),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(speedelm),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(speedelm),
            "::",
            stringify!(suff)
        )
    );
}
pub type SPEEDELM = speedelm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbspeed {
    pub actf: SPEEDELM,
    pub acts: SPEEDELM,
}
#[test]
fn bindgen_test_layout_odbspeed() {
    const UNINIT: ::std::mem::MaybeUninit<odbspeed> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbspeed>(),
        32usize,
        concat!("Size of: ", stringify!(odbspeed))
    );
    assert_eq!(
        ::std::mem::align_of::<odbspeed>(),
        8usize,
        concat!("Alignment of ", stringify!(odbspeed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspeed),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspeed),
            "::",
            stringify!(acts)
        )
    );
}
pub type ODBSPEED = odbspeed;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbjogdrun {
    pub jogdrun: SPEEDELM,
}
#[test]
fn bindgen_test_layout_odbjogdrun() {
    const UNINIT: ::std::mem::MaybeUninit<odbjogdrun> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbjogdrun>(),
        16usize,
        concat!("Size of: ", stringify!(odbjogdrun))
    );
    assert_eq!(
        ::std::mem::align_of::<odbjogdrun>(),
        8usize,
        concat!("Alignment of ", stringify!(odbjogdrun))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jogdrun) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogdrun),
            "::",
            stringify!(jogdrun)
        )
    );
}
pub type ODBJOGDRUN = odbjogdrun;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loadelm {
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub name: ::std::os::raw::c_char,
    pub suff1: ::std::os::raw::c_char,
    pub suff2: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_loadelm() {
    const UNINIT: ::std::mem::MaybeUninit<loadelm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<loadelm>(),
        16usize,
        concat!("Size of: ", stringify!(loadelm))
    );
    assert_eq!(
        ::std::mem::align_of::<loadelm>(),
        8usize,
        concat!("Alignment of ", stringify!(loadelm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(suff1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(suff2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(loadelm),
            "::",
            stringify!(reserve)
        )
    );
}
pub type LOADELM = loadelm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsvload {
    pub svload: LOADELM,
}
#[test]
fn bindgen_test_layout_odbsvload() {
    const UNINIT: ::std::mem::MaybeUninit<odbsvload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsvload>(),
        16usize,
        concat!("Size of: ", stringify!(odbsvload))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsvload>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsvload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svload) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsvload),
            "::",
            stringify!(svload)
        )
    );
}
pub type ODBSVLOAD = odbsvload;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbspload {
    pub spload: LOADELM,
    pub spspeed: LOADELM,
}
#[test]
fn bindgen_test_layout_odbspload() {
    const UNINIT: ::std::mem::MaybeUninit<odbspload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbspload>(),
        32usize,
        concat!("Size of: ", stringify!(odbspload))
    );
    assert_eq!(
        ::std::mem::align_of::<odbspload>(),
        8usize,
        concat!("Alignment of ", stringify!(odbspload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spload) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspload),
            "::",
            stringify!(spload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spspeed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspload),
            "::",
            stringify!(spspeed)
        )
    );
}
pub type ODBSPLOAD = odbspload;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxdt {
    pub name: [::std::os::raw::c_char; 4usize],
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub flag: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbaxdt() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxdt>(),
        24usize,
        concat!("Size of: ", stringify!(odbaxdt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxdt>(),
        8usize,
        concat!("Alignment of ", stringify!(odbaxdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxdt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBAXDT = odbaxdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcss {
    pub srpm: ::std::os::raw::c_long,
    pub sspm: ::std::os::raw::c_long,
    pub smax: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbcss() {
    const UNINIT: ::std::mem::MaybeUninit<odbcss> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcss>(),
        24usize,
        concat!("Size of: ", stringify!(odbcss))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcss>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srpm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcss),
            "::",
            stringify!(srpm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sspm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcss),
            "::",
            stringify!(sspm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smax) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcss),
            "::",
            stringify!(smax)
        )
    );
}
pub type ODBCSS = odbcss;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsiml {
    pub t_code: ::std::os::raw::c_long,
    pub b_code: ::std::os::raw::c_long,
    pub axis_no: ::std::os::raw::c_long,
    pub machine: [::std::os::raw::c_long; 32usize],
    pub dec: [::std::os::raw::c_long; 32usize],
    pub fscsl: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbsiml() {
    const UNINIT: ::std::mem::MaybeUninit<odbsiml> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsiml>(),
        544usize,
        concat!("Size of: ", stringify!(odbsiml))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsiml>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsiml))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsiml),
            "::",
            stringify!(t_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsiml),
            "::",
            stringify!(b_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsiml),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsiml),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsiml),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fscsl) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsiml),
            "::",
            stringify!(fscsl)
        )
    );
}
pub type ODBSIML = odbsiml;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbload {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_short; 32usize],
}
#[test]
fn bindgen_test_layout_odbload() {
    const UNINIT: ::std::mem::MaybeUninit<odbload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbload>(),
        68usize,
        concat!("Size of: ", stringify!(odbload))
    );
    assert_eq!(
        ::std::mem::align_of::<odbload>(),
        2usize,
        concat!("Alignment of ", stringify!(odbload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbload),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbload),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbload),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBLOAD = odbload;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgpnt {
    pub prog_no: ::std::os::raw::c_long,
    pub blk_no: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_prgpnt() {
    const UNINIT: ::std::mem::MaybeUninit<prgpnt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgpnt>(),
        16usize,
        concat!("Size of: ", stringify!(prgpnt))
    );
    assert_eq!(
        ::std::mem::align_of::<prgpnt>(),
        8usize,
        concat!("Alignment of ", stringify!(prgpnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prog_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgpnt),
            "::",
            stringify!(prog_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgpnt),
            "::",
            stringify!(blk_no)
        )
    );
}
pub type PRGPNT = prgpnt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbactptw {
    pub mprgno: ::std::os::raw::c_long,
    pub mblkno: ::std::os::raw::c_long,
    pub sprgno: ::std::os::raw::c_long,
    pub sblkno: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbactptw() {
    const UNINIT: ::std::mem::MaybeUninit<odbactptw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbactptw>(),
        32usize,
        concat!("Size of: ", stringify!(odbactptw))
    );
    assert_eq!(
        ::std::mem::align_of::<odbactptw>(),
        8usize,
        concat!("Alignment of ", stringify!(odbactptw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mprgno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbactptw),
            "::",
            stringify!(mprgno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mblkno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbactptw),
            "::",
            stringify!(mblkno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sprgno) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbactptw),
            "::",
            stringify!(sprgno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sblkno) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbactptw),
            "::",
            stringify!(sblkno)
        )
    );
}
pub type ODBACTPTW = odbactptw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb5axman {
    pub type1: ::std::os::raw::c_short,
    pub type2: ::std::os::raw::c_short,
    pub type3: ::std::os::raw::c_short,
    pub data1: ::std::os::raw::c_long,
    pub data2: ::std::os::raw::c_long,
    pub data3: ::std::os::raw::c_long,
    pub c1: ::std::os::raw::c_long,
    pub c2: ::std::os::raw::c_long,
    pub dummy: ::std::os::raw::c_long,
    pub td: ::std::os::raw::c_long,
    pub r1: ::std::os::raw::c_long,
    pub r2: ::std::os::raw::c_long,
    pub vr: ::std::os::raw::c_long,
    pub h1: ::std::os::raw::c_long,
    pub h2: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odb5axman() {
    const UNINIT: ::std::mem::MaybeUninit<odb5axman> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb5axman>(),
        104usize,
        concat!("Size of: ", stringify!(odb5axman))
    );
    assert_eq!(
        ::std::mem::align_of::<odb5axman>(),
        8usize,
        concat!("Alignment of ", stringify!(odb5axman))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(type1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(type2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type3) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(type3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(td)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(r1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(vr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h1) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(h1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5axman),
            "::",
            stringify!(h2)
        )
    );
}
pub type ODB5AXMAN = odb5axman;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbposfig {
    pub val: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbposfig() {
    const UNINIT: ::std::mem::MaybeUninit<odbposfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbposfig>(),
        16usize,
        concat!("Size of: ", stringify!(odbposfig))
    );
    assert_eq!(
        ::std::mem::align_of::<odbposfig>(),
        8usize,
        concat!("Alignment of ", stringify!(odbposfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbposfig),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbposfig),
            "::",
            stringify!(dec)
        )
    );
}
pub type ODBPOSFIG = odbposfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdncdgn {
    pub ctrl_word: ::std::os::raw::c_short,
    pub can_word: ::std::os::raw::c_short,
    pub nc_file: [::std::os::raw::c_char; 16usize],
    pub read_ptr: ::std::os::raw::c_ushort,
    pub write_ptr: ::std::os::raw::c_ushort,
    pub empty_cnt: ::std::os::raw::c_ushort,
    pub total_size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbdncdgn() {
    const UNINIT: ::std::mem::MaybeUninit<odbdncdgn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdncdgn>(),
        40usize,
        concat!("Size of: ", stringify!(odbdncdgn))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdncdgn>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdncdgn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(ctrl_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_word) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(can_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_file) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(nc_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_ptr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_ptr) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty_cnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(empty_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn),
            "::",
            stringify!(total_size)
        )
    );
}
pub type ODBDNCDGN = odbdncdgn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdncdgn2 {
    pub ctrl_word: ::std::os::raw::c_short,
    pub can_word: ::std::os::raw::c_short,
    pub nc_file: [::std::os::raw::c_char; 64usize],
    pub read_ptr: ::std::os::raw::c_ushort,
    pub write_ptr: ::std::os::raw::c_ushort,
    pub empty_cnt: ::std::os::raw::c_ushort,
    pub total_size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbdncdgn2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdncdgn2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdncdgn2>(),
        88usize,
        concat!("Size of: ", stringify!(odbdncdgn2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdncdgn2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdncdgn2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(ctrl_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_word) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(can_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_file) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(nc_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_ptr) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_ptr) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty_cnt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(empty_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncdgn2),
            "::",
            stringify!(total_size)
        )
    );
}
pub type ODBDNCDGN2 = odbdncdgn2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbup {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_odbup() {
    const UNINIT: ::std::mem::MaybeUninit<odbup> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbup>(),
        260usize,
        concat!("Size of: ", stringify!(odbup))
    );
    assert_eq!(
        ::std::mem::align_of::<odbup>(),
        2usize,
        concat!("Alignment of ", stringify!(odbup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbup),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbup),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBUP = odbup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbbuf {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbbuf() {
    const UNINIT: ::std::mem::MaybeUninit<odbbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbbuf>(),
        6usize,
        concat!("Size of: ", stringify!(odbbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbbuf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbuf),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbuf),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBBUF = odbbuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprgname {
    pub name: [[::std::os::raw::c_char; 256usize]; 12usize],
}
#[test]
fn bindgen_test_layout_odbprgname() {
    const UNINIT: ::std::mem::MaybeUninit<odbprgname> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprgname>(),
        3072usize,
        concat!("Size of: ", stringify!(odbprgname))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprgname>(),
        1usize,
        concat!("Alignment of ", stringify!(odbprgname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprgname),
            "::",
            stringify!(name)
        )
    );
}
pub type ODBPRGNAME = odbprgname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdir {
    pub prg_data: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_prgdir() {
    const UNINIT: ::std::mem::MaybeUninit<prgdir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdir>(),
        256usize,
        concat!("Size of: ", stringify!(prgdir))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdir>(),
        1usize,
        concat!("Alignment of ", stringify!(prgdir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir),
            "::",
            stringify!(prg_data)
        )
    );
}
pub type PRGDIR = prgdir;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbnc {
    pub u: odbnc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbnc__bindgen_ty_1 {
    pub bin: odbnc__bindgen_ty_1__bindgen_ty_1,
    pub asc: [::std::os::raw::c_char; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbnc__bindgen_ty_1__bindgen_ty_1 {
    pub reg_prg: ::std::os::raw::c_short,
    pub unreg_prg: ::std::os::raw::c_short,
    pub used_mem: ::std::os::raw::c_long,
    pub unused_mem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbnc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbnc__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbnc__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(odbnc__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbnc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbnc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_prg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reg_prg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unreg_prg) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(unreg_prg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_mem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(used_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused_mem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(unused_mem)
        )
    );
}
#[test]
fn bindgen_test_layout_odbnc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbnc__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbnc__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(odbnc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbnc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbnc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnc__bindgen_ty_1),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnc__bindgen_ty_1),
            "::",
            stringify!(asc)
        )
    );
}
#[test]
fn bindgen_test_layout_odbnc() {
    const UNINIT: ::std::mem::MaybeUninit<odbnc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbnc>(),
        32usize,
        concat!("Size of: ", stringify!(odbnc))
    );
    assert_eq!(
        ::std::mem::align_of::<odbnc>(),
        8usize,
        concat!("Alignment of ", stringify!(odbnc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(odbnc), "::", stringify!(u))
    );
}
pub type ODBNC = odbnc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpro {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_short,
    pub mdata: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpro() {
    const UNINIT: ::std::mem::MaybeUninit<odbpro> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpro>(),
        8usize,
        concat!("Size of: ", stringify!(odbpro))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpro>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpro))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpro),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpro),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdata) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpro),
            "::",
            stringify!(mdata)
        )
    );
}
pub type ODBPRO = odbpro;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbexeprg {
    pub name: [::std::os::raw::c_char; 36usize],
    pub o_num: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbexeprg() {
    const UNINIT: ::std::mem::MaybeUninit<odbexeprg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbexeprg>(),
        48usize,
        concat!("Size of: ", stringify!(odbexeprg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbexeprg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbexeprg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexeprg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_num) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexeprg),
            "::",
            stringify!(o_num)
        )
    );
}
pub type ODBEXEPRG = odbexeprg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdncprg {
    pub name: [::std::os::raw::c_char; 36usize],
    pub o_num: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdncprg() {
    const UNINIT: ::std::mem::MaybeUninit<odbdncprg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdncprg>(),
        48usize,
        concat!("Size of: ", stringify!(odbdncprg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdncprg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdncprg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncprg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_num) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdncprg),
            "::",
            stringify!(o_num)
        )
    );
}
pub type ODBDNCPRG = odbdncprg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbseq {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbseq() {
    const UNINIT: ::std::mem::MaybeUninit<odbseq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbseq>(),
        16usize,
        concat!("Size of: ", stringify!(odbseq))
    );
    assert_eq!(
        ::std::mem::align_of::<odbseq>(),
        8usize,
        concat!("Alignment of ", stringify!(odbseq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbseq),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbseq),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBSEQ = odbseq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEXEPRG {
    pub length: ::std::os::raw::c_ushort,
    pub prep_blk: ::std::os::raw::c_short,
    pub act_blk: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout_tagEXEPRG() {
    const UNINIT: ::std::mem::MaybeUninit<tagEXEPRG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagEXEPRG>(),
        520usize,
        concat!("Size of: ", stringify!(tagEXEPRG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagEXEPRG>(),
        2usize,
        concat!("Alignment of ", stringify!(tagEXEPRG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagEXEPRG),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prep_blk) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagEXEPRG),
            "::",
            stringify!(prep_blk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_blk) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagEXEPRG),
            "::",
            stringify!(act_blk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagEXEPRG),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagEXEPRG),
            "::",
            stringify!(data)
        )
    );
}
pub type EXEPRG = tagEXEPRG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbexeprginfo {
    pub before_buffering: EXEPRG,
    pub after_buffering: EXEPRG,
}
#[test]
fn bindgen_test_layout_odbexeprginfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbexeprginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbexeprginfo>(),
        1040usize,
        concat!("Size of: ", stringify!(odbexeprginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbexeprginfo>(),
        2usize,
        concat!("Alignment of ", stringify!(odbexeprginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).before_buffering) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexeprginfo),
            "::",
            stringify!(before_buffering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).after_buffering) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexeprginfo),
            "::",
            stringify!(after_buffering)
        )
    );
}
pub type ODBEXEPRGINFO = odbexeprginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdip {
    pub mdiprog: ::std::os::raw::c_short,
    pub mdipntr: ::std::os::raw::c_long,
    pub crntprog: ::std::os::raw::c_short,
    pub crntpntr: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbmdip() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdip> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdip>(),
        32usize,
        concat!("Size of: ", stringify!(odbmdip))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdip>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdip))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdiprog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdip),
            "::",
            stringify!(mdiprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdipntr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdip),
            "::",
            stringify!(mdipntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crntprog) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdip),
            "::",
            stringify!(crntprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crntpntr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdip),
            "::",
            stringify!(crntpntr)
        )
    );
}
pub type ODBMDIP = odbmdip;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbnest {
    pub attrib: ::std::os::raw::c_ulong,
    pub comment: [::std::os::raw::c_char; 64usize],
    pub prog_name: [::std::os::raw::c_char; 245usize],
    pub dummy: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout_odbnest() {
    const UNINIT: ::std::mem::MaybeUninit<odbnest> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbnest>(),
        328usize,
        concat!("Size of: ", stringify!(odbnest))
    );
    assert_eq!(
        ::std::mem::align_of::<odbnest>(),
        8usize,
        concat!("Alignment of ", stringify!(odbnest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnest),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnest),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prog_name) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnest),
            "::",
            stringify!(prog_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnest),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBNESTPDF = odbnest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpdfdrv {
    pub max_num: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub drive: [[::std::os::raw::c_char; 12usize]; 16usize],
}
#[test]
fn bindgen_test_layout_odbpdfdrv() {
    const UNINIT: ::std::mem::MaybeUninit<odbpdfdrv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpdfdrv>(),
        196usize,
        concat!("Size of: ", stringify!(odbpdfdrv))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpdfdrv>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpdfdrv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfdrv),
            "::",
            stringify!(max_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfdrv),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drive) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfdrv),
            "::",
            stringify!(drive)
        )
    );
}
pub type ODBPDFDRV = odbpdfdrv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpdfinf {
    pub used_page: ::std::os::raw::c_long,
    pub all_page: ::std::os::raw::c_long,
    pub used_dir: ::std::os::raw::c_long,
    pub all_dir: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbpdfinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbpdfinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpdfinf>(),
        32usize,
        concat!("Size of: ", stringify!(odbpdfinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpdfinf>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpdfinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_page) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfinf),
            "::",
            stringify!(used_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_page) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfinf),
            "::",
            stringify!(all_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_dir) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfinf),
            "::",
            stringify!(used_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_dir) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfinf),
            "::",
            stringify!(all_dir)
        )
    );
}
pub type ODBPDFINF = odbpdfinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbpdfsdir {
    pub path: [::std::os::raw::c_char; 212usize],
    pub req_num: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idbpdfsdir() {
    const UNINIT: ::std::mem::MaybeUninit<idbpdfsdir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbpdfsdir>(),
        216usize,
        concat!("Size of: ", stringify!(idbpdfsdir))
    );
    assert_eq!(
        ::std::mem::align_of::<idbpdfsdir>(),
        2usize,
        concat!("Alignment of ", stringify!(idbpdfsdir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfsdir),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_num) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfsdir),
            "::",
            stringify!(req_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfsdir),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IDBPDFSDIR = idbpdfsdir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpdfsdir {
    pub sub_exist: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub d_f: [::std::os::raw::c_char; 36usize],
}
#[test]
fn bindgen_test_layout_odbpdfsdir() {
    const UNINIT: ::std::mem::MaybeUninit<odbpdfsdir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpdfsdir>(),
        40usize,
        concat!("Size of: ", stringify!(odbpdfsdir))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpdfsdir>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpdfsdir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_exist) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfsdir),
            "::",
            stringify!(sub_exist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfsdir),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_f) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfsdir),
            "::",
            stringify!(d_f)
        )
    );
}
pub type ODBPDFSDIR = odbpdfsdir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbpdfadir {
    pub path: [::std::os::raw::c_char; 212usize],
    pub req_num: ::std::os::raw::c_short,
    pub size_kind: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idbpdfadir() {
    const UNINIT: ::std::mem::MaybeUninit<idbpdfadir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbpdfadir>(),
        220usize,
        concat!("Size of: ", stringify!(idbpdfadir))
    );
    assert_eq!(
        ::std::mem::align_of::<idbpdfadir>(),
        2usize,
        concat!("Alignment of ", stringify!(idbpdfadir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfadir),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_num) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfadir),
            "::",
            stringify!(req_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_kind) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfadir),
            "::",
            stringify!(size_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfadir),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfadir),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IDBPDFADIR = idbpdfadir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpdfadir {
    pub data_kind: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub dummy2: ::std::os::raw::c_long,
    pub size: ::std::os::raw::c_long,
    pub attr: ::std::os::raw::c_ulong,
    pub d_f: [::std::os::raw::c_char; 36usize],
    pub comment: [::std::os::raw::c_char; 52usize],
    pub o_time: [::std::os::raw::c_char; 12usize],
}
#[test]
fn bindgen_test_layout_odbpdfadir() {
    const UNINIT: ::std::mem::MaybeUninit<odbpdfadir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpdfadir>(),
        144usize,
        concat!("Size of: ", stringify!(odbpdfadir))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpdfadir>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpdfadir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(data_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_f) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(d_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_time) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfadir),
            "::",
            stringify!(o_time)
        )
    );
}
pub type ODBPDFADIR = odbpdfadir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbpdfprg {
    pub path: [::std::os::raw::c_char; 244usize],
    pub size_kind: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idbpdfprg() {
    const UNINIT: ::std::mem::MaybeUninit<idbpdfprg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbpdfprg>(),
        250usize,
        concat!("Size of: ", stringify!(idbpdfprg))
    );
    assert_eq!(
        ::std::mem::align_of::<idbpdfprg>(),
        2usize,
        concat!("Alignment of ", stringify!(idbpdfprg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfprg),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_kind) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfprg),
            "::",
            stringify!(size_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfprg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdfprg),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IDBPDFPRG = idbpdfprg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpdfprg {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_long,
    pub attr: ::std::os::raw::c_ulong,
    pub comment: [::std::os::raw::c_char; 52usize],
    pub o_time: [::std::os::raw::c_char; 12usize],
}
#[test]
fn bindgen_test_layout_odbpdfprg() {
    const UNINIT: ::std::mem::MaybeUninit<odbpdfprg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpdfprg>(),
        96usize,
        concat!("Size of: ", stringify!(odbpdfprg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpdfprg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpdfprg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_time) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfprg),
            "::",
            stringify!(o_time)
        )
    );
}
pub type ODBPDFPRG = odbpdfprg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprtct {
    pub disp: ::std::os::raw::c_short,
    pub edit: ::std::os::raw::c_short,
    pub encd: ::std::os::raw::c_short,
    pub lock: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbprtct() {
    const UNINIT: ::std::mem::MaybeUninit<odbprtct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprtct>(),
        8usize,
        concat!("Size of: ", stringify!(odbprtct))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprtct>(),
        2usize,
        concat!("Alignment of ", stringify!(odbprtct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct),
            "::",
            stringify!(encd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct),
            "::",
            stringify!(lock)
        )
    );
}
pub type ODBPRTCT = odbprtct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprtct2 {
    pub disp: ::std::os::raw::c_short,
    pub edit: ::std::os::raw::c_short,
    pub encd: ::std::os::raw::c_short,
    pub lock: ::std::os::raw::c_short,
    pub output: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbprtct2() {
    const UNINIT: ::std::mem::MaybeUninit<odbprtct2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprtct2>(),
        12usize,
        concat!("Size of: ", stringify!(odbprtct2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprtct2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbprtct2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct2),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct2),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct2),
            "::",
            stringify!(encd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct2),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct2),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprtct2),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBPRTCT2 = odbprtct2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpdfnfil {
    pub dir_num: ::std::os::raw::c_short,
    pub file_num: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpdfnfil() {
    const UNINIT: ::std::mem::MaybeUninit<odbpdfnfil> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpdfnfil>(),
        4usize,
        concat!("Size of: ", stringify!(odbpdfnfil))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpdfnfil>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpdfnfil))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfnfil),
            "::",
            stringify!(dir_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpdfnfil),
            "::",
            stringify!(file_num)
        )
    );
}
pub type ODBPDFNFIL = odbpdfnfil;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbpdftdir {
    pub slct: ::std::os::raw::c_ulong,
    pub attr: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_idbpdftdir() {
    const UNINIT: ::std::mem::MaybeUninit<idbpdftdir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbpdftdir>(),
        16usize,
        concat!("Size of: ", stringify!(idbpdftdir))
    );
    assert_eq!(
        ::std::mem::align_of::<idbpdftdir>(),
        8usize,
        concat!("Alignment of ", stringify!(idbpdftdir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdftdir),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpdftdir),
            "::",
            stringify!(attr)
        )
    );
}
pub type IDBPDFTDIR = idbpdftdir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_dsfile {
    pub path: [::std::os::raw::c_char; 256usize],
    pub fnum: ::std::os::raw::c_long,
    pub offset: ::std::os::raw::c_long,
    pub req_num: ::std::os::raw::c_short,
    pub size_type: ::std::os::raw::c_short,
    pub detail: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_in_dsfile() {
    const UNINIT: ::std::mem::MaybeUninit<in_dsfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_dsfile>(),
        280usize,
        concat!("Size of: ", stringify!(in_dsfile))
    );
    assert_eq!(
        ::std::mem::align_of::<in_dsfile>(),
        8usize,
        concat!("Alignment of ", stringify!(in_dsfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnum) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_num) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(req_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_type) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(size_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detail) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IN_DSFILE = in_dsfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct out_dsinfo {
    pub type_: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub fnum: ::std::os::raw::c_long,
    pub total: ::std::os::raw::c_long,
    pub remain_h: ::std::os::raw::c_ulong,
    pub remain_l: ::std::os::raw::c_ulong,
    pub dir: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_out_dsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<out_dsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<out_dsinfo>(),
        296usize,
        concat!("Size of: ", stringify!(out_dsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<out_dsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(out_dsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remain_h) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(remain_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remain_l) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(remain_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsinfo),
            "::",
            stringify!(dir)
        )
    );
}
pub type OUT_DSINFO = out_dsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct out_dsfile {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_long,
    pub attr: ::std::os::raw::c_ulong,
    pub file: [::std::os::raw::c_char; 36usize],
    pub info: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_out_dsfile() {
    const UNINIT: ::std::mem::MaybeUninit<out_dsfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<out_dsfile>(),
        200usize,
        concat!("Size of: ", stringify!(out_dsfile))
    );
    assert_eq!(
        ::std::mem::align_of::<out_dsfile>(),
        8usize,
        concat!("Alignment of ", stringify!(out_dsfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(out_dsfile),
            "::",
            stringify!(info)
        )
    );
}
pub type OUT_DSFILE = out_dsfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_dsfile_req {
    pub file: [::std::os::raw::c_char; 256usize],
    pub fnum: ::std::os::raw::c_long,
    pub offset: ::std::os::raw::c_long,
    pub detail: ::std::os::raw::c_short,
    pub option: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_in_dsfile_req() {
    const UNINIT: ::std::mem::MaybeUninit<in_dsfile_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_dsfile_req>(),
        280usize,
        concat!("Size of: ", stringify!(in_dsfile_req))
    );
    assert_eq!(
        ::std::mem::align_of::<in_dsfile_req>(),
        8usize,
        concat!("Alignment of ", stringify!(in_dsfile_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile_req),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnum) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile_req),
            "::",
            stringify!(fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile_req),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detail) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile_req),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(in_dsfile_req),
            "::",
            stringify!(option)
        )
    );
}
pub type ODB_IN_DSFILE_REQ = in_dsfile_req;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_stat_dsfile {
    pub req_num: ::std::os::raw::c_short,
    pub size_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_in_stat_dsfile() {
    const UNINIT: ::std::mem::MaybeUninit<in_stat_dsfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_stat_dsfile>(),
        4usize,
        concat!("Size of: ", stringify!(in_stat_dsfile))
    );
    assert_eq!(
        ::std::mem::align_of::<in_stat_dsfile>(),
        2usize,
        concat!("Alignment of ", stringify!(in_stat_dsfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_stat_dsfile),
            "::",
            stringify!(req_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(in_stat_dsfile),
            "::",
            stringify!(size_type)
        )
    );
}
pub type ODB_IN_STAT_DSFILE = in_stat_dsfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbembedfinf {
    pub used_page: ::std::os::raw::c_long,
    pub all_page: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbembedfinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbembedfinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbembedfinf>(),
        16usize,
        concat!("Size of: ", stringify!(odbembedfinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbembedfinf>(),
        8usize,
        concat!("Alignment of ", stringify!(odbembedfinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_page) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbembedfinf),
            "::",
            stringify!(used_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_page) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbembedfinf),
            "::",
            stringify!(all_page)
        )
    );
}
pub type ODBEMBEDFINF = odbembedfinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtofs {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtofs() {
    const UNINIT: ::std::mem::MaybeUninit<odbtofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtofs>(),
        16usize,
        concat!("Size of: ", stringify!(odbtofs))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtofs>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtofs),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtofs),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtofs),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTOFS = odbtofs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbto {
    pub datano_s: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub u: iodbto__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbto__bindgen_ty_1 {
    pub m_ofs: [::std::os::raw::c_long; 5usize],
    pub m_ofs_a: [::std::os::raw::c_long; 5usize],
    pub m_ofs_b: [::std::os::raw::c_long; 10usize],
    pub m_ofs_c: [::std::os::raw::c_long; 20usize],
    pub m_ofs_at: [iodbto__bindgen_ty_1__bindgen_ty_1; 5usize],
    pub m_ofs_bt: [iodbto__bindgen_ty_1__bindgen_ty_2; 5usize],
    pub m_ofs_ct: [iodbto__bindgen_ty_1__bindgen_ty_3; 5usize],
    pub t_tip: [::std::os::raw::c_short; 5usize],
    pub t_ofs: [::std::os::raw::c_long; 5usize],
    pub t_ofs_a: [iodbto__bindgen_ty_1__bindgen_ty_4; 5usize],
    pub t_ofs_b: [iodbto__bindgen_ty_1__bindgen_ty_5; 5usize],
    pub t_ofs_2g: [::std::os::raw::c_long; 15usize],
    pub m_ofs_cnr: [::std::os::raw::c_long; 10usize],
    pub t_ofs_ex: [iodbto__bindgen_ty_1__bindgen_ty_6; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbto__bindgen_ty_1__bindgen_ty_1 {
    pub tip: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 1usize],
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(tip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbto__bindgen_ty_1__bindgen_ty_2 {
    pub tip: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(tip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbto__bindgen_ty_1__bindgen_ty_3 {
    pub tip: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1__bindgen_ty_3>(),
        40usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(tip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbto__bindgen_ty_1__bindgen_ty_4 {
    pub tip: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1__bindgen_ty_4>(),
        40usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(tip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbto__bindgen_ty_1__bindgen_ty_5 {
    pub tip: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1__bindgen_ty_5>(),
        72usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(tip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbto__bindgen_ty_1__bindgen_ty_6 {
    pub data: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbto__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto__bindgen_ty_1>(),
        360usize,
        concat!("Size of: ", stringify!(iodbto__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbto__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_at) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_at)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_bt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_bt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_ct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_ct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_tip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(t_tip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_ofs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(t_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_ofs_a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(t_ofs_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_ofs_b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(t_ofs_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_ofs_2g) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(t_ofs_2g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_ofs_cnr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(m_ofs_cnr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_ofs_ex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto__bindgen_ty_1),
            "::",
            stringify!(t_ofs_ex)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbto() {
    const UNINIT: ::std::mem::MaybeUninit<iodbto> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbto>(),
        368usize,
        concat!("Size of: ", stringify!(iodbto))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbto>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbto))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbto),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(iodbto), "::", stringify!(u))
    );
}
pub type IODBTO = iodbto;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbzofs {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_iodbzofs() {
    const UNINIT: ::std::mem::MaybeUninit<iodbzofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbzofs>(),
        264usize,
        concat!("Size of: ", stringify!(iodbzofs))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbzofs>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbzofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzofs),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBZOFS = iodbzofs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbzor {
    pub datano_s: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 256usize],
}
#[test]
fn bindgen_test_layout_iodbzor() {
    const UNINIT: ::std::mem::MaybeUninit<iodbzor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbzor>(),
        2056usize,
        concat!("Size of: ", stringify!(iodbzor))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbzor>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbzor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbzor),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBZOR = iodbzor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbjogcmdcode {
    pub adrs: ::std::os::raw::c_char,
    pub num: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbjogcmdcode() {
    const UNINIT: ::std::mem::MaybeUninit<iodbjogcmdcode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbjogcmdcode>(),
        16usize,
        concat!("Size of: ", stringify!(iodbjogcmdcode))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbjogcmdcode>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbjogcmdcode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdcode),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdcode),
            "::",
            stringify!(num)
        )
    );
}
pub type ODBJOGCMDCODE = iodbjogcmdcode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbjogcmdscode {
    pub adrs: [::std::os::raw::c_char; 4usize],
    pub num: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbjogcmdscode() {
    const UNINIT: ::std::mem::MaybeUninit<iodbjogcmdscode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbjogcmdscode>(),
        16usize,
        concat!("Size of: ", stringify!(iodbjogcmdscode))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbjogcmdscode>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbjogcmdscode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdscode),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdscode),
            "::",
            stringify!(num)
        )
    );
}
pub type ODBJOGCMDSCODE = iodbjogcmdscode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbjogcmdaxis {
    pub name: [::std::os::raw::c_char; 4usize],
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbjogcmdaxis() {
    const UNINIT: ::std::mem::MaybeUninit<iodbjogcmdaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbjogcmdaxis>(),
        24usize,
        concat!("Size of: ", stringify!(iodbjogcmdaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbjogcmdaxis>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbjogcmdaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdaxis),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdaxis),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbjogcmdaxis),
            "::",
            stringify!(dec)
        )
    );
}
pub type ODBJOGCMDAXIS = iodbjogcmdaxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbjogcmd {
    pub gcode: ODBJOGCMDCODE,
    pub mcode: ODBJOGCMDCODE,
    pub scode: ODBJOGCMDCODE,
    pub tcode: ODBJOGCMDCODE,
    pub bcode: ODBJOGCMDCODE,
    pub padr: ODBJOGCMDCODE,
    pub extscode: [ODBJOGCMDSCODE; 4usize],
    pub axis: [ODBJOGCMDAXIS; 32usize],
    pub axis_cnt: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbjogcmd() {
    const UNINIT: ::std::mem::MaybeUninit<odbjogcmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbjogcmd>(),
        936usize,
        concat!("Size of: ", stringify!(odbjogcmd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbjogcmd>(),
        8usize,
        concat!("Alignment of ", stringify!(odbjogcmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(gcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(scode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(tcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcode) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(bcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(padr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extscode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(extscode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_cnt) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(odbjogcmd),
            "::",
            stringify!(axis_cnt)
        )
    );
}
pub type ODBJOGCMD = odbjogcmd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmstp {
    pub datano_s: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout_iodbmstp() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmstp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmstp>(),
        14usize,
        concat!("Size of: ", stringify!(iodbmstp))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmstp>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbmstp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmstp),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmstp),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmstp),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmstp),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBMSTP = iodbmstp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct realprm {
    pub prm_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_realprm() {
    const UNINIT: ::std::mem::MaybeUninit<realprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<realprm>(),
        16usize,
        concat!("Size of: ", stringify!(realprm))
    );
    assert_eq!(
        ::std::mem::align_of::<realprm>(),
        8usize,
        concat!("Alignment of ", stringify!(realprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(realprm),
            "::",
            stringify!(prm_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(realprm),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type REALPRM = realprm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbpsd {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub u: iodbpsd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbpsd__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALPRM,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_iodbpsd__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpsd__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpsd__bindgen_ty_1>(),
        512usize,
        concat!("Size of: ", stringify!(iodbpsd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpsd__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpsd__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpsd() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpsd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpsd>(),
        520usize,
        concat!("Size of: ", stringify!(iodbpsd))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpsd>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpsd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpsd),
            "::",
            stringify!(u)
        )
    );
}
pub type IODBPSD = iodbpsd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbprm {
    pub datano: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub info: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub data: [iodbprm__bindgen_ty_1; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbprm__bindgen_ty_1 {
    pub prm_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbprm__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbprm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm__bindgen_ty_1),
            "::",
            stringify!(prm_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm__bindgen_ty_1),
            "::",
            stringify!(dec_val)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbprm>(),
        528usize,
        concat!("Size of: ", stringify!(iodbprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprm),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBPRM = iodbprm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbbook {
    pub param_no: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_char,
    pub u: iodbbook__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbbook__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALPRM,
}
#[test]
fn bindgen_test_layout_iodbbook__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbbook__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbbook__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbbook__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbbook__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbbook__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbbook() {
    const UNINIT: ::std::mem::MaybeUninit<iodbbook> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbbook>(),
        24usize,
        concat!("Size of: ", stringify!(iodbbook))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbbook>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbbook))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook),
            "::",
            stringify!(param_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbook),
            "::",
            stringify!(u)
        )
    );
}
pub type IODBBOOK = iodbbook;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpi {
    pub datano_s: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 5usize],
}
#[test]
fn bindgen_test_layout_iodbpi() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpi>(),
        12usize,
        concat!("Size of: ", stringify!(iodbpi))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpi>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbpi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpi),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpi),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpi),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpi),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBPI = iodbpi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbovmst {
    pub adrs: ::std::os::raw::c_char,
    pub num: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbovmst() {
    const UNINIT: ::std::mem::MaybeUninit<iodbovmst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbovmst>(),
        16usize,
        concat!("Size of: ", stringify!(iodbovmst))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbovmst>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbovmst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovmst),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovmst),
            "::",
            stringify!(num)
        )
    );
}
pub type IODBOVMST = iodbovmst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbovstr {
    pub mcode: IODBOVMST,
    pub scode: IODBOVMST,
    pub tcode: IODBOVMST,
    pub bcode: IODBOVMST,
}
#[test]
fn bindgen_test_layout_iodbovstr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbovstr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbovstr>(),
        64usize,
        concat!("Size of: ", stringify!(iodbovstr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbovstr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbovstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovstr),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovstr),
            "::",
            stringify!(scode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovstr),
            "::",
            stringify!(tcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbovstr),
            "::",
            stringify!(bcode)
        )
    );
}
pub type IODBOVSTR = iodbovstr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIODBPITCHBLK {
    pub group_num: ::std::os::raw::c_short,
    pub pginf: [tagIODBPITCHBLK__bindgen_ty_1; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIODBPITCHBLK__bindgen_ty_1 {
    pub s_no: ::std::os::raw::c_long,
    pub e_no: ::std::os::raw::c_long,
    pub attr: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_tagIODBPITCHBLK__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<tagIODBPITCHBLK__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagIODBPITCHBLK__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(tagIODBPITCHBLK__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tagIODBPITCHBLK__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(tagIODBPITCHBLK__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBPITCHBLK__bindgen_ty_1),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBPITCHBLK__bindgen_ty_1),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBPITCHBLK__bindgen_ty_1),
            "::",
            stringify!(attr)
        )
    );
}
#[test]
fn bindgen_test_layout_tagIODBPITCHBLK() {
    const UNINIT: ::std::mem::MaybeUninit<tagIODBPITCHBLK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagIODBPITCHBLK>(),
        200usize,
        concat!("Size of: ", stringify!(tagIODBPITCHBLK))
    );
    assert_eq!(
        ::std::mem::align_of::<tagIODBPITCHBLK>(),
        8usize,
        concat!("Alignment of ", stringify!(tagIODBPITCHBLK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBPITCHBLK),
            "::",
            stringify!(group_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pginf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBPITCHBLK),
            "::",
            stringify!(pginf)
        )
    );
}
pub type IODBPITCHBLK = tagIODBPITCHBLK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBVOLC {
    pub start_no: ::std::os::raw::c_long,
    pub start_ax: ::std::os::raw::c_long,
    pub end_no: ::std::os::raw::c_long,
    pub end_ax: ::std::os::raw::c_long,
    pub num: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_char,
    pub data: [::std::os::raw::c_long; 72usize],
}
#[test]
fn bindgen_test_layout_tagODBVOLC() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBVOLC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBVOLC>(),
        624usize,
        concat!("Size of: ", stringify!(tagODBVOLC))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBVOLC>(),
        8usize,
        concat!("Alignment of ", stringify!(tagODBVOLC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(start_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_ax) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(start_ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_no) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(end_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ax) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(end_ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLC),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBVOLC = tagODBVOLC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrotvolc {
    pub lin: [::std::os::raw::c_long; 3usize],
    pub rot: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_iodbrotvolc() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrotvolc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrotvolc>(),
        48usize,
        concat!("Size of: ", stringify!(iodbrotvolc))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrotvolc>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrotvolc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrotvolc),
            "::",
            stringify!(lin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrotvolc),
            "::",
            stringify!(rot)
        )
    );
}
pub type IODBROTVOLC = iodbrotvolc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBVOLCOMP {
    pub comp: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_tagODBVOLCOMP() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBVOLCOMP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBVOLCOMP>(),
        40usize,
        concat!("Size of: ", stringify!(tagODBVOLCOMP))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBVOLCOMP>(),
        8usize,
        concat!("Alignment of ", stringify!(tagODBVOLCOMP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBVOLCOMP),
            "::",
            stringify!(comp)
        )
    );
}
pub type ODBVOLCOMP = tagODBVOLCOMP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbm {
    pub datano: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub mcr_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbm() {
    const UNINIT: ::std::mem::MaybeUninit<odbm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbm>(),
        24usize,
        concat!("Size of: ", stringify!(odbm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbm>(),
        8usize,
        concat!("Alignment of ", stringify!(odbm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type ODBM = odbm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbm3 {
    pub datano: ::std::os::raw::c_long,
    pub mcr_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbm3() {
    const UNINIT: ::std::mem::MaybeUninit<odbm3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbm3>(),
        24usize,
        concat!("Size of: ", stringify!(odbm3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbm3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbm3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm3),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm3),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbm3),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type ODBM3 = odbm3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmr {
    pub datano_s: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [iodbmr__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmr__bindgen_ty_1 {
    pub mcr_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbmr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmr__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbmr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmr__bindgen_ty_1),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmr__bindgen_ty_1),
            "::",
            stringify!(dec_val)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbmr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmr>(),
        88usize,
        concat!("Size of: ", stringify!(iodbmr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmr),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmr),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmr),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmr),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBMR = iodbmr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmnr {
    pub mcr_val: f64,
    pub name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_iodbmnr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmnr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmnr>(),
        24usize,
        concat!("Size of: ", stringify!(iodbmnr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmnr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmnr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmnr),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmnr),
            "::",
            stringify!(name)
        )
    );
}
pub type IODBMRN = iodbmnr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmnr3 {
    pub mcr_val: f64,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_iodbmnr3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmnr3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmnr3>(),
        40usize,
        concat!("Size of: ", stringify!(iodbmnr3))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmnr3>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmnr3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmnr3),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmnr3),
            "::",
            stringify!(name)
        )
    );
}
pub type IODBMRN3 = iodbmnr3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmnr4 {
    pub mcr_val: f64,
    pub name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_iodbmnr4() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmnr4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmnr4>(),
        72usize,
        concat!("Size of: ", stringify!(iodbmnr4))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmnr4>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmnr4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmnr4),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmnr4),
            "::",
            stringify!(name)
        )
    );
}
pub type IODBMRN4 = iodbmnr4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpm {
    pub datano: ::std::os::raw::c_long,
    pub dummy: ::std::os::raw::c_short,
    pub mcr_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpm() {
    const UNINIT: ::std::mem::MaybeUninit<odbpm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpm>(),
        32usize,
        concat!("Size of: ", stringify!(odbpm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpm>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpm),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpm),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpm),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpm),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type ODBPM = odbpm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpr {
    pub datano_s: ::std::os::raw::c_long,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_long,
    pub data: [iodbpr__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpr__bindgen_ty_1 {
    pub mcr_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbpr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpr__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbpr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpr__bindgen_ty_1),
            "::",
            stringify!(mcr_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpr__bindgen_ty_1),
            "::",
            stringify!(dec_val)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpr>(),
        104usize,
        concat!("Size of: ", stringify!(iodbpr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpr),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpr),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpr),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpr),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBPR = iodbpr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlinf {
    pub ofs_type: ::std::os::raw::c_short,
    pub use_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtlinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlinf>(),
        4usize,
        concat!("Size of: ", stringify!(odbtlinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtlinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinf),
            "::",
            stringify!(ofs_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinf),
            "::",
            stringify!(use_no)
        )
    );
}
pub type ODBTLINF = odbtlinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlinf2 {
    pub ofs_type: ::std::os::raw::c_short,
    pub use_no: ::std::os::raw::c_short,
    pub ofs_enable: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtlinf2() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlinf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlinf2>(),
        6usize,
        concat!("Size of: ", stringify!(odbtlinf2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlinf2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtlinf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinf2),
            "::",
            stringify!(ofs_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinf2),
            "::",
            stringify!(use_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_enable) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinf2),
            "::",
            stringify!(ofs_enable)
        )
    );
}
pub type ODBTLINF2 = odbtlinf2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmvinf {
    pub use_no1: ::std::os::raw::c_short,
    pub use_no2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbmvinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbmvinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmvinf>(),
        4usize,
        concat!("Size of: ", stringify!(odbmvinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmvinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmvinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmvinf),
            "::",
            stringify!(use_no1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmvinf),
            "::",
            stringify!(use_no2)
        )
    );
}
pub type ODBMVINF = odbmvinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpminf {
    pub use_no1: ::std::os::raw::c_short,
    pub use_no2: ::std::os::raw::c_short,
    pub v2_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpminf() {
    const UNINIT: ::std::mem::MaybeUninit<odbpminf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpminf>(),
        6usize,
        concat!("Size of: ", stringify!(odbpminf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpminf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpminf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf),
            "::",
            stringify!(use_no1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf),
            "::",
            stringify!(use_no2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf),
            "::",
            stringify!(v2_type)
        )
    );
}
pub type ODBPMINF = odbpminf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpminf2 {
    pub use_no1: ::std::os::raw::c_long,
    pub use_no2: ::std::os::raw::c_long,
    pub use_no20: ::std::os::raw::c_long,
    pub v1_type: ::std::os::raw::c_short,
    pub v2_type: ::std::os::raw::c_short,
    pub v20_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpminf2() {
    const UNINIT: ::std::mem::MaybeUninit<odbpminf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpminf2>(),
        32usize,
        concat!("Size of: ", stringify!(odbpminf2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpminf2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpminf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf2),
            "::",
            stringify!(use_no1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf2),
            "::",
            stringify!(use_no2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no20) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf2),
            "::",
            stringify!(use_no20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v1_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf2),
            "::",
            stringify!(v1_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2_type) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf2),
            "::",
            stringify!(v2_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v20_type) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf2),
            "::",
            stringify!(v20_type)
        )
    );
}
pub type ODBPMINF2 = odbpminf2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpminf3 {
    pub use_no1: ::std::os::raw::c_short,
    pub use_no2: ::std::os::raw::c_ulong,
    pub v1_type: ::std::os::raw::c_short,
    pub v2_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpminf3() {
    const UNINIT: ::std::mem::MaybeUninit<odbpminf3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpminf3>(),
        24usize,
        concat!("Size of: ", stringify!(odbpminf3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpminf3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpminf3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf3),
            "::",
            stringify!(use_no1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf3),
            "::",
            stringify!(use_no2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v1_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf3),
            "::",
            stringify!(v1_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpminf3),
            "::",
            stringify!(v2_type)
        )
    );
}
pub type ODBPMINF3 = odbpminf3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmvalflg {
    pub exe_type: ::std::os::raw::c_short,
    pub aux_type: ::std::os::raw::c_short,
    pub tlk_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpmvalflg() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmvalflg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmvalflg>(),
        6usize,
        concat!("Size of: ", stringify!(odbpmvalflg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmvalflg>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpmvalflg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exe_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmvalflg),
            "::",
            stringify!(exe_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmvalflg),
            "::",
            stringify!(aux_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlk_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmvalflg),
            "::",
            stringify!(tlk_type)
        )
    );
}
pub type ODBPMVALFLG = odbpmvalflg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdatrng {
    pub data_min: ::std::os::raw::c_long,
    pub data_max: ::std::os::raw::c_long,
    pub status: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdatrng() {
    const UNINIT: ::std::mem::MaybeUninit<odbdatrng> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdatrng>(),
        24usize,
        concat!("Size of: ", stringify!(odbdatrng))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdatrng>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdatrng))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng),
            "::",
            stringify!(data_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng),
            "::",
            stringify!(data_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdatrng),
            "::",
            stringify!(status)
        )
    );
}
pub type ODBDATRNG = odbdatrng;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ODBHOLDATA {
    pub mes_axis: [::std::os::raw::c_char; 2usize],
    pub mes_parl: [::std::os::raw::c_char; 2usize],
    pub mes_val1: [::std::os::raw::c_long; 2usize],
    pub mes_dp1: [::std::os::raw::c_long; 2usize],
    pub mes_val2: [::std::os::raw::c_long; 2usize],
    pub mes_dp2: [::std::os::raw::c_long; 2usize],
    pub mes_val3: [::std::os::raw::c_long; 2usize],
    pub mes_dp3: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_ODBHOLDATA() {
    const UNINIT: ::std::mem::MaybeUninit<ODBHOLDATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ODBHOLDATA>(),
        104usize,
        concat!("Size of: ", stringify!(ODBHOLDATA))
    );
    assert_eq!(
        ::std::mem::align_of::<ODBHOLDATA>(),
        8usize,
        concat!("Alignment of ", stringify!(ODBHOLDATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_parl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_parl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_val1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_dp1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_dp1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_val2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_dp2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_dp2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_val3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_dp3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBHOLDATA),
            "::",
            stringify!(mes_dp3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hol64 {
    pub mes_val1: [f64; 2usize],
    pub mes_dp1: [::std::os::raw::c_long; 2usize],
    pub mes_val2: [f64; 2usize],
    pub mes_dp2: [::std::os::raw::c_long; 2usize],
    pub mes_val3: [f64; 2usize],
    pub mes_dp3: [::std::os::raw::c_long; 2usize],
    pub mes_axis: [::std::os::raw::c_char; 2usize],
    pub mes_parl: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_hol64() {
    const UNINIT: ::std::mem::MaybeUninit<hol64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hol64>(),
        104usize,
        concat!("Size of: ", stringify!(hol64))
    );
    assert_eq!(
        ::std::mem::align_of::<hol64>(),
        8usize,
        concat!("Alignment of ", stringify!(hol64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_val1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_dp1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_dp1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_val2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_dp2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_dp2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val3) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_val3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_dp3) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_dp3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_axis) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_parl) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(hol64),
            "::",
            stringify!(mes_parl)
        )
    );
}
pub type ODBHOLDATA64 = hol64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlmsinf {
    pub t: ::std::os::raw::c_long,
    pub m: ::std::os::raw::c_long,
    pub hm: ::std::os::raw::c_long,
    pub hm_dp: ::std::os::raw::c_long,
    pub tlofs_no: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_tlmsinf() {
    const UNINIT: ::std::mem::MaybeUninit<tlmsinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tlmsinf>(),
        40usize,
        concat!("Size of: ", stringify!(tlmsinf))
    );
    assert_eq!(
        ::std::mem::align_of::<tlmsinf>(),
        8usize,
        concat!("Alignment of ", stringify!(tlmsinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmsinf),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmsinf),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmsinf),
            "::",
            stringify!(hm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hm_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmsinf),
            "::",
            stringify!(hm_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlofs_no) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmsinf),
            "::",
            stringify!(tlofs_no)
        )
    );
}
pub type ODBTLMSINF = tlmsinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tldata {
    pub tl: ::std::os::raw::c_long,
    pub tl_dp: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_tldata() {
    const UNINIT: ::std::mem::MaybeUninit<tldata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tldata>(),
        16usize,
        concat!("Size of: ", stringify!(tldata))
    );
    assert_eq!(
        ::std::mem::align_of::<tldata>(),
        8usize,
        concat!("Alignment of ", stringify!(tldata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tldata),
            "::",
            stringify!(tl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_dp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tldata),
            "::",
            stringify!(tl_dp)
        )
    );
}
pub type ODBTLDATA = tldata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hspinfo {
    pub prminfo: [[::std::os::raw::c_char; 16usize]; 8usize],
}
#[test]
fn bindgen_test_layout_hspinfo() {
    const UNINIT: ::std::mem::MaybeUninit<hspinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hspinfo>(),
        128usize,
        concat!("Size of: ", stringify!(hspinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<hspinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(hspinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prminfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspinfo),
            "::",
            stringify!(prminfo)
        )
    );
}
pub type HSPINFO = hspinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union hspdata {
    pub cdata: [::std::os::raw::c_char; 32usize],
    pub idata: [::std::os::raw::c_short; 32usize],
    pub ldata: [::std::os::raw::c_long; 32usize],
    pub rdata: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_hspdata() {
    const UNINIT: ::std::mem::MaybeUninit<hspdata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hspdata>(),
        512usize,
        concat!("Size of: ", stringify!(hspdata))
    );
    assert_eq!(
        ::std::mem::align_of::<hspdata>(),
        8usize,
        concat!("Alignment of ", stringify!(hspdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdata),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdata),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdata),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdata),
            "::",
            stringify!(rdata)
        )
    );
}
pub type HSPDATA = hspdata;
#[repr(C)]
#[derive(Copy, Clone)]
pub union hspdatam {
    pub cdata: [::std::os::raw::c_char; 32usize],
    pub idata: [::std::os::raw::c_short; 32usize],
    pub ldata: [::std::os::raw::c_long; 32usize],
    pub rdata: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_hspdatam() {
    const UNINIT: ::std::mem::MaybeUninit<hspdatam> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hspdatam>(),
        512usize,
        concat!("Size of: ", stringify!(hspdatam))
    );
    assert_eq!(
        ::std::mem::align_of::<hspdatam>(),
        8usize,
        concat!("Alignment of ", stringify!(hspdatam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdatam),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdatam),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdatam),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hspdatam),
            "::",
            stringify!(rdata)
        )
    );
}
pub type HSPDATAM = hspdatam;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfofs {
    pub mcrval: ::std::os::raw::c_long,
    pub decval: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbfofs() {
    const UNINIT: ::std::mem::MaybeUninit<odbfofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfofs>(),
        16usize,
        concat!("Size of: ", stringify!(odbfofs))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfofs>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfofs),
            "::",
            stringify!(mcrval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfofs),
            "::",
            stringify!(decval)
        )
    );
}
pub type ODBFOFS = odbfofs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbctpr {
    pub data: iodbctpr__bindgen_ty_1,
    pub prm: [iodbctpr__bindgen_ty_2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbctpr__bindgen_ty_1 {
    pub acc_bipl: [::std::os::raw::c_long; 32usize],
    pub acc_chg_time: ::std::os::raw::c_long,
    pub jerk_acc_diff: [::std::os::raw::c_long; 32usize],
    pub jerk_acc_diff_lin: [::std::os::raw::c_long; 32usize],
    pub jerk_acc_ratio: ::std::os::raw::c_char,
    pub max_acc: [::std::os::raw::c_long; 32usize],
    pub t_con_aipl: [::std::os::raw::c_short; 32usize],
    pub corner_feed_diff: [::std::os::raw::c_long; 32usize],
    pub max_cut_fdrate: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_iodbctpr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctpr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctpr__bindgen_ty_1>(),
        1616usize,
        concat!("Size of: ", stringify!(iodbctpr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctpr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbctpr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_bipl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(acc_bipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_chg_time) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(acc_chg_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_diff) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(jerk_acc_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_diff_lin) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(jerk_acc_diff_lin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_ratio) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(jerk_acc_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_acc) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(max_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_con_aipl) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(t_con_aipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner_feed_diff) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(corner_feed_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cut_fdrate) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_1),
            "::",
            stringify!(max_cut_fdrate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbctpr__bindgen_ty_2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub u: iodbctpr__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbctpr__bindgen_ty_2__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_iodbctpr__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctpr__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctpr__bindgen_ty_2__bindgen_ty_1>(),
        256usize,
        concat!(
            "Size of: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctpr__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbctpr__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctpr__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctpr__bindgen_ty_2>(),
        264usize,
        concat!("Size of: ", stringify!(iodbctpr__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctpr__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbctpr__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr__bindgen_ty_2),
            "::",
            stringify!(u)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbctpr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctpr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctpr>(),
        2144usize,
        concat!("Size of: ", stringify!(iodbctpr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctpr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbctpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctpr),
            "::",
            stringify!(prm)
        )
    );
}
pub type IODBCTPR = iodbctpr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbctprm {
    pub data: iodbctprm__bindgen_ty_1,
    pub prm: [iodbctprm__bindgen_ty_2; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbctprm__bindgen_ty_1 {
    pub data_160: iodbctprm__bindgen_ty_1__bindgen_ty_1,
    pub data_30i: iodbctprm__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbctprm__bindgen_ty_1__bindgen_ty_1 {
    pub acc_bipl: [::std::os::raw::c_long; 8usize],
    pub acc_chg_time: ::std::os::raw::c_long,
    pub jerk_acc_diff: [::std::os::raw::c_long; 8usize],
    pub jerk_acc_diff_lin: [::std::os::raw::c_long; 8usize],
    pub jerk_acc_ratio: ::std::os::raw::c_char,
    pub max_acc: [::std::os::raw::c_long; 8usize],
    pub t_con_aipl: [::std::os::raw::c_short; 8usize],
    pub corner_feed_diff: [::std::os::raw::c_long; 8usize],
    pub max_cut_fdrate: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbctprm__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctprm__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctprm__bindgen_ty_1__bindgen_ty_1>(),
        416usize,
        concat!(
            "Size of: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctprm__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_bipl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(acc_bipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_chg_time) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(acc_chg_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_diff) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(jerk_acc_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_diff_lin) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(jerk_acc_diff_lin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_ratio) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(jerk_acc_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_acc) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(max_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_con_aipl) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(t_con_aipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner_feed_diff) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(corner_feed_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cut_fdrate) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(max_cut_fdrate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbctprm__bindgen_ty_1__bindgen_ty_2 {
    pub acc_bipl: [REALPRM; 32usize],
    pub acc_chg_time: REALPRM,
    pub jerk_acc_diff: [REALPRM; 32usize],
    pub jerk_acc_diff_lin: [REALPRM; 32usize],
    pub jerk_acc_ratio: ::std::os::raw::c_char,
    pub max_acc: [REALPRM; 32usize],
    pub t_con_aipl: [::std::os::raw::c_short; 32usize],
    pub corner_feed_diff: [REALPRM; 32usize],
    pub max_cut_fdrate: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_iodbctprm__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctprm__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctprm__bindgen_ty_1__bindgen_ty_2>(),
        3160usize,
        concat!(
            "Size of: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctprm__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_bipl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(acc_bipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_chg_time) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(acc_chg_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_diff) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(jerk_acc_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_diff_lin) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(jerk_acc_diff_lin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jerk_acc_ratio) as usize - ptr as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(jerk_acc_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_acc) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(max_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_con_aipl) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(t_con_aipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner_feed_diff) as usize - ptr as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(corner_feed_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cut_fdrate) as usize - ptr as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(max_cut_fdrate)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbctprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctprm__bindgen_ty_1>(),
        3160usize,
        concat!("Size of: ", stringify!(iodbctprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctprm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbctprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_160) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1),
            "::",
            stringify!(data_160)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_30i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_1),
            "::",
            stringify!(data_30i)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbctprm__bindgen_ty_2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub u: iodbctprm__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbctprm__bindgen_ty_2__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALPRM,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_iodbctprm__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctprm__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctprm__bindgen_ty_2__bindgen_ty_1>(),
        512usize,
        concat!(
            "Size of: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctprm__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbctprm__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctprm__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctprm__bindgen_ty_2>(),
        520usize,
        concat!("Size of: ", stringify!(iodbctprm__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctprm__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbctprm__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm__bindgen_ty_2),
            "::",
            stringify!(u)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbctprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbctprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbctprm>(),
        4200usize,
        concat!("Size of: ", stringify!(iodbctprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbctprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbctprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbctprm),
            "::",
            stringify!(prm)
        )
    );
}
pub type IODBCTPRM = iodbctprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODBTLGS {
    pub data1: ::std::os::raw::c_long,
    pub data2: ::std::os::raw::c_long,
    pub tooltype: ::std::os::raw::c_char,
    pub install: ::std::os::raw::c_char,
    pub toolname: [::std::os::raw::c_char; 9usize],
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_IODBTLGS() {
    const UNINIT: ::std::mem::MaybeUninit<IODBTLGS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IODBTLGS>(),
        32usize,
        concat!("Size of: ", stringify!(IODBTLGS))
    );
    assert_eq!(
        ::std::mem::align_of::<IODBTLGS>(),
        8usize,
        concat!("Alignment of ", stringify!(IODBTLGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBTLGS),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBTLGS),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tooltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBTLGS),
            "::",
            stringify!(tooltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).install) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBTLGS),
            "::",
            stringify!(install)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toolname) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBTLGS),
            "::",
            stringify!(toolname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBTLGS),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlgsext {
    pub data1: ::std::os::raw::c_long,
    pub data2: ::std::os::raw::c_long,
    pub data3: ::std::os::raw::c_long,
    pub data4: ::std::os::raw::c_long,
    pub tooltype: ::std::os::raw::c_char,
    pub install: ::std::os::raw::c_char,
    pub holder: ::std::os::raw::c_char,
    pub toolname: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_iodbtlgsext() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlgsext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlgsext>(),
        48usize,
        concat!("Size of: ", stringify!(iodbtlgsext))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlgsext>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlgsext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(data4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tooltype) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(tooltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).install) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(install)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).holder) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(holder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toolname) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext),
            "::",
            stringify!(toolname)
        )
    );
}
pub type IODBTLGSEXT = iodbtlgsext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlgsext2 {
    pub data1: ::std::os::raw::c_long,
    pub data2: ::std::os::raw::c_long,
    pub data3: ::std::os::raw::c_long,
    pub data4: ::std::os::raw::c_long,
    pub data5: ::std::os::raw::c_long,
    pub data6: ::std::os::raw::c_long,
    pub data7: ::std::os::raw::c_long,
    pub data8: ::std::os::raw::c_long,
    pub data9: ::std::os::raw::c_long,
    pub data10: ::std::os::raw::c_long,
    pub tooltype: ::std::os::raw::c_char,
    pub install: ::std::os::raw::c_char,
    pub holder: ::std::os::raw::c_char,
    pub toolname: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_iodbtlgsext2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlgsext2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlgsext2>(),
        96usize,
        concat!("Size of: ", stringify!(iodbtlgsext2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlgsext2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlgsext2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data5) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data6) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data7) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data8) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data9) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data10) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(data10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tooltype) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(tooltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).install) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(install)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).holder) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(holder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toolname) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgsext2),
            "::",
            stringify!(toolname)
        )
    );
}
pub type IODBTLGSEXT2 = iodbtlgsext2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlife1 {
    pub dummy: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtlife1() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlife1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlife1>(),
        16usize,
        concat!("Size of: ", stringify!(odbtlife1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlife1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlife1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife1),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTLIFE1 = odbtlife1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlife2 {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtlife2() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlife2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlife2>(),
        16usize,
        concat!("Size of: ", stringify!(odbtlife2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlife2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlife2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife2),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTLIFE2 = odbtlife2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlife3 {
    pub datano: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtlife3() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlife3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlife3>(),
        16usize,
        concat!("Size of: ", stringify!(odbtlife3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlife3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlife3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife3),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife3),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife3),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTLIFE3 = odbtlife3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlife4 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtlife4() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlife4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlife4>(),
        16usize,
        concat!("Size of: ", stringify!(odbtlife4))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlife4>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlife4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife4),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife4),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife4),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTLIFE4 = odbtlife4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlife5 {
    pub dummy: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_long,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtlife5() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlife5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlife5>(),
        24usize,
        concat!("Size of: ", stringify!(odbtlife5))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlife5>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlife5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife5),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife5),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlife5),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTLIFE5 = odbtlife5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtr {
    pub datano_s: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [iodbtr__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtr__bindgen_ty_1 {
    pub ntool: ::std::os::raw::c_long,
    pub life: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtr__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtr__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(iodbtr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ntool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr__bindgen_ty_1),
            "::",
            stringify!(ntool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr__bindgen_ty_1),
            "::",
            stringify!(life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtr>(),
        128usize,
        concat!("Size of: ", stringify!(iodbtr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtr),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBTR = iodbtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtg {
    pub grp_num: ::std::os::raw::c_short,
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub ntool: ::std::os::raw::c_long,
    pub life: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
    pub data: [odbtg__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtg__bindgen_ty_1 {
    pub tuse_num: ::std::os::raw::c_long,
    pub tool_num: ::std::os::raw::c_long,
    pub length_num: ::std::os::raw::c_long,
    pub radius_num: ::std::os::raw::c_long,
    pub tinfo: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbtg__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtg__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(odbtg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tuse_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg__bindgen_ty_1),
            "::",
            stringify!(tuse_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg__bindgen_ty_1),
            "::",
            stringify!(tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg__bindgen_ty_1),
            "::",
            stringify!(length_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg__bindgen_ty_1),
            "::",
            stringify!(radius_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tinfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg__bindgen_ty_1),
            "::",
            stringify!(tinfo)
        )
    );
}
#[test]
fn bindgen_test_layout_odbtg() {
    const UNINIT: ::std::mem::MaybeUninit<odbtg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtg>(),
        232usize,
        concat!("Size of: ", stringify!(odbtg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg),
            "::",
            stringify!(grp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ntool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg),
            "::",
            stringify!(ntool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg),
            "::",
            stringify!(life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtg),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTG = odbtg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbwrc {
    pub datano_s: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [idbwrc__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbwrc__bindgen_ty_1 {
    pub dummy: [::std::os::raw::c_long; 2usize],
    pub count: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_idbwrc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<idbwrc__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbwrc__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(idbwrc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<idbwrc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(idbwrc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrc__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrc__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
}
#[test]
fn bindgen_test_layout_idbwrc() {
    const UNINIT: ::std::mem::MaybeUninit<idbwrc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbwrc>(),
        128usize,
        concat!("Size of: ", stringify!(idbwrc))
    );
    assert_eq!(
        ::std::mem::align_of::<idbwrc>(),
        8usize,
        concat!("Alignment of ", stringify!(idbwrc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrc),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrc),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrc),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbwrc),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBWRC = idbwrc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbusegr {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub next: ::std::os::raw::c_long,
    pub use_: ::std::os::raw::c_long,
    pub slct: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbusegr() {
    const UNINIT: ::std::mem::MaybeUninit<odbusegr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbusegr>(),
        32usize,
        concat!("Size of: ", stringify!(odbusegr))
    );
    assert_eq!(
        ::std::mem::align_of::<odbusegr>(),
        8usize,
        concat!("Alignment of ", stringify!(odbusegr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegr),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegr),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegr),
            "::",
            stringify!(slct)
        )
    );
}
pub type ODBUSEGR = odbusegr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblfno {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odblfno() {
    const UNINIT: ::std::mem::MaybeUninit<odblfno> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblfno>(),
        6usize,
        concat!("Size of: ", stringify!(odblfno))
    );
    assert_eq!(
        ::std::mem::align_of::<odblfno>(),
        2usize,
        concat!("Alignment of ", stringify!(odblfno))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblfno),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odblfno),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblfno),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBLFNO = odblfno;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtluse {
    pub s_grp: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub e_grp: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_odbtluse() {
    const UNINIT: ::std::mem::MaybeUninit<odbtluse> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtluse>(),
        48usize,
        concat!("Size of: ", stringify!(odbtluse))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtluse>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtluse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtluse),
            "::",
            stringify!(s_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtluse),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_grp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtluse),
            "::",
            stringify!(e_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtluse),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBTLUSE = odbtluse;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtd {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub tool_num: ::std::os::raw::c_long,
    pub h_code: ::std::os::raw::c_long,
    pub d_code: ::std::os::raw::c_long,
    pub tool_inf: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtd() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtd>(),
        40usize,
        concat!("Size of: ", stringify!(iodbtd))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtd>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd),
            "::",
            stringify!(tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_code) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd),
            "::",
            stringify!(h_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_code) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd),
            "::",
            stringify!(d_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_inf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd),
            "::",
            stringify!(tool_inf)
        )
    );
}
pub type IODBTD = iodbtd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtd2 {
    pub datano: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_long,
    pub tool_num: ::std::os::raw::c_long,
    pub h_code: ::std::os::raw::c_long,
    pub d_code: ::std::os::raw::c_long,
    pub tool_inf: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtd2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtd2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtd2>(),
        48usize,
        concat!("Size of: ", stringify!(iodbtd2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtd2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtd2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_code) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(h_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_code) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(d_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_inf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtd2),
            "::",
            stringify!(tool_inf)
        )
    );
}
pub type IODBTD2 = iodbtd2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtgi {
    pub s_grp: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub e_grp: ::std::os::raw::c_short,
    pub data: [iodbtgi__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtgi__bindgen_ty_1 {
    pub n_tool: ::std::os::raw::c_long,
    pub count_value: ::std::os::raw::c_long,
    pub counter: ::std::os::raw::c_long,
    pub count_type: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtgi__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtgi__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtgi__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(iodbtgi__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtgi__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtgi__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_tool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi__bindgen_ty_1),
            "::",
            stringify!(n_tool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi__bindgen_ty_1),
            "::",
            stringify!(count_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi__bindgen_ty_1),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi__bindgen_ty_1),
            "::",
            stringify!(count_type)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtgi() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtgi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtgi>(),
        168usize,
        concat!("Size of: ", stringify!(iodbtgi))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtgi>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtgi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi),
            "::",
            stringify!(s_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_grp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi),
            "::",
            stringify!(e_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBTGI = iodbtgi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtgi2 {
    pub s_grp: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub e_grp: ::std::os::raw::c_short,
    pub opt_grpno: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_iodbtgi2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtgi2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtgi2>(),
        48usize,
        concat!("Size of: ", stringify!(iodbtgi2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtgi2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtgi2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi2),
            "::",
            stringify!(s_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_grp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi2),
            "::",
            stringify!(e_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_grpno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi2),
            "::",
            stringify!(opt_grpno)
        )
    );
}
pub type IODBTGI2 = iodbtgi2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtgi3 {
    pub s_grp: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub e_grp: ::std::os::raw::c_short,
    pub life_rest: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_iodbtgi3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtgi3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtgi3>(),
        48usize,
        concat!("Size of: ", stringify!(iodbtgi3))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtgi3>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtgi3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi3),
            "::",
            stringify!(s_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi3),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_grp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi3),
            "::",
            stringify!(e_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_rest) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi3),
            "::",
            stringify!(life_rest)
        )
    );
}
pub type IODBTGI3 = iodbtgi3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtgi4 {
    pub grp_no: ::std::os::raw::c_short,
    pub n_tool: ::std::os::raw::c_long,
    pub count_value: ::std::os::raw::c_long,
    pub counter: ::std::os::raw::c_long,
    pub count_type: ::std::os::raw::c_long,
    pub opt_grpno: ::std::os::raw::c_long,
    pub life_rest: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtgi4() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtgi4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtgi4>(),
        56usize,
        concat!("Size of: ", stringify!(iodbtgi4))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtgi4>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtgi4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(grp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_tool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(n_tool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(count_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(count_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_grpno) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(opt_grpno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_rest) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtgi4),
            "::",
            stringify!(life_rest)
        )
    );
}
pub type IODBTGI4 = iodbtgi4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbitd {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_idbitd() {
    const UNINIT: ::std::mem::MaybeUninit<idbitd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbitd>(),
        16usize,
        concat!("Size of: ", stringify!(idbitd))
    );
    assert_eq!(
        ::std::mem::align_of::<idbitd>(),
        8usize,
        concat!("Alignment of ", stringify!(idbitd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbitd),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbitd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbitd),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBITD = idbitd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbitd2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_long,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_idbitd2() {
    const UNINIT: ::std::mem::MaybeUninit<idbitd2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbitd2>(),
        24usize,
        concat!("Size of: ", stringify!(idbitd2))
    );
    assert_eq!(
        ::std::mem::align_of::<idbitd2>(),
        8usize,
        concat!("Alignment of ", stringify!(idbitd2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbitd2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbitd2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(idbitd2),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBITD2 = idbitd2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtlinfo {
    pub max_group: ::std::os::raw::c_long,
    pub max_tool: ::std::os::raw::c_long,
    pub max_minute: ::std::os::raw::c_long,
    pub max_cycle: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbtlinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlinfo>(),
        32usize,
        concat!("Size of: ", stringify!(odbtlinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_group) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinfo),
            "::",
            stringify!(max_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinfo),
            "::",
            stringify!(max_tool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_minute) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinfo),
            "::",
            stringify!(max_minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cycle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlinfo),
            "::",
            stringify!(max_cycle)
        )
    );
}
pub type ODBTLINFO = odbtlinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbusegrp {
    pub next: ::std::os::raw::c_long,
    pub use_: ::std::os::raw::c_long,
    pub slct: ::std::os::raw::c_long,
    pub opt_next: ::std::os::raw::c_long,
    pub opt_use: ::std::os::raw::c_long,
    pub opt_slct: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbusegrp() {
    const UNINIT: ::std::mem::MaybeUninit<odbusegrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbusegrp>(),
        48usize,
        concat!("Size of: ", stringify!(odbusegrp))
    );
    assert_eq!(
        ::std::mem::align_of::<odbusegrp>(),
        8usize,
        concat!("Alignment of ", stringify!(odbusegrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegrp),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegrp),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegrp),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegrp),
            "::",
            stringify!(opt_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_use) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegrp),
            "::",
            stringify!(opt_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_slct) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusegrp),
            "::",
            stringify!(opt_slct)
        )
    );
}
pub type ODBUSEGRP = odbusegrp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlgrp {
    pub ntool: ::std::os::raw::c_long,
    pub nfree: ::std::os::raw::c_long,
    pub life: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
    pub use_tool: ::std::os::raw::c_long,
    pub opt_grpno: ::std::os::raw::c_long,
    pub life_rest: ::std::os::raw::c_long,
    pub rest_sig: ::std::os::raw::c_short,
    pub count_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtlgrp() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlgrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlgrp>(),
        64usize,
        concat!("Size of: ", stringify!(iodbtlgrp))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlgrp>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlgrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ntool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(ntool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nfree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(nfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_tool) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(use_tool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_grpno) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(opt_grpno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_rest) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(life_rest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_sig) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(rest_sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_type) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlgrp),
            "::",
            stringify!(count_type)
        )
    );
}
pub type IODBTLGRP = iodbtlgrp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtltool {
    pub tool_num: ::std::os::raw::c_long,
    pub h_code: ::std::os::raw::c_long,
    pub d_code: ::std::os::raw::c_long,
    pub tool_inf: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtltool() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtltool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtltool>(),
        32usize,
        concat!("Size of: ", stringify!(iodbtltool))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtltool>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtltool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtltool),
            "::",
            stringify!(tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtltool),
            "::",
            stringify!(h_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_code) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtltool),
            "::",
            stringify!(d_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_inf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtltool),
            "::",
            stringify!(tool_inf)
        )
    );
}
pub type IODBTLTOOL = iodbtltool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exgrp {
    pub grp_no: ::std::os::raw::c_long,
    pub opt_grpno: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_exgrp() {
    const UNINIT: ::std::mem::MaybeUninit<exgrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exgrp>(),
        16usize,
        concat!("Size of: ", stringify!(exgrp))
    );
    assert_eq!(
        ::std::mem::align_of::<exgrp>(),
        8usize,
        concat!("Alignment of ", stringify!(exgrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exgrp),
            "::",
            stringify!(grp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_grpno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exgrp),
            "::",
            stringify!(opt_grpno)
        )
    );
}
pub type ODBEXGP = exgrp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmng {
    pub T_code: ::std::os::raw::c_long,
    pub life_count: ::std::os::raw::c_long,
    pub max_life: ::std::os::raw::c_long,
    pub rest_life: ::std::os::raw::c_long,
    pub life_stat: ::std::os::raw::c_uchar,
    pub cust_bits: ::std::os::raw::c_uchar,
    pub tool_info: ::std::os::raw::c_ushort,
    pub H_code: ::std::os::raw::c_short,
    pub D_code: ::std::os::raw::c_short,
    pub spindle_speed: ::std::os::raw::c_long,
    pub feedrate: ::std::os::raw::c_long,
    pub magazine: ::std::os::raw::c_short,
    pub pot: ::std::os::raw::c_short,
    pub G_code: ::std::os::raw::c_short,
    pub W_code: ::std::os::raw::c_short,
    pub gno: ::std::os::raw::c_short,
    pub grp: ::std::os::raw::c_short,
    pub edge: ::std::os::raw::c_short,
    pub org_magazine: ::std::os::raw::c_short,
    pub org_pot: ::std::os::raw::c_short,
    pub edge_num: ::std::os::raw::c_uchar,
    pub reserve_c: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_long; 2usize],
    pub custom1: ::std::os::raw::c_long,
    pub custom2: ::std::os::raw::c_long,
    pub custom3: ::std::os::raw::c_long,
    pub custom4: ::std::os::raw::c_long,
    pub custom5: ::std::os::raw::c_long,
    pub custom6: ::std::os::raw::c_long,
    pub custom7: ::std::os::raw::c_long,
    pub custom8: ::std::os::raw::c_long,
    pub custom9: ::std::os::raw::c_long,
    pub custom10: ::std::os::raw::c_long,
    pub custom11: ::std::os::raw::c_long,
    pub custom12: ::std::os::raw::c_long,
    pub custom13: ::std::os::raw::c_long,
    pub custom14: ::std::os::raw::c_long,
    pub custom15: ::std::os::raw::c_long,
    pub custom16: ::std::os::raw::c_long,
    pub custom17: ::std::os::raw::c_long,
    pub custom18: ::std::os::raw::c_long,
    pub custom19: ::std::os::raw::c_long,
    pub custom20: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtlmng() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmng> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmng>(),
        256usize,
        concat!("Size of: ", stringify!(iodbtlmng))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmng>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlmng))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(T_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(life_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_life) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(max_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_life) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(rest_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_stat) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(life_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cust_bits) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(cust_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_info) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(tool_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).H_code) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(H_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).D_code) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(D_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spindle_speed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(spindle_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feedrate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(feedrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magazine) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(magazine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(pot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).G_code) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(G_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).W_code) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(W_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gno) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(gno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(edge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_magazine) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(org_magazine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_pot) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(org_pot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_num) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(edge_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve_c) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(reserve_c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom3) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom4) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom5) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom7) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom8) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom9) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom10) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom11) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom12) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom13) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom14) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom15) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom16) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom17) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom18) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom19) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom20) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng),
            "::",
            stringify!(custom20)
        )
    );
}
pub type IODBTLMNG = iodbtlmng;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmng_f2 {
    pub T_code: ::std::os::raw::c_long,
    pub life_count: ::std::os::raw::c_long,
    pub max_life: ::std::os::raw::c_long,
    pub rest_life: ::std::os::raw::c_long,
    pub life_stat: ::std::os::raw::c_uchar,
    pub cust_bits: ::std::os::raw::c_uchar,
    pub tool_info: ::std::os::raw::c_ushort,
    pub H_code: ::std::os::raw::c_short,
    pub D_code: ::std::os::raw::c_short,
    pub spindle_speed: ::std::os::raw::c_long,
    pub feedrate: ::std::os::raw::c_long,
    pub magazine: ::std::os::raw::c_short,
    pub pot: ::std::os::raw::c_short,
    pub G_code: ::std::os::raw::c_short,
    pub W_code: ::std::os::raw::c_short,
    pub gno: ::std::os::raw::c_short,
    pub grp: ::std::os::raw::c_short,
    pub edge: ::std::os::raw::c_short,
    pub org_magazine: ::std::os::raw::c_short,
    pub org_pot: ::std::os::raw::c_short,
    pub edge_num: ::std::os::raw::c_uchar,
    pub reserve_c: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_long; 2usize],
    pub custom1: ::std::os::raw::c_long,
    pub custom2: ::std::os::raw::c_long,
    pub custom3: ::std::os::raw::c_long,
    pub custom4: ::std::os::raw::c_long,
    pub custom5: ::std::os::raw::c_long,
    pub custom6: ::std::os::raw::c_long,
    pub custom7: ::std::os::raw::c_long,
    pub custom8: ::std::os::raw::c_long,
    pub custom9: ::std::os::raw::c_long,
    pub custom10: ::std::os::raw::c_long,
    pub custom11: ::std::os::raw::c_long,
    pub custom12: ::std::os::raw::c_long,
    pub custom13: ::std::os::raw::c_long,
    pub custom14: ::std::os::raw::c_long,
    pub custom15: ::std::os::raw::c_long,
    pub custom16: ::std::os::raw::c_long,
    pub custom17: ::std::os::raw::c_long,
    pub custom18: ::std::os::raw::c_long,
    pub custom19: ::std::os::raw::c_long,
    pub custom20: ::std::os::raw::c_long,
    pub custom21: ::std::os::raw::c_long,
    pub custom22: ::std::os::raw::c_long,
    pub custom23: ::std::os::raw::c_long,
    pub custom24: ::std::os::raw::c_long,
    pub custom25: ::std::os::raw::c_long,
    pub custom26: ::std::os::raw::c_long,
    pub custom27: ::std::os::raw::c_long,
    pub custom28: ::std::os::raw::c_long,
    pub custom29: ::std::os::raw::c_long,
    pub custom30: ::std::os::raw::c_long,
    pub custom31: ::std::os::raw::c_long,
    pub custom32: ::std::os::raw::c_long,
    pub custom33: ::std::os::raw::c_long,
    pub custom34: ::std::os::raw::c_long,
    pub custom35: ::std::os::raw::c_long,
    pub custom36: ::std::os::raw::c_long,
    pub custom37: ::std::os::raw::c_long,
    pub custom38: ::std::os::raw::c_long,
    pub custom39: ::std::os::raw::c_long,
    pub custom40: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtlmng_f2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmng_f2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmng_f2>(),
        416usize,
        concat!("Size of: ", stringify!(iodbtlmng_f2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmng_f2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlmng_f2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(T_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(life_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_life) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(max_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_life) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(rest_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_stat) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(life_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cust_bits) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(cust_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_info) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(tool_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).H_code) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(H_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).D_code) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(D_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spindle_speed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(spindle_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feedrate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(feedrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magazine) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(magazine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(pot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).G_code) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(G_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).W_code) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(W_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gno) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(gno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(edge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_magazine) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(org_magazine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_pot) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(org_pot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_num) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(edge_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve_c) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(reserve_c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom3) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom4) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom5) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom7) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom8) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom9) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom10) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom11) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom12) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom13) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom14) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom15) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom16) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom17) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom18) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom19) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom20) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom21) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom22) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom23) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom24) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom25) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom26) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom27) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom28) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom29) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom30) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom31) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom31)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom32) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom33) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom33)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom34) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom35) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom35)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom36) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom36)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom37) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom37)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom38) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom38)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom39) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom39)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom40) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_f2),
            "::",
            stringify!(custom40)
        )
    );
}
pub type IODBTLMNG_F2 = iodbtlmng_f2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idbtlm {
    pub data_id: ::std::os::raw::c_short,
    pub item: idbtlm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union idbtlm__bindgen_ty_1 {
    pub data1: ::std::os::raw::c_uchar,
    pub data2: ::std::os::raw::c_short,
    pub data4: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_idbtlm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<idbtlm__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtlm__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(idbtlm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtlm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtlm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm__bindgen_ty_1),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm__bindgen_ty_1),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm__bindgen_ty_1),
            "::",
            stringify!(data4)
        )
    );
}
#[test]
fn bindgen_test_layout_idbtlm() {
    const UNINIT: ::std::mem::MaybeUninit<idbtlm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtlm>(),
        16usize,
        concat!("Size of: ", stringify!(idbtlm))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtlm>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtlm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm),
            "::",
            stringify!(data_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm),
            "::",
            stringify!(item)
        )
    );
}
pub type IDBTLM = idbtlm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbtlm2 {
    pub number: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub item: iodbtlm2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbtlm2__bindgen_ty_1 {
    pub data1: ::std::os::raw::c_uchar,
    pub data2: ::std::os::raw::c_short,
    pub data4: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtlm2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlm2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlm2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(iodbtlm2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlm2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlm2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlm2__bindgen_ty_1),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlm2__bindgen_ty_1),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlm2__bindgen_ty_1),
            "::",
            stringify!(data4)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtlm2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlm2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlm2>(),
        16usize,
        concat!("Size of: ", stringify!(iodbtlm2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlm2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlm2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlm2),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlm2),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlm2),
            "::",
            stringify!(item)
        )
    );
}
pub type IODBTLM2 = iodbtlm2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmag {
    pub magazine: ::std::os::raw::c_short,
    pub pot: ::std::os::raw::c_short,
    pub tool_index: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtlmag() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmag>(),
        6usize,
        concat!("Size of: ", stringify!(iodbtlmag))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmag>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlmag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magazine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag),
            "::",
            stringify!(magazine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag),
            "::",
            stringify!(pot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag),
            "::",
            stringify!(tool_index)
        )
    );
}
pub type IODBTLMAG = iodbtlmag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmag2 {
    pub magazine: ::std::os::raw::c_short,
    pub pot: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtlmag2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmag2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmag2>(),
        4usize,
        concat!("Size of: ", stringify!(iodbtlmag2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmag2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlmag2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magazine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag2),
            "::",
            stringify!(magazine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag2),
            "::",
            stringify!(pot)
        )
    );
}
pub type IODBTLMAG2 = iodbtlmag2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlname {
    pub sp_name: iodbtlname__bindgen_ty_1,
    pub wt_name: iodbtlname__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlname__bindgen_ty_1 {
    pub sp_pos1: [::std::os::raw::c_char; 5usize],
    pub sp_pos2: [::std::os::raw::c_char; 5usize],
    pub sp_pos3: [::std::os::raw::c_char; 5usize],
    pub sp_pos4: [::std::os::raw::c_char; 5usize],
}
#[test]
fn bindgen_test_layout_iodbtlname__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlname__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlname__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(iodbtlname__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlname__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbtlname__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_pos1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_1),
            "::",
            stringify!(sp_pos1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_pos2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_1),
            "::",
            stringify!(sp_pos2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_pos3) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_1),
            "::",
            stringify!(sp_pos3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_pos4) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_1),
            "::",
            stringify!(sp_pos4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlname__bindgen_ty_2 {
    pub wt_pos1: [::std::os::raw::c_char; 5usize],
    pub wt_pos2: [::std::os::raw::c_char; 5usize],
    pub wt_pos3: [::std::os::raw::c_char; 5usize],
    pub wt_pos4: [::std::os::raw::c_char; 5usize],
}
#[test]
fn bindgen_test_layout_iodbtlname__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlname__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlname__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(iodbtlname__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlname__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbtlname__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wt_pos1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_2),
            "::",
            stringify!(wt_pos1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wt_pos2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_2),
            "::",
            stringify!(wt_pos2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wt_pos3) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_2),
            "::",
            stringify!(wt_pos3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wt_pos4) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname__bindgen_ty_2),
            "::",
            stringify!(wt_pos4)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtlname() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlname> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlname>(),
        40usize,
        concat!("Size of: ", stringify!(iodbtlname))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlname>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbtlname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname),
            "::",
            stringify!(sp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wt_name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlname),
            "::",
            stringify!(wt_name)
        )
    );
}
pub type IODBTLSPWTNAME = iodbtlname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlmngtlgeom {
    pub l_pot_num: ::std::os::raw::c_uchar,
    pub r_pot_num: ::std::os::raw::c_uchar,
    pub u_pot_num: ::std::os::raw::c_uchar,
    pub d_pot_num: ::std::os::raw::c_uchar,
    pub tl_geom_num: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_tlmngtlgeom() {
    const UNINIT: ::std::mem::MaybeUninit<tlmngtlgeom> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tlmngtlgeom>(),
        5usize,
        concat!("Size of: ", stringify!(tlmngtlgeom))
    );
    assert_eq!(
        ::std::mem::align_of::<tlmngtlgeom>(),
        1usize,
        concat!("Alignment of ", stringify!(tlmngtlgeom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pot_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmngtlgeom),
            "::",
            stringify!(l_pot_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_pot_num) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmngtlgeom),
            "::",
            stringify!(r_pot_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_pot_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmngtlgeom),
            "::",
            stringify!(u_pot_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_pot_num) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmngtlgeom),
            "::",
            stringify!(d_pot_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_geom_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tlmngtlgeom),
            "::",
            stringify!(tl_geom_num)
        )
    );
}
pub type IODBTLGEOM = tlmngtlgeom;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlintf {
    pub inf_tool: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_iodbtlintf() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlintf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlintf>(),
        4usize,
        concat!("Size of: ", stringify!(iodbtlintf))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlintf>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlintf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inf_tool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlintf),
            "::",
            stringify!(inf_tool)
        )
    );
}
pub type IODBTLINTF = iodbtlintf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtllf {
    pub T_code_sum: ::std::os::raw::c_long,
    pub life_count_sum: ::std::os::raw::c_long,
    pub rem_life_sum: ::std::os::raw::c_long,
    pub max_life_sum: ::std::os::raw::c_long,
    pub notice_life_sum: ::std::os::raw::c_long,
    pub tools_sum: ::std::os::raw::c_short,
    pub notice_stat_sum: ::std::os::raw::c_char,
    pub count_type_sum: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbtllf() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtllf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtllf>(),
        48usize,
        concat!("Size of: ", stringify!(iodbtllf))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtllf>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtllf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T_code_sum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(T_code_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_count_sum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(life_count_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem_life_sum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(rem_life_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_life_sum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(max_life_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notice_life_sum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(notice_life_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tools_sum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(tools_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notice_stat_sum) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(notice_stat_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_type_sum) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllf),
            "::",
            stringify!(count_type_sum)
        )
    );
}
pub type IODBTLLF = iodbtllf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtl_retype {
    pub type_: ::std::os::raw::c_uchar,
    pub data_type: ::std::os::raw::c_uchar,
    pub renew: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbtl_retype() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtl_retype> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtl_retype>(),
        4usize,
        concat!("Size of: ", stringify!(iodbtl_retype))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtl_retype>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbtl_retype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtl_retype),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtl_retype),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renew) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtl_retype),
            "::",
            stringify!(renew)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtl_retype),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBTL_RDTYPE = iodbtl_retype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtllfd {
    pub order: ::std::os::raw::c_short,
    pub tool_num: ::std::os::raw::c_short,
    pub life_count: ::std::os::raw::c_long,
    pub rem_life: ::std::os::raw::c_long,
    pub max_life: ::std::os::raw::c_long,
    pub notice_life: ::std::os::raw::c_long,
    pub life_stat: ::std::os::raw::c_char,
    pub count_type: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtllfd() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtllfd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtllfd>(),
        48usize,
        concat!("Size of: ", stringify!(iodbtllfd))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtllfd>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtllfd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(life_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem_life) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(rem_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_life) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(max_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notice_life) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(notice_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_stat) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(life_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_type) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(count_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtllfd),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBTLLFD = iodbtllfd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmgr_check {
    pub T_code: ::std::os::raw::c_long,
    pub tool_num: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtlmgr_check() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmgr_check> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmgr_check>(),
        16usize,
        concat!("Size of: ", stringify!(iodbtlmgr_check))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmgr_check>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlmgr_check))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_check),
            "::",
            stringify!(T_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_check),
            "::",
            stringify!(tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_check),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBTLMGR_CHECK = iodbtlmgr_check;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtool_date {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtool_date() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtool_date> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtool_date>(),
        12usize,
        concat!("Size of: ", stringify!(iodbtool_date))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtool_date>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtool_date))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_date),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_date),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_date),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_date),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_date),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_date),
            "::",
            stringify!(sec)
        )
    );
}
pub type IODBTOOL_DATE = iodbtool_date;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtool_inhis {
    pub tool_no: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub date: IODBTOOL_DATE,
    pub tool_f2: IODBTLMNG_F2,
}
#[test]
fn bindgen_test_layout_iodbtool_inhis() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtool_inhis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtool_inhis>(),
        432usize,
        concat!("Size of: ", stringify!(iodbtool_inhis))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtool_inhis>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtool_inhis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_inhis),
            "::",
            stringify!(tool_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_inhis),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_inhis),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_f2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_inhis),
            "::",
            stringify!(tool_f2)
        )
    );
}
pub type IODBTOOL_INHIS = iodbtool_inhis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtool_outhis {
    pub tool_no: ::std::os::raw::c_short,
    pub cause: ::std::os::raw::c_short,
    pub date: IODBTOOL_DATE,
    pub tool_f2: IODBTLMNG_F2,
}
#[test]
fn bindgen_test_layout_iodbtool_outhis() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtool_outhis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtool_outhis>(),
        432usize,
        concat!("Size of: ", stringify!(iodbtool_outhis))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtool_outhis>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtool_outhis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_outhis),
            "::",
            stringify!(tool_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_outhis),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_outhis),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_f2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_outhis),
            "::",
            stringify!(tool_f2)
        )
    );
}
pub type IODBTOOL_OUTHIS = iodbtool_outhis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtool_causenme {
    pub cause1: [::std::os::raw::c_char; 8usize],
    pub cause2: [::std::os::raw::c_char; 8usize],
    pub cause3: [::std::os::raw::c_char; 8usize],
    pub cause4: [::std::os::raw::c_char; 8usize],
    pub cause5: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_iodbtool_causenme() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtool_causenme> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtool_causenme>(),
        40usize,
        concat!("Size of: ", stringify!(iodbtool_causenme))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtool_causenme>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbtool_causenme))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_causenme),
            "::",
            stringify!(cause1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_causenme),
            "::",
            stringify!(cause2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_causenme),
            "::",
            stringify!(cause3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_causenme),
            "::",
            stringify!(cause4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause5) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtool_causenme),
            "::",
            stringify!(cause5)
        )
    );
}
pub type IODBTOOL_CAUSENME = iodbtool_causenme;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmng_sort {
    pub tl_num: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub data: IODBTLMNG_F2,
}
#[test]
fn bindgen_test_layout_iodbtlmng_sort() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmng_sort> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmng_sort>(),
        424usize,
        concat!("Size of: ", stringify!(iodbtlmng_sort))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmng_sort>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlmng_sort))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_sort),
            "::",
            stringify!(tl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_sort),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_sort),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBTLMNG_SORT = iodbtlmng_sort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmagprty {
    pub mag: ::std::os::raw::c_short,
    pub reserve_s: ::std::os::raw::c_short,
    pub mag_info: ::std::os::raw::c_uchar,
    pub reserve: [::std::os::raw::c_char; 3usize],
    pub mt_line: ::std::os::raw::c_short,
    pub mt_row: ::std::os::raw::c_short,
    pub cstm: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_iodbmagprty() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmagprty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmagprty>(),
        48usize,
        concat!("Size of: ", stringify!(iodbmagprty))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmagprty>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmagprty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(mag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve_s) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(reserve_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(mag_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(mt_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_row) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(mt_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cstm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty),
            "::",
            stringify!(cstm)
        )
    );
}
pub type IODBMAGPRTY = iodbmagprty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpotprty {
    pub tool_no: ::std::os::raw::c_short,
    pub pot_type: ::std::os::raw::c_short,
    pub pot_info1: ::std::os::raw::c_uchar,
    pub pot_info2: ::std::os::raw::c_uchar,
    pub reserve: [::std::os::raw::c_char; 2usize],
    pub cstm: [::std::os::raw::c_long; 10usize],
}
#[test]
fn bindgen_test_layout_iodbpotprty() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpotprty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpotprty>(),
        88usize,
        concat!("Size of: ", stringify!(iodbpotprty))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpotprty>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpotprty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpotprty),
            "::",
            stringify!(tool_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpotprty),
            "::",
            stringify!(pot_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot_info1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpotprty),
            "::",
            stringify!(pot_info1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot_info2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpotprty),
            "::",
            stringify!(pot_info2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpotprty),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cstm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpotprty),
            "::",
            stringify!(cstm)
        )
    );
}
pub type IODBPOTPRTY = iodbpotprty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmagprty2 {
    pub mag: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbmagprty2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmagprty2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmagprty2>(),
        4usize,
        concat!("Size of: ", stringify!(iodbmagprty2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmagprty2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbmagprty2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty2),
            "::",
            stringify!(mag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmagprty2),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBMAGPRTY2 = iodbmagprty2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idbtlm_srchdt {
    pub id_info: IDBTLM,
    pub srch_cond: ::std::os::raw::c_short,
    pub add_cond: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idbtlm_srchdt() {
    const UNINIT: ::std::mem::MaybeUninit<idbtlm_srchdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtlm_srchdt>(),
        24usize,
        concat!("Size of: ", stringify!(idbtlm_srchdt))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtlm_srchdt>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtlm_srchdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm_srchdt),
            "::",
            stringify!(id_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srch_cond) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm_srchdt),
            "::",
            stringify!(srch_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_cond) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlm_srchdt),
            "::",
            stringify!(add_cond)
        )
    );
}
pub type IDBTLM_SRCHDT = idbtlm_srchdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmag_srchinfo {
    pub startInfo: IODBTLMAG2,
    pub result: IODBTLMAG,
}
#[test]
fn bindgen_test_layout_iodbtlmag_srchinfo() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmag_srchinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmag_srchinfo>(),
        10usize,
        concat!("Size of: ", stringify!(iodbtlmag_srchinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmag_srchinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlmag_srchinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag_srchinfo),
            "::",
            stringify!(startInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmag_srchinfo),
            "::",
            stringify!(result)
        )
    );
}
pub type IODBTLMAG_SRCHINFO = iodbtlmag_srchinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtl_free_num {
    pub edge_gp: ::std::os::raw::c_short,
    pub ofs_h: ::std::os::raw::c_short,
    pub ofs_d: ::std::os::raw::c_short,
    pub ofs_g: ::std::os::raw::c_short,
    pub ofs_w: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout_odbtl_free_num() {
    const UNINIT: ::std::mem::MaybeUninit<odbtl_free_num> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtl_free_num>(),
        16usize,
        concat!("Size of: ", stringify!(odbtl_free_num))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtl_free_num>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtl_free_num))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_gp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtl_free_num),
            "::",
            stringify!(edge_gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_h) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtl_free_num),
            "::",
            stringify!(ofs_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_d) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtl_free_num),
            "::",
            stringify!(ofs_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_g) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtl_free_num),
            "::",
            stringify!(ofs_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtl_free_num),
            "::",
            stringify!(ofs_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtl_free_num),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBTL_FREE_NUM = odbtl_free_num;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmng_mu_edge_data {
    pub life_count: ::std::os::raw::c_long,
    pub max_life: ::std::os::raw::c_long,
    pub rest_life: ::std::os::raw::c_long,
    pub life_stat: ::std::os::raw::c_uchar,
    pub cust_bits: ::std::os::raw::c_uchar,
    pub reserve_s: ::std::os::raw::c_short,
    pub H_code: ::std::os::raw::c_short,
    pub D_code: ::std::os::raw::c_short,
    pub spindle_speed: ::std::os::raw::c_long,
    pub feedrate: ::std::os::raw::c_long,
    pub G_code: ::std::os::raw::c_short,
    pub W_code: ::std::os::raw::c_short,
    pub custom1: ::std::os::raw::c_long,
    pub custom2: ::std::os::raw::c_long,
    pub custom3: ::std::os::raw::c_long,
    pub custom4: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtlmng_mu_edge_data() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmng_mu_edge_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmng_mu_edge_data>(),
        88usize,
        concat!("Size of: ", stringify!(iodbtlmng_mu_edge_data))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmng_mu_edge_data>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlmng_mu_edge_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(life_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_life) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(max_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_life) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(rest_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life_stat) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(life_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cust_bits) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(cust_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve_s) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(reserve_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).H_code) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(H_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).D_code) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(D_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spindle_speed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(spindle_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feedrate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(feedrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).G_code) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(G_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).W_code) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(W_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(custom1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(custom2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(custom3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom4) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmng_mu_edge_data),
            "::",
            stringify!(custom4)
        )
    );
}
pub type IODBTLMNG_MU_EDGE_DATA = iodbtlmng_mu_edge_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbtlmng_edge_data {
    pub u: odbtlmng_edge_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbtlmng_edge_data__bindgen_ty_1 {
    pub edge: IODBTLMNG_MU_EDGE_DATA,
    pub tllf: IODBTLLF,
    pub tllfd: IODBTLLFD,
}
#[test]
fn bindgen_test_layout_odbtlmng_edge_data__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlmng_edge_data__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlmng_edge_data__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(odbtlmng_edge_data__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlmng_edge_data__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbtlmng_edge_data__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_edge_data__bindgen_ty_1),
            "::",
            stringify!(edge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tllf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_edge_data__bindgen_ty_1),
            "::",
            stringify!(tllf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tllfd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_edge_data__bindgen_ty_1),
            "::",
            stringify!(tllfd)
        )
    );
}
#[test]
fn bindgen_test_layout_odbtlmng_edge_data() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlmng_edge_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlmng_edge_data>(),
        88usize,
        concat!("Size of: ", stringify!(odbtlmng_edge_data))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlmng_edge_data>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlmng_edge_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_edge_data),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBTLMNG_EDGE_DATA = odbtlmng_edge_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbtlmng_mu_edge {
    pub data_no: ::std::os::raw::c_short,
    pub edge_no: ::std::os::raw::c_short,
    pub edge_data: ODBTLMNG_EDGE_DATA,
}
#[test]
fn bindgen_test_layout_odbtlmng_mu_edge() {
    const UNINIT: ::std::mem::MaybeUninit<odbtlmng_mu_edge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtlmng_mu_edge>(),
        96usize,
        concat!("Size of: ", stringify!(odbtlmng_mu_edge))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtlmng_mu_edge>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtlmng_mu_edge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_mu_edge),
            "::",
            stringify!(data_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_mu_edge),
            "::",
            stringify!(edge_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtlmng_mu_edge),
            "::",
            stringify!(edge_data)
        )
    );
}
pub type ODBTLMNG_MU_EDGE = odbtlmng_mu_edge;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmgr_edg {
    pub data_no: ::std::os::raw::c_short,
    pub edge_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtlmgr_edg() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmgr_edg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmgr_edg>(),
        4usize,
        concat!("Size of: ", stringify!(iodbtlmgr_edg))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmgr_edg>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlmgr_edg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_edg),
            "::",
            stringify!(data_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_edg),
            "::",
            stringify!(edge_no)
        )
    );
}
pub type IODBTLMGR_EDG = iodbtlmgr_edg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtlmgr_add_info {
    pub dsp_info: ::std::os::raw::c_long,
    pub data_kind: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idbtlmgr_add_info() {
    const UNINIT: ::std::mem::MaybeUninit<idbtlmgr_add_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtlmgr_add_info>(),
        16usize,
        concat!("Size of: ", stringify!(idbtlmgr_add_info))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtlmgr_add_info>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtlmgr_add_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlmgr_add_info),
            "::",
            stringify!(dsp_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtlmgr_add_info),
            "::",
            stringify!(data_kind)
        )
    );
}
pub type IDBTLMGR_ADD_INFO = idbtlmgr_add_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbtlmgr_page {
    pub info: iodbtlmgr_page__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbtlmgr_page__bindgen_ty_1 {
    pub edg: IODBTLMGR_EDG,
    pub page: iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1 {
    pub s_edg: IODBTLMGR_EDG,
    pub e_edg: IODBTLMGR_EDG,
}
#[test]
fn bindgen_test_layout_iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_edg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(s_edg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_edg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_page__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(e_edg)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtlmgr_page__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmgr_page__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmgr_page__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(iodbtlmgr_page__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmgr_page__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlmgr_page__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_page__bindgen_ty_1),
            "::",
            stringify!(edg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_page__bindgen_ty_1),
            "::",
            stringify!(page)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtlmgr_page() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlmgr_page> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlmgr_page>(),
        8usize,
        concat!("Size of: ", stringify!(iodbtlmgr_page))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlmgr_page>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtlmgr_page))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlmgr_page),
            "::",
            stringify!(info)
        )
    );
}
pub type IODBTLMGR_PAGE = iodbtlmgr_page;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbhis {
    pub s_no: ::std::os::raw::c_ushort,
    pub type_: ::std::os::raw::c_short,
    pub e_no: ::std::os::raw::c_ushort,
    pub data: [odbhis__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbhis__bindgen_ty_1 {
    pub rec_alm: odbhis__bindgen_ty_1__bindgen_ty_1,
    pub rec_mdi: odbhis__bindgen_ty_1__bindgen_ty_2,
    pub rec_sgn: odbhis__bindgen_ty_1__bindgen_ty_3,
    pub rec_date: odbhis__bindgen_ty_1__bindgen_ty_4,
    pub rec_time: odbhis__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhis__bindgen_ty_1__bindgen_ty_1 {
    pub rec_type: ::std::os::raw::c_short,
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbhis__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(odbhis__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhis__bindgen_ty_1__bindgen_ty_2 {
    pub rec_type: ::std::os::raw::c_short,
    pub key_code: ::std::os::raw::c_char,
    pub pw_flag: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_odbhis__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(odbhis__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_code) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_flag) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pw_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhis__bindgen_ty_1__bindgen_ty_3 {
    pub rec_type: ::std::os::raw::c_short,
    pub sig_name: ::std::os::raw::c_char,
    pub sig_old: ::std::os::raw::c_char,
    pub sig_new: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
    pub sig_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbhis__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(odbhis__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_old) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sig_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_new) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sig_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sig_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhis__bindgen_ty_1__bindgen_ty_4 {
    pub rec_type: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_char,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub pw_flag: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odbhis__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(odbhis__bindgen_ty_1__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_flag) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pw_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhis__bindgen_ty_1__bindgen_ty_5 {
    pub rec_type: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub pw_flag: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odbhis__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(odbhis__bindgen_ty_1__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis__bindgen_ty_1__bindgen_ty_5>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_flag) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(pw_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_odbhis__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(odbhis__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbhis__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1),
            "::",
            stringify!(rec_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mdi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1),
            "::",
            stringify!(rec_mdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_sgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1),
            "::",
            stringify!(rec_sgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1),
            "::",
            stringify!(rec_date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis__bindgen_ty_1),
            "::",
            stringify!(rec_time)
        )
    );
}
#[test]
fn bindgen_test_layout_odbhis() {
    const UNINIT: ::std::mem::MaybeUninit<odbhis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhis>(),
        86usize,
        concat!("Size of: ", stringify!(odbhis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbhis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhis),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBHIS = odbhis;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbophis {
    pub rec_len: ::std::os::raw::c_short,
    pub rec_type: ::std::os::raw::c_short,
    pub u: odbophis__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbophis__bindgen_ty_1 {
    pub rec_mdi: odbophis__bindgen_ty_1__bindgen_ty_1,
    pub rec_sgn: odbophis__bindgen_ty_1__bindgen_ty_2,
    pub rec_alm: odbophis__bindgen_ty_1__bindgen_ty_3,
    pub rec_date: odbophis__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis__bindgen_ty_1__bindgen_ty_1 {
    pub key_code: ::std::os::raw::c_char,
    pub pw_flag: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_flag) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pw_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis__bindgen_ty_1__bindgen_ty_2 {
    pub sig_name: ::std::os::raw::c_short,
    pub sig_no: ::std::os::raw::c_short,
    pub sig_old: ::std::os::raw::c_char,
    pub sig_new: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_old) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_new) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis__bindgen_ty_1__bindgen_ty_3 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis__bindgen_ty_1__bindgen_ty_3>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis__bindgen_ty_1__bindgen_ty_4 {
    pub evnt_type: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evnt_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(evnt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_odbophis__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(odbophis__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbophis__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mdi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1),
            "::",
            stringify!(rec_mdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_sgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1),
            "::",
            stringify!(rec_sgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1),
            "::",
            stringify!(rec_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis__bindgen_ty_1),
            "::",
            stringify!(rec_date)
        )
    );
}
#[test]
fn bindgen_test_layout_odbophis() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis>(),
        24usize,
        concat!("Size of: ", stringify!(odbophis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbophis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis),
            "::",
            stringify!(rec_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBOPHIS = odbophis;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbophis3 {
    pub rec_len: ::std::os::raw::c_short,
    pub rec_type: ::std::os::raw::c_short,
    pub u: odbophis3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbophis3__bindgen_ty_1 {
    pub rec_mdi: odbophis3__bindgen_ty_1__bindgen_ty_1,
    pub rec_sgn: odbophis3__bindgen_ty_1__bindgen_ty_2,
    pub rec_alm: odbophis3__bindgen_ty_1__bindgen_ty_3,
    pub rec_date: odbophis3__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis3__bindgen_ty_1__bindgen_ty_1 {
    pub key_code: ::std::os::raw::c_char,
    pub pw_flag: ::std::os::raw::c_char,
    pub pth_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis3__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis3__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis3__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis3__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_flag) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pw_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pth_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis3__bindgen_ty_1__bindgen_ty_2 {
    pub sig_name: ::std::os::raw::c_short,
    pub sig_no: ::std::os::raw::c_short,
    pub sig_old: ::std::os::raw::c_char,
    pub sig_new: ::std::os::raw::c_char,
    pub pmc_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis3__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis3__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis3__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis3__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_old) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_new) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pmc_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis3__bindgen_ty_1__bindgen_ty_3 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis3__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis3__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis3__bindgen_ty_1__bindgen_ty_3>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis3__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(pth_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis3__bindgen_ty_1__bindgen_ty_4 {
    pub evnt_type: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis3__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis3__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis3__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis3__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evnt_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(evnt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_odbophis3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis3__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(odbophis3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbophis3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mdi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1),
            "::",
            stringify!(rec_mdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_sgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1),
            "::",
            stringify!(rec_sgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1),
            "::",
            stringify!(rec_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3__bindgen_ty_1),
            "::",
            stringify!(rec_date)
        )
    );
}
#[test]
fn bindgen_test_layout_odbophis3() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis3>(),
        24usize,
        concat!("Size of: ", stringify!(odbophis3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbophis3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3),
            "::",
            stringify!(rec_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis3),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBOPHIS3 = odbophis3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbophis4 {
    pub rec_len: ::std::os::raw::c_short,
    pub rec_type: ::std::os::raw::c_short,
    pub u: odbophis4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbophis4__bindgen_ty_1 {
    pub rec_mdi: odbophis4__bindgen_ty_1__bindgen_ty_1,
    pub rec_sgn: odbophis4__bindgen_ty_1__bindgen_ty_2,
    pub rec_alm: odbophis4__bindgen_ty_1__bindgen_ty_3,
    pub rec_date: odbophis4__bindgen_ty_1__bindgen_ty_4,
    pub rec_ial: odbophis4__bindgen_ty_1__bindgen_ty_5,
    pub rec_mal: odbophis4__bindgen_ty_1__bindgen_ty_6,
    pub rec_opm: odbophis4__bindgen_ty_1__bindgen_ty_7,
    pub rec_ofs: odbophis4__bindgen_ty_1__bindgen_ty_8,
    pub rec_prm: odbophis4__bindgen_ty_1__bindgen_ty_9,
    pub rec_wof: odbophis4__bindgen_ty_1__bindgen_ty_10,
    pub rec_mac: odbophis4__bindgen_ty_1__bindgen_ty_11,
    pub rec_mac2: odbophis4__bindgen_ty_1__bindgen_ty_12,
    pub rec_scrn: odbophis4__bindgen_ty_1__bindgen_ty_13,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_1 {
    pub key_code: ::std::os::raw::c_char,
    pub pw_flag: ::std::os::raw::c_char,
    pub pth_no: ::std::os::raw::c_short,
    pub ex_flag: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_flag) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pw_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ex_flag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ex_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_2 {
    pub sig_name: ::std::os::raw::c_short,
    pub sig_no: ::std::os::raw::c_short,
    pub sig_old: ::std::os::raw::c_char,
    pub sig_new: ::std::os::raw::c_char,
    pub pmc_no: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_old) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_new) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sig_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pmc_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_3 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_3>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(pth_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_4 {
    pub evnt_type: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evnt_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(evnt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_5 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub sys_alm: ::std::os::raw::c_short,
    pub dsp_flg: ::std::os::raw::c_short,
    pub axis_num: ::std::os::raw::c_short,
    pub dummy1: ::std::os::raw::c_short,
    pub g_modal: [::std::os::raw::c_long; 10usize],
    pub g_dp: [::std::os::raw::c_char; 10usize],
    pub dummy2: ::std::os::raw::c_short,
    pub a_modal: [::std::os::raw::c_long; 10usize],
    pub a_dp: [::std::os::raw::c_char; 10usize],
    pub dummy3: ::std::os::raw::c_short,
    pub abs_pos: [::std::os::raw::c_long; 32usize],
    pub abs_dp: [::std::os::raw::c_char; 32usize],
    pub mcn_pos: [::std::os::raw::c_long; 32usize],
    pub mcn_dp: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_5>(),
        800usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_alm) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(sys_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_flg) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dsp_flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_modal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(g_modal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_dp) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(g_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_modal) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(a_modal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_dp) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(a_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(dummy3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_pos) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(abs_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_dp) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(abs_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn_pos) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(mcn_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn_dp) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(mcn_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_6 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub sys_alm: ::std::os::raw::c_short,
    pub dsp_flg: ::std::os::raw::c_short,
    pub axis_num: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 64usize],
    pub dummy1: ::std::os::raw::c_short,
    pub g_modal: [::std::os::raw::c_long; 10usize],
    pub g_dp: [::std::os::raw::c_char; 10usize],
    pub dummy2: ::std::os::raw::c_short,
    pub a_modal: [::std::os::raw::c_long; 10usize],
    pub a_dp: [::std::os::raw::c_char; 10usize],
    pub dummy3: ::std::os::raw::c_short,
    pub abs_pos: [::std::os::raw::c_long; 32usize],
    pub abs_dp: [::std::os::raw::c_char; 32usize],
    pub mcn_pos: [::std::os::raw::c_long; 32usize],
    pub mcn_dp: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_6>(),
        864usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_alm) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(sys_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_flg) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(dsp_flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(alm_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_modal) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(g_modal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_dp) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(g_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_modal) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(a_modal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_dp) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(a_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(dummy3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_pos) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(abs_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_dp) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(abs_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn_pos) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(mcn_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn_dp) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(mcn_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_7 {
    pub dsp_flg: ::std::os::raw::c_short,
    pub om_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub ope_msg: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_7>(),
        272usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_7>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(dsp_flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(om_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ope_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(ope_msg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_8 {
    pub ofs_grp: ::std::os::raw::c_short,
    pub ofs_no: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub ofs_old: ::std::os::raw::c_long,
    pub ofs_new: ::std::os::raw::c_long,
    pub old_dp: ::std::os::raw::c_short,
    pub new_dp: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_8>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(ofs_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(ofs_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_old) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(ofs_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_new) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(ofs_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_dp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(old_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_dp) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(new_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_9 {
    pub prm_grp: ::std::os::raw::c_short,
    pub prm_num: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub prm_len: ::std::os::raw::c_short,
    pub prm_no: ::std::os::raw::c_long,
    pub prm_old: ::std::os::raw::c_long,
    pub prm_new: ::std::os::raw::c_long,
    pub old_dp: ::std::os::raw::c_short,
    pub new_dp: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_9>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prm_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_len) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prm_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_no) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_old) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prm_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_new) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prm_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_dp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(old_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_dp) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(new_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_10 {
    pub ofs_grp: ::std::os::raw::c_short,
    pub ofs_no: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub ofs_old: ::std::os::raw::c_long,
    pub ofs_new: ::std::os::raw::c_long,
    pub old_dp: ::std::os::raw::c_short,
    pub new_dp: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_10> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_10>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(ofs_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(ofs_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_old) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(ofs_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_new) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(ofs_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_dp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(old_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_dp) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(new_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_11 {
    pub mac_no: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub mac_old: ::std::os::raw::c_long,
    pub mac_new: ::std::os::raw::c_long,
    pub old_dp: ::std::os::raw::c_short,
    pub new_dp: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_11() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_11> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_11>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(mac_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_old) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(mac_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_new) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(mac_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_dp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(old_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_dp) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(new_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_12 {
    pub mac_no: ::std::os::raw::c_long,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub mac_old: ::std::os::raw::c_long,
    pub mac_new: ::std::os::raw::c_long,
    pub old_dp: ::std::os::raw::c_short,
    pub new_dp: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_12() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_12> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_12>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(mac_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_old) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(mac_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_new) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(mac_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_dp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(old_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_dp) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(new_dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbophis4__bindgen_ty_1__bindgen_ty_13 {
    pub scrn_old: ::std::os::raw::c_short,
    pub scrn_new: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1__bindgen_ty_13() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1__bindgen_ty_13> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1__bindgen_ty_13>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1__bindgen_ty_13>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrn_old) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(scrn_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrn_new) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(scrn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(second)
        )
    );
}
#[test]
fn bindgen_test_layout_odbophis4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4__bindgen_ty_1>(),
        864usize,
        concat!("Size of: ", stringify!(odbophis4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbophis4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mdi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_mdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_sgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_sgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_ial) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_ial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_mal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_opm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_opm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_ofs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_prm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_wof) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_wof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mac) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_mac2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_mac2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_scrn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4__bindgen_ty_1),
            "::",
            stringify!(rec_scrn)
        )
    );
}
#[test]
fn bindgen_test_layout_odbophis4() {
    const UNINIT: ::std::mem::MaybeUninit<odbophis4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbophis4>(),
        872usize,
        concat!("Size of: ", stringify!(odbophis4))
    );
    assert_eq!(
        ::std::mem::align_of::<odbophis4>(),
        8usize,
        concat!("Alignment of ", stringify!(odbophis4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4),
            "::",
            stringify!(rec_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4),
            "::",
            stringify!(rec_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbophis4),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBOPHIS4 = odbophis4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis {
    pub s_no: ::std::os::raw::c_ushort,
    pub type_: ::std::os::raw::c_short,
    pub e_no: ::std::os::raw::c_ushort,
    pub alm_his: [odbahis__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis__bindgen_ty_1 {
    pub dummy: ::std::os::raw::c_short,
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_char,
    pub year: ::std::os::raw::c_char,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub dummy2: ::std::os::raw::c_char,
    pub len_msg: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbahis__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(odbahis__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_msg) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(len_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_odbahis() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis>(),
        486usize,
        concat!("Size of: ", stringify!(odbahis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_his) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis),
            "::",
            stringify!(alm_his)
        )
    );
}
pub type ODBAHIS = odbahis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis2 {
    pub s_no: ::std::os::raw::c_ushort,
    pub e_no: ::std::os::raw::c_ushort,
    pub alm_his: [odbahis2__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis2__bindgen_ty_1 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub len_msg: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbahis2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis2__bindgen_ty_1>(),
        52usize,
        concat!("Size of: ", stringify!(odbahis2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_msg) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(len_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_odbahis2() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis2>(),
        524usize,
        concat!("Size of: ", stringify!(odbahis2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_his) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis2),
            "::",
            stringify!(alm_his)
        )
    );
}
pub type ODBAHIS2 = odbahis2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis3 {
    pub s_no: ::std::os::raw::c_ushort,
    pub e_no: ::std::os::raw::c_ushort,
    pub alm_his: [odbahis3__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis3__bindgen_ty_1 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub len_msg: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbahis3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis3__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(odbahis3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_msg) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(len_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_odbahis3() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis3>(),
        564usize,
        concat!("Size of: ", stringify!(odbahis3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_his) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis3),
            "::",
            stringify!(alm_his)
        )
    );
}
pub type ODBAHIS3 = odbahis3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis4 {
    pub s_no: ::std::os::raw::c_ushort,
    pub e_no: ::std::os::raw::c_ushort,
    pub alm_his: [odbahis4__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis4__bindgen_ty_1 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub len_msg: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_odbahis4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis4__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(odbahis4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_msg) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(len_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_odbahis4() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis4>(),
        884usize,
        concat!("Size of: ", stringify!(odbahis4))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis4>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahis4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_his) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis4),
            "::",
            stringify!(alm_his)
        )
    );
}
pub type ODBAHIS4 = odbahis4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis5 {
    pub s_no: ::std::os::raw::c_ushort,
    pub e_no: ::std::os::raw::c_ushort,
    pub alm_his: [odbahis5__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahis5__bindgen_ty_1 {
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub axis_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub len_msg: ::std::os::raw::c_short,
    pub pth_no: ::std::os::raw::c_short,
    pub sys_alm: ::std::os::raw::c_short,
    pub dsp_flg: ::std::os::raw::c_short,
    pub axis_num: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 64usize],
    pub g_modal: [::std::os::raw::c_long; 10usize],
    pub g_dp: [::std::os::raw::c_char; 10usize],
    pub dummy1: ::std::os::raw::c_short,
    pub a_modal: [::std::os::raw::c_long; 10usize],
    pub a_dp: [::std::os::raw::c_char; 10usize],
    pub dummy2: ::std::os::raw::c_short,
    pub abs_pos: [::std::os::raw::c_long; 32usize],
    pub abs_dp: [::std::os::raw::c_char; 32usize],
    pub mcn_pos: [::std::os::raw::c_long; 32usize],
    pub mcn_dp: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbahis5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis5__bindgen_ty_1>(),
        864usize,
        concat!("Size of: ", stringify!(odbahis5__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis5__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbahis5__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_msg) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(len_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_no) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(pth_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_alm) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(sys_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_flg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(dsp_flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_modal) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(g_modal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_dp) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(g_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_modal) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(a_modal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_dp) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(a_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_pos) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(abs_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_dp) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(abs_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn_pos) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(mcn_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn_dp) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5__bindgen_ty_1),
            "::",
            stringify!(mcn_dp)
        )
    );
}
#[test]
fn bindgen_test_layout_odbahis5() {
    const UNINIT: ::std::mem::MaybeUninit<odbahis5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahis5>(),
        8648usize,
        concat!("Size of: ", stringify!(odbahis5))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahis5>(),
        8usize,
        concat!("Alignment of ", stringify!(odbahis5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_his) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahis5),
            "::",
            stringify!(alm_his)
        )
    );
}
pub type ODBAHIS5 = odbahis5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmhis2 {
    pub s_no: ::std::os::raw::c_ushort,
    pub e_no: ::std::os::raw::c_ushort,
    pub opm_his: [odbmhis2__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmhis2__bindgen_ty_1 {
    pub dsp_flg: ::std::os::raw::c_short,
    pub om_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub ope_msg: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_odbmhis2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbmhis2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmhis2__bindgen_ty_1>(),
        272usize,
        concat!("Size of: ", stringify!(odbmhis2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmhis2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmhis2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(dsp_flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(om_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ope_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2__bindgen_ty_1),
            "::",
            stringify!(ope_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_odbmhis2() {
    const UNINIT: ::std::mem::MaybeUninit<odbmhis2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmhis2>(),
        2724usize,
        concat!("Size of: ", stringify!(odbmhis2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmhis2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmhis2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opm_his) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmhis2),
            "::",
            stringify!(opm_his)
        )
    );
}
pub type ODBOMHIS2 = odbmhis2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsig {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [iodbsig__bindgen_ty_1; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsig__bindgen_ty_1 {
    pub ent_no: ::std::os::raw::c_short,
    pub sig_no: ::std::os::raw::c_short,
    pub sig_name: ::std::os::raw::c_char,
    pub mask_pat: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbsig__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsig__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsig__bindgen_ty_1>(),
        6usize,
        concat!("Size of: ", stringify!(iodbsig__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsig__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsig__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ent_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig__bindgen_ty_1),
            "::",
            stringify!(ent_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig__bindgen_ty_1),
            "::",
            stringify!(sig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig__bindgen_ty_1),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_pat) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig__bindgen_ty_1),
            "::",
            stringify!(mask_pat)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsig() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsig>(),
        124usize,
        concat!("Size of: ", stringify!(iodbsig))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsig>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBSIG = iodbsig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsig2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [iodbsig2__bindgen_ty_1; 45usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsig2__bindgen_ty_1 {
    pub ent_no: ::std::os::raw::c_short,
    pub sig_no: ::std::os::raw::c_short,
    pub sig_name: ::std::os::raw::c_char,
    pub mask_pat: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbsig2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsig2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsig2__bindgen_ty_1>(),
        6usize,
        concat!("Size of: ", stringify!(iodbsig2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsig2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsig2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ent_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2__bindgen_ty_1),
            "::",
            stringify!(ent_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2__bindgen_ty_1),
            "::",
            stringify!(sig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2__bindgen_ty_1),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_pat) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2__bindgen_ty_1),
            "::",
            stringify!(mask_pat)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsig2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsig2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsig2>(),
        274usize,
        concat!("Size of: ", stringify!(iodbsig2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsig2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsig2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig2),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBSIG2 = iodbsig2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsig3 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [iodbsig3__bindgen_ty_1; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsig3__bindgen_ty_1 {
    pub ent_no: ::std::os::raw::c_short,
    pub pmc_no: ::std::os::raw::c_short,
    pub sig_no: ::std::os::raw::c_short,
    pub sig_name: ::std::os::raw::c_char,
    pub mask_pat: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbsig3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsig3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsig3__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(iodbsig3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsig3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsig3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ent_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3__bindgen_ty_1),
            "::",
            stringify!(ent_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3__bindgen_ty_1),
            "::",
            stringify!(pmc_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3__bindgen_ty_1),
            "::",
            stringify!(sig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_name) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3__bindgen_ty_1),
            "::",
            stringify!(sig_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask_pat) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3__bindgen_ty_1),
            "::",
            stringify!(mask_pat)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsig3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsig3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsig3>(),
        484usize,
        concat!("Size of: ", stringify!(iodbsig3))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsig3>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsig3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsig3),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBSIG3 = iodbsig3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbinf {
    pub max_shape_num: ::std::os::raw::c_ushort,
    pub max_tool_num: ::std::os::raw::c_ushort,
    pub max_holder_num: ::std::os::raw::c_ushort,
    pub max_object_num: ::std::os::raw::c_ushort,
    pub max_element_num: ::std::os::raw::c_ushort,
    pub max_holder_shpnum: ::std::os::raw::c_ushort,
    pub max_object_shpnum: ::std::os::raw::c_ushort,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbinf>(),
        16usize,
        concat!("Size of: ", stringify!(odbinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_shape_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_shape_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tool_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_tool_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_holder_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_holder_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_object_num) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_object_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_element_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_element_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_holder_shpnum) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_holder_shpnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_object_shpnum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(max_object_shpnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbinf),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBINF = odbinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbnme {
    pub ob_type: ::std::os::raw::c_short,
    pub obj_no: ::std::os::raw::c_ushort,
    pub nme_no: ::std::os::raw::c_ushort,
    pub suffix: ::std::os::raw::c_ushort,
    pub name: [::std::os::raw::c_char; 12usize],
}
#[test]
fn bindgen_test_layout_odbnme() {
    const UNINIT: ::std::mem::MaybeUninit<odbnme> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbnme>(),
        20usize,
        concat!("Size of: ", stringify!(odbnme))
    );
    assert_eq!(
        ::std::mem::align_of::<odbnme>(),
        2usize,
        concat!("Alignment of ", stringify!(odbnme))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ob_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnme),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnme),
            "::",
            stringify!(obj_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nme_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnme),
            "::",
            stringify!(nme_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suffix) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnme),
            "::",
            stringify!(suffix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnme),
            "::",
            stringify!(name)
        )
    );
}
pub type ODBNME = odbnme;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdst {
    pub ob_type: ::std::os::raw::c_short,
    pub obj_no: ::std::os::raw::c_ushort,
    pub shp_disp: ::std::os::raw::c_uchar,
    pub mva_disp: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbdst() {
    const UNINIT: ::std::mem::MaybeUninit<odbdst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdst>(),
        6usize,
        concat!("Size of: ", stringify!(odbdst))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdst>(),
        2usize,
        concat!("Alignment of ", stringify!(odbdst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ob_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdst),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdst),
            "::",
            stringify!(obj_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shp_disp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdst),
            "::",
            stringify!(shp_disp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mva_disp) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdst),
            "::",
            stringify!(mva_disp)
        )
    );
}
pub type ODBDST = odbdst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbshp {
    pub ob_type: ::std::os::raw::c_short,
    pub obj_no: ::std::os::raw::c_ushort,
    pub shp_no: ::std::os::raw::c_ushort,
    pub fig_ele: [::std::os::raw::c_ushort; 10usize],
    pub ref_pos: [::std::os::raw::c_long; 3usize],
    pub tool_ref: [::std::os::raw::c_long; 3usize],
    pub tool_dir: [::std::os::raw::c_long; 3usize],
    pub ref_ang1: ::std::os::raw::c_long,
    pub ref_ang2: ::std::os::raw::c_long,
    pub n_unit: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbshp() {
    const UNINIT: ::std::mem::MaybeUninit<odbshp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbshp>(),
        128usize,
        concat!("Size of: ", stringify!(odbshp))
    );
    assert_eq!(
        ::std::mem::align_of::<odbshp>(),
        8usize,
        concat!("Alignment of ", stringify!(odbshp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ob_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(obj_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shp_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(shp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fig_ele) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(fig_ele)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_pos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(ref_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_ref) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(tool_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_dir) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(tool_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_ang1) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(ref_ang1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_ang2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(ref_ang2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_unit) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(odbshp),
            "::",
            stringify!(n_unit)
        )
    );
}
pub type ODBSHP = odbshp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcub {
    pub ref_vtx: [::std::os::raw::c_long; 3usize],
    pub adj_vtx1: [::std::os::raw::c_long; 3usize],
    pub adj_vtx2: [::std::os::raw::c_long; 3usize],
    pub adj_vtx3: [::std::os::raw::c_long; 3usize],
    pub n_unit: ::std::os::raw::c_uchar,
    pub cb_form: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbcub() {
    const UNINIT: ::std::mem::MaybeUninit<odbcub> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcub>(),
        104usize,
        concat!("Size of: ", stringify!(odbcub))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcub>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcub))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_vtx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcub),
            "::",
            stringify!(ref_vtx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adj_vtx1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcub),
            "::",
            stringify!(adj_vtx1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adj_vtx2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcub),
            "::",
            stringify!(adj_vtx2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adj_vtx3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcub),
            "::",
            stringify!(adj_vtx3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_unit) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcub),
            "::",
            stringify!(n_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_form) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcub),
            "::",
            stringify!(cb_form)
        )
    );
}
pub type ODBCUB = odbcub;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcbi {
    pub cb_no: ::std::os::raw::c_ushort,
    pub nme_set: ODBNME,
    pub shp_no: ::std::os::raw::c_uchar,
    pub cd_form: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbcbi() {
    const UNINIT: ::std::mem::MaybeUninit<odbcbi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcbi>(),
        24usize,
        concat!("Size of: ", stringify!(odbcbi))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcbi>(),
        2usize,
        concat!("Alignment of ", stringify!(odbcbi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcbi),
            "::",
            stringify!(cb_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nme_set) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcbi),
            "::",
            stringify!(nme_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shp_no) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcbi),
            "::",
            stringify!(shp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cd_form) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcbi),
            "::",
            stringify!(cd_form)
        )
    );
}
pub type ODBCBI = odbcbi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmva {
    pub sync_obj: ::std::os::raw::c_ushort,
    pub path: ::std::os::raw::c_ushort,
    pub lin_ax: [odbmva__bindgen_ty_1; 3usize],
    pub rot_ax: [odbmva__bindgen_ty_2; 2usize],
    pub rot_ele: [odbmva__bindgen_ty_3; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmva__bindgen_ty_1 {
    pub axis_no: ::std::os::raw::c_ushort,
    pub mov_dir: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbmva__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbmva__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmva__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbmva__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmva__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmva__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_1),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mov_dir) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_1),
            "::",
            stringify!(mov_dir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmva__bindgen_ty_2 {
    pub axis_no: ::std::os::raw::c_ushort,
    pub c_ax_dir: ::std::os::raw::c_ushort,
    pub c_pos: [::std::os::raw::c_long; 3usize],
    pub inc_ang: ::std::os::raw::c_long,
    pub rot_dir: ::std::os::raw::c_ushort,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbmva__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbmva__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmva__bindgen_ty_2>(),
        48usize,
        concat!("Size of: ", stringify!(odbmva__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmva__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmva__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_2),
            "::",
            stringify!(axis_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ax_dir) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_2),
            "::",
            stringify!(c_ax_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_2),
            "::",
            stringify!(c_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inc_ang) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_2),
            "::",
            stringify!(inc_ang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot_dir) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_2),
            "::",
            stringify!(rot_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_2),
            "::",
            stringify!(reserve)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmva__bindgen_ty_3 {
    pub master: ::std::os::raw::c_ushort,
    pub slave: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbmva__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbmva__bindgen_ty_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmva__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(odbmva__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmva__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmva__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_3),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva__bindgen_ty_3),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout_odbmva() {
    const UNINIT: ::std::mem::MaybeUninit<odbmva> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmva>(),
        136usize,
        concat!("Size of: ", stringify!(odbmva))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmva>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmva))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync_obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva),
            "::",
            stringify!(sync_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lin_ax) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva),
            "::",
            stringify!(lin_ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot_ax) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva),
            "::",
            stringify!(rot_ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot_ele) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmva),
            "::",
            stringify!(rot_ele)
        )
    );
}
pub type ODBMVA = odbmva;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbcrntshp {
    pub fig_type: ::std::os::raw::c_long,
    pub reserve: ::std::os::raw::c_long,
    pub fig: odbcrntshp__bindgen_ty_1,
    pub cb_form: ::std::os::raw::c_char,
    pub reserve2: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbcrntshp__bindgen_ty_1 {
    pub par: odbcrntshp__bindgen_ty_1__bindgen_ty_1,
    pub cyl: odbcrntshp__bindgen_ty_1__bindgen_ty_2,
    pub pln: odbcrntshp__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcrntshp__bindgen_ty_1__bindgen_ty_1 {
    pub base_pos: [f64; 3usize],
    pub vect1: [f64; 3usize],
    pub vect2: [f64; 3usize],
    pub vect3: [f64; 3usize],
}
#[test]
fn bindgen_test_layout_odbcrntshp__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbcrntshp__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcrntshp__bindgen_ty_1__bindgen_ty_1>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbcrntshp__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(base_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(vect1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(vect2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(vect3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcrntshp__bindgen_ty_1__bindgen_ty_2 {
    pub vect1: [f64; 3usize],
    pub vect2: [f64; 3usize],
    pub v: f64,
}
#[test]
fn bindgen_test_layout_odbcrntshp__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbcrntshp__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcrntshp__bindgen_ty_1__bindgen_ty_2>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbcrntshp__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(vect1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(vect2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcrntshp__bindgen_ty_1__bindgen_ty_3 {
    pub point: [f64; 3usize],
    pub vect: [f64; 3usize],
}
#[test]
fn bindgen_test_layout_odbcrntshp__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbcrntshp__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcrntshp__bindgen_ty_1__bindgen_ty_3>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbcrntshp__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(vect)
        )
    );
}
#[test]
fn bindgen_test_layout_odbcrntshp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbcrntshp__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcrntshp__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(odbcrntshp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcrntshp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcrntshp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1),
            "::",
            stringify!(par)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cyl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1),
            "::",
            stringify!(cyl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pln) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp__bindgen_ty_1),
            "::",
            stringify!(pln)
        )
    );
}
#[test]
fn bindgen_test_layout_odbcrntshp() {
    const UNINIT: ::std::mem::MaybeUninit<odbcrntshp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcrntshp>(),
        120usize,
        concat!("Size of: ", stringify!(odbcrntshp))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcrntshp>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcrntshp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fig_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp),
            "::",
            stringify!(fig_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fig) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp),
            "::",
            stringify!(fig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_form) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp),
            "::",
            stringify!(cb_form)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcrntshp),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type ODBCRNTSHP = odbcrntshp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcyl {
    pub sta_pnt: [::std::os::raw::c_long; 3usize],
    pub end_pnt: [::std::os::raw::c_long; 3usize],
    pub radius: ::std::os::raw::c_long,
    pub n_unit: ::std::os::raw::c_uchar,
    pub cb_form: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbcyl() {
    const UNINIT: ::std::mem::MaybeUninit<odbcyl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcyl>(),
        64usize,
        concat!("Size of: ", stringify!(odbcyl))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcyl>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcyl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sta_pnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcyl),
            "::",
            stringify!(sta_pnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_pnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcyl),
            "::",
            stringify!(end_pnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcyl),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_unit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcyl),
            "::",
            stringify!(n_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_form) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcyl),
            "::",
            stringify!(cb_form)
        )
    );
}
pub type ODBCYL = odbcyl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpln {
    pub point: [::std::os::raw::c_long; 3usize],
    pub vect: [::std::os::raw::c_long; 3usize],
    pub n_unit: ::std::os::raw::c_uchar,
    pub cb_form: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbpln() {
    const UNINIT: ::std::mem::MaybeUninit<odbpln> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpln>(),
        56usize,
        concat!("Size of: ", stringify!(odbpln))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpln>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpln))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpln),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpln),
            "::",
            stringify!(vect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_unit) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpln),
            "::",
            stringify!(n_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_form) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpln),
            "::",
            stringify!(cb_form)
        )
    );
}
pub type ODBPLN = odbpln;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbfig {
    pub fig_type: ::std::os::raw::c_long,
    pub fig: odbfig__bindgen_ty_1,
    pub fig_no: ::std::os::raw::c_ushort,
    pub n_unit: ::std::os::raw::c_uchar,
    pub cb_form: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbfig__bindgen_ty_1 {
    pub par: odbfig__bindgen_ty_1__bindgen_ty_1,
    pub cyl: odbfig__bindgen_ty_1__bindgen_ty_2,
    pub pln: odbfig__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfig__bindgen_ty_1__bindgen_ty_1 {
    pub ref_vtx: [::std::os::raw::c_long; 3usize],
    pub adj_vtx1: [::std::os::raw::c_long; 3usize],
    pub adj_vtx2: [::std::os::raw::c_long; 3usize],
    pub adj_vtx3: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_odbfig__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbfig__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfig__bindgen_ty_1__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(odbfig__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfig__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_vtx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ref_vtx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adj_vtx1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(adj_vtx1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adj_vtx2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(adj_vtx2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adj_vtx3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(adj_vtx3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfig__bindgen_ty_1__bindgen_ty_2 {
    pub sta_pnt: [::std::os::raw::c_long; 3usize],
    pub end_pnt: [::std::os::raw::c_long; 3usize],
    pub radius: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbfig__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbfig__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfig__bindgen_ty_1__bindgen_ty_2>(),
        56usize,
        concat!("Size of: ", stringify!(odbfig__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfig__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sta_pnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sta_pnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_pnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(end_pnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfig__bindgen_ty_1__bindgen_ty_3 {
    pub point: [::std::os::raw::c_long; 3usize],
    pub vect: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_odbfig__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbfig__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfig__bindgen_ty_1__bindgen_ty_3>(),
        48usize,
        concat!("Size of: ", stringify!(odbfig__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfig__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(vect)
        )
    );
}
#[test]
fn bindgen_test_layout_odbfig__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbfig__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfig__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(odbfig__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfig__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfig__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1),
            "::",
            stringify!(par)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cyl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1),
            "::",
            stringify!(cyl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pln) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig__bindgen_ty_1),
            "::",
            stringify!(pln)
        )
    );
}
#[test]
fn bindgen_test_layout_odbfig() {
    const UNINIT: ::std::mem::MaybeUninit<odbfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfig>(),
        112usize,
        concat!("Size of: ", stringify!(odbfig))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfig>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fig_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig),
            "::",
            stringify!(fig_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fig) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig),
            "::",
            stringify!(fig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fig_no) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig),
            "::",
            stringify!(fig_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_unit) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig),
            "::",
            stringify!(n_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_form) as usize - ptr as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfig),
            "::",
            stringify!(cb_form)
        )
    );
}
pub type ODBFIG = odbfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsys {
    pub addinfo: ::std::os::raw::c_short,
    pub max_axis: ::std::os::raw::c_short,
    pub cnc_type: [::std::os::raw::c_char; 2usize],
    pub mt_type: [::std::os::raw::c_char; 2usize],
    pub series: [::std::os::raw::c_char; 4usize],
    pub version: [::std::os::raw::c_char; 4usize],
    pub axes: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odbsys() {
    const UNINIT: ::std::mem::MaybeUninit<odbsys> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsys>(),
        18usize,
        concat!("Size of: ", stringify!(odbsys))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsys>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsys))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(addinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(max_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnc_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(cnc_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(mt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsys),
            "::",
            stringify!(axes)
        )
    );
}
pub type ODBSYS = odbsys;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbsramif {
    pub protect: ::std::os::raw::c_long,
    pub size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__odbsramif() {
    const UNINIT: ::std::mem::MaybeUninit<_odbsramif> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbsramif>(),
        16usize,
        concat!("Size of: ", stringify!(_odbsramif))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbsramif>(),
        8usize,
        concat!("Alignment of ", stringify!(_odbsramif))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbsramif),
            "::",
            stringify!(protect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbsramif),
            "::",
            stringify!(size)
        )
    );
}
pub type ODBSRAMIF = _odbsramif;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbsramif2 {
    pub protect: ::std::os::raw::c_long,
    pub adrs: ::std::os::raw::c_ulong,
    pub size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__odbsramif2() {
    const UNINIT: ::std::mem::MaybeUninit<_odbsramif2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbsramif2>(),
        24usize,
        concat!("Size of: ", stringify!(_odbsramif2))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbsramif2>(),
        8usize,
        concat!("Alignment of ", stringify!(_odbsramif2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbsramif2),
            "::",
            stringify!(protect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbsramif2),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbsramif2),
            "::",
            stringify!(size)
        )
    );
}
pub type ODBSRAMIF2 = _odbsramif2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbst {
    pub hdck: ::std::os::raw::c_short,
    pub tmmode: ::std::os::raw::c_short,
    pub aut: ::std::os::raw::c_short,
    pub run: ::std::os::raw::c_short,
    pub motion: ::std::os::raw::c_short,
    pub mstb: ::std::os::raw::c_short,
    pub emergency: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_short,
    pub edit: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbst() {
    const UNINIT: ::std::mem::MaybeUninit<odbst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbst>(),
        18usize,
        concat!("Size of: ", stringify!(odbst))
    );
    assert_eq!(
        ::std::mem::align_of::<odbst>(),
        2usize,
        concat!("Alignment of ", stringify!(odbst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdck) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(hdck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmmode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(tmmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aut) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(aut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mstb) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(mstb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emergency) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(emergency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst),
            "::",
            stringify!(edit)
        )
    );
}
pub type ODBST = odbst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbst2 {
    pub hdck: ::std::os::raw::c_short,
    pub tmmode: ::std::os::raw::c_short,
    pub aut: ::std::os::raw::c_short,
    pub run: ::std::os::raw::c_short,
    pub motion: ::std::os::raw::c_short,
    pub mstb: ::std::os::raw::c_short,
    pub emergency: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_short,
    pub edit: ::std::os::raw::c_short,
    pub warning: ::std::os::raw::c_short,
    pub o3dchk: ::std::os::raw::c_short,
    pub ext_opt: ::std::os::raw::c_short,
    pub restart: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbst2() {
    const UNINIT: ::std::mem::MaybeUninit<odbst2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbst2>(),
        26usize,
        concat!("Size of: ", stringify!(odbst2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbst2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbst2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdck) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(hdck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmmode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(tmmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aut) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(aut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mstb) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(mstb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emergency) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(emergency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warning) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o3dchk) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(o3dchk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_opt) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(ext_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).restart) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbst2),
            "::",
            stringify!(restart)
        )
    );
}
pub type ODBST2 = odbst2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbopmsg {
    pub msg_kind: ::std::os::raw::c_short,
    pub msg: [::std::os::raw::c_char; 30usize],
}
#[test]
fn bindgen_test_layout_odbopmsg() {
    const UNINIT: ::std::mem::MaybeUninit<odbopmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbopmsg>(),
        32usize,
        concat!("Size of: ", stringify!(odbopmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbopmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(odbopmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbopmsg),
            "::",
            stringify!(msg_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbopmsg),
            "::",
            stringify!(msg)
        )
    );
}
pub type ODBOPMSG = odbopmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsramstat {
    pub msg_kind: ::std::os::raw::c_short,
    pub msg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_odbsramstat() {
    const UNINIT: ::std::mem::MaybeUninit<odbsramstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsramstat>(),
        66usize,
        concat!("Size of: ", stringify!(odbsramstat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsramstat>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsramstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsramstat),
            "::",
            stringify!(msg_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsramstat),
            "::",
            stringify!(msg)
        )
    );
}
pub type ODBSRAMSTAT = odbsramstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct out_statinfo_dmg {
    pub dummy: [::std::os::raw::c_short; 1usize],
    pub dmg: ::std::os::raw::c_short,
    pub dummy1: [::std::os::raw::c_short; 7usize],
}
#[test]
fn bindgen_test_layout_out_statinfo_dmg() {
    const UNINIT: ::std::mem::MaybeUninit<out_statinfo_dmg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<out_statinfo_dmg>(),
        18usize,
        concat!("Size of: ", stringify!(out_statinfo_dmg))
    );
    assert_eq!(
        ::std::mem::align_of::<out_statinfo_dmg>(),
        2usize,
        concat!("Alignment of ", stringify!(out_statinfo_dmg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(out_statinfo_dmg),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmg) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(out_statinfo_dmg),
            "::",
            stringify!(dmg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(out_statinfo_dmg),
            "::",
            stringify!(dummy1)
        )
    );
}
pub type OUT_STATINF_DMG = out_statinfo_dmg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbalm {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbalm() {
    const UNINIT: ::std::mem::MaybeUninit<odbalm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbalm>(),
        6usize,
        concat!("Size of: ", stringify!(odbalm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbalm>(),
        2usize,
        concat!("Alignment of ", stringify!(odbalm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalm),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalm),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBALM = odbalm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct alminfo {
    pub u: alminfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union alminfo__bindgen_ty_1 {
    pub alm1: alminfo__bindgen_ty_1__bindgen_ty_1,
    pub alm2: alminfo__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo__bindgen_ty_1__bindgen_ty_1 {
    pub alm: [alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1; 5usize],
    pub data_end: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_long,
    pub alm_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo__bindgen_ty_1__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(alminfo__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data_end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo__bindgen_ty_1__bindgen_ty_2 {
    pub alm: [alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1; 5usize],
    pub data_end: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_long,
    pub alm_no: ::std::os::raw::c_short,
    pub msg_len: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(msg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo__bindgen_ty_1__bindgen_ty_2>(),
        248usize,
        concat!("Size of: ", stringify!(alminfo__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(data_end)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo__bindgen_ty_1>(),
        248usize,
        concat!("Size of: ", stringify!(alminfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(alminfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1),
            "::",
            stringify!(alm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo__bindgen_ty_1),
            "::",
            stringify!(alm2)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo>(),
        248usize,
        concat!("Size of: ", stringify!(alminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(alminfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo),
            "::",
            stringify!(u)
        )
    );
}
pub type ALMINFO = alminfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct alminfo2 {
    pub u: alminfo2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union alminfo2__bindgen_ty_1 {
    pub alm1: alminfo2__bindgen_ty_1__bindgen_ty_1,
    pub alm2: alminfo2__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo2__bindgen_ty_1__bindgen_ty_1 {
    pub alm: [alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1; 5usize],
    pub data_end: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo2__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo2__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo2__bindgen_ty_1__bindgen_ty_1>(),
        22usize,
        concat!(
            "Size of: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo2__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data_end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo2__bindgen_ty_1__bindgen_ty_2 {
    pub alm: [alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1; 5usize],
    pub data_end: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub msg_len: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 34usize],
}
#[test]
fn bindgen_test_layout_alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(msg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo2__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo2__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo2__bindgen_ty_1__bindgen_ty_2>(),
        202usize,
        concat!(
            "Size of: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo2__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_end) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(data_end)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo2__bindgen_ty_1>(),
        202usize,
        concat!("Size of: ", stringify!(alminfo2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(alminfo2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1),
            "::",
            stringify!(alm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2__bindgen_ty_1),
            "::",
            stringify!(alm2)
        )
    );
}
#[test]
fn bindgen_test_layout_alminfo2() {
    const UNINIT: ::std::mem::MaybeUninit<alminfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<alminfo2>(),
        202usize,
        concat!("Size of: ", stringify!(alminfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<alminfo2>(),
        2usize,
        concat!("Alignment of ", stringify!(alminfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(alminfo2),
            "::",
            stringify!(u)
        )
    );
}
pub type ALMINFO2 = alminfo2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbalmmsg {
    pub alm_no: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub msg_len: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbalmmsg() {
    const UNINIT: ::std::mem::MaybeUninit<odbalmmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbalmmsg>(),
        48usize,
        concat!("Size of: ", stringify!(odbalmmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbalmmsg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbalmmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg),
            "::",
            stringify!(msg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg),
            "::",
            stringify!(alm_msg)
        )
    );
}
pub type ODBALMMSG = odbalmmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbalmmsg2 {
    pub alm_no: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub msg_len: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_odbalmmsg2() {
    const UNINIT: ::std::mem::MaybeUninit<odbalmmsg2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbalmmsg2>(),
        80usize,
        concat!("Size of: ", stringify!(odbalmmsg2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbalmmsg2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbalmmsg2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg2),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg2),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg2),
            "::",
            stringify!(msg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg2),
            "::",
            stringify!(alm_msg)
        )
    );
}
pub type ODBALMMSG2 = odbalmmsg2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbalmmsg3 {
    pub alm_no: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub msg_len: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_odbalmmsg3() {
    const UNINIT: ::std::mem::MaybeUninit<odbalmmsg3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbalmmsg3>(),
        272usize,
        concat!("Size of: ", stringify!(odbalmmsg3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbalmmsg3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbalmmsg3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg3),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg3),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg3),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg3),
            "::",
            stringify!(msg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbalmmsg3),
            "::",
            stringify!(alm_msg)
        )
    );
}
pub type ODBALMMSG3 = odbalmmsg3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbmdl {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub modal: odbmdl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbmdl__bindgen_ty_1 {
    pub g_data: ::std::os::raw::c_char,
    pub g_rdata: [::std::os::raw::c_char; 35usize],
    pub g_1shot: [::std::os::raw::c_char; 4usize],
    pub aux: odbmdl__bindgen_ty_1__bindgen_ty_1,
    pub raux1: [odbmdl__bindgen_ty_1__bindgen_ty_2; 27usize],
    pub raux2: [odbmdl__bindgen_ty_1__bindgen_ty_3; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdl__bindgen_ty_1__bindgen_ty_1 {
    pub aux_data: ::std::os::raw::c_long,
    pub flag1: ::std::os::raw::c_char,
    pub flag2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbmdl__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdl__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdl__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(odbmdl__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdl__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flag2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdl__bindgen_ty_1__bindgen_ty_2 {
    pub aux_data: ::std::os::raw::c_long,
    pub flag1: ::std::os::raw::c_char,
    pub flag2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbmdl__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdl__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdl__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(odbmdl__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdl__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(aux_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(flag2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdl__bindgen_ty_1__bindgen_ty_3 {
    pub aux_data: ::std::os::raw::c_long,
    pub flag1: ::std::os::raw::c_char,
    pub flag2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbmdl__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdl__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdl__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(odbmdl__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdl__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(aux_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(flag2)
        )
    );
}
#[test]
fn bindgen_test_layout_odbmdl__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdl__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdl__bindgen_ty_1>(),
        512usize,
        concat!("Size of: ", stringify!(odbmdl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdl__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1),
            "::",
            stringify!(g_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1),
            "::",
            stringify!(g_rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_1shot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1),
            "::",
            stringify!(g_1shot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raux1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1),
            "::",
            stringify!(raux1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raux2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl__bindgen_ty_1),
            "::",
            stringify!(raux2)
        )
    );
}
#[test]
fn bindgen_test_layout_odbmdl() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdl>(),
        520usize,
        concat!("Size of: ", stringify!(odbmdl))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdl>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdl),
            "::",
            stringify!(modal)
        )
    );
}
pub type ODBMDL = odbmdl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbgcd {
    pub group: ::std::os::raw::c_short,
    pub flag: ::std::os::raw::c_short,
    pub code: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_odbgcd() {
    const UNINIT: ::std::mem::MaybeUninit<odbgcd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbgcd>(),
        12usize,
        concat!("Size of: ", stringify!(odbgcd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbgcd>(),
        2usize,
        concat!("Alignment of ", stringify!(odbgcd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgcd),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgcd),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgcd),
            "::",
            stringify!(code)
        )
    );
}
pub type ODBGCD = odbgcd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcmd {
    pub adrs: ::std::os::raw::c_char,
    pub num: ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_short,
    pub cmd_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbcmd() {
    const UNINIT: ::std::mem::MaybeUninit<odbcmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcmd>(),
        24usize,
        concat!("Size of: ", stringify!(odbcmd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcmd>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd),
            "::",
            stringify!(cmd_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcmd),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type ODBCMD = odbcmd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct realdgn {
    pub dgn_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_realdgn() {
    const UNINIT: ::std::mem::MaybeUninit<realdgn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<realdgn>(),
        16usize,
        concat!("Size of: ", stringify!(realdgn))
    );
    assert_eq!(
        ::std::mem::align_of::<realdgn>(),
        8usize,
        concat!("Alignment of ", stringify!(realdgn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(realdgn),
            "::",
            stringify!(dgn_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(realdgn),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type REALDGN = realdgn;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdgn {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub u: odbdgn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdgn__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALDGN,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALDGN; 32usize],
}
#[test]
fn bindgen_test_layout_odbdgn__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdgn__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdgn__bindgen_ty_1>(),
        512usize,
        concat!("Size of: ", stringify!(odbdgn__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdgn__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdgn__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdgn() {
    const UNINIT: ::std::mem::MaybeUninit<odbdgn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdgn>(),
        520usize,
        concat!("Size of: ", stringify!(odbdgn))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdgn>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdgn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdgn),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(odbdgn), "::", stringify!(u))
    );
}
pub type ODBDGN = odbdgn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbad {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbad() {
    const UNINIT: ::std::mem::MaybeUninit<odbad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbad>(),
        6usize,
        concat!("Size of: ", stringify!(odbad))
    );
    assert_eq!(
        ::std::mem::align_of::<odbad>(),
        2usize,
        concat!("Alignment of ", stringify!(odbad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbad),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbad),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbad),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBAD = odbad;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub char_num: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_msg() {
    const UNINIT: ::std::mem::MaybeUninit<msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msg>(),
        262usize,
        concat!("Size of: ", stringify!(msg))
    );
    assert_eq!(
        ::std::mem::align_of::<msg>(),
        2usize,
        concat!("Alignment of ", stringify!(msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(msg),
            "::",
            stringify!(char_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(msg), "::", stringify!(data))
    );
}
pub type OPMSG = msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opmsg2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub char_num: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_opmsg2() {
    const UNINIT: ::std::mem::MaybeUninit<opmsg2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<opmsg2>(),
        70usize,
        concat!("Size of: ", stringify!(opmsg2))
    );
    assert_eq!(
        ::std::mem::align_of::<opmsg2>(),
        2usize,
        concat!("Alignment of ", stringify!(opmsg2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg2),
            "::",
            stringify!(char_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg2),
            "::",
            stringify!(data)
        )
    );
}
pub type OPMSG2 = opmsg2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opmsg3 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub char_num: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_opmsg3() {
    const UNINIT: ::std::mem::MaybeUninit<opmsg3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<opmsg3>(),
        262usize,
        concat!("Size of: ", stringify!(opmsg3))
    );
    assert_eq!(
        ::std::mem::align_of::<opmsg3>(),
        2usize,
        concat!("Alignment of ", stringify!(opmsg3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg3),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg3),
            "::",
            stringify!(char_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(opmsg3),
            "::",
            stringify!(data)
        )
    );
}
pub type OPMSG3 = opmsg3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opmsgmps {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub char_num: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout__opmsgmps() {
    const UNINIT: ::std::mem::MaybeUninit<_opmsgmps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opmsgmps>(),
        262usize,
        concat!("Size of: ", stringify!(_opmsgmps))
    );
    assert_eq!(
        ::std::mem::align_of::<_opmsgmps>(),
        2usize,
        concat!("Alignment of ", stringify!(_opmsgmps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opmsgmps),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_opmsgmps),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_opmsgmps),
            "::",
            stringify!(char_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_opmsgmps),
            "::",
            stringify!(data)
        )
    );
}
pub type OPMSGMPS = _opmsgmps;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsysc {
    pub slot_no_p: [::std::os::raw::c_char; 16usize],
    pub slot_no_l: [::std::os::raw::c_char; 16usize],
    pub mod_id: [::std::os::raw::c_short; 16usize],
    pub soft_id: [::std::os::raw::c_short; 16usize],
    pub s_series: [[::std::os::raw::c_char; 5usize]; 16usize],
    pub s_version: [[::std::os::raw::c_char; 5usize]; 16usize],
    pub dummy: [::std::os::raw::c_char; 16usize],
    pub m_rom: ::std::os::raw::c_short,
    pub s_rom: ::std::os::raw::c_short,
    pub svo_soft: [::std::os::raw::c_char; 8usize],
    pub pmc_soft: [::std::os::raw::c_char; 6usize],
    pub lad_soft: [::std::os::raw::c_char; 6usize],
    pub mcr_soft: [::std::os::raw::c_char; 8usize],
    pub spl1_soft: [::std::os::raw::c_char; 6usize],
    pub spl2_soft: [::std::os::raw::c_char; 6usize],
    pub frmmin: ::std::os::raw::c_short,
    pub drmmin: ::std::os::raw::c_short,
    pub srmmin: ::std::os::raw::c_short,
    pub pmcmin: ::std::os::raw::c_short,
    pub crtmin: ::std::os::raw::c_short,
    pub sv1min: ::std::os::raw::c_short,
    pub sv3min: ::std::os::raw::c_short,
    pub sicmin: ::std::os::raw::c_short,
    pub posmin: ::std::os::raw::c_short,
    pub drmmrc: ::std::os::raw::c_short,
    pub drmarc: ::std::os::raw::c_short,
    pub pmcmrc: ::std::os::raw::c_short,
    pub dmaarc: ::std::os::raw::c_short,
    pub iopt: ::std::os::raw::c_short,
    pub hdiio: ::std::os::raw::c_short,
    pub frmsub: ::std::os::raw::c_short,
    pub drmsub: ::std::os::raw::c_short,
    pub srmsub: ::std::os::raw::c_short,
    pub sv5sub: ::std::os::raw::c_short,
    pub sv7sub: ::std::os::raw::c_short,
    pub sicsub: ::std::os::raw::c_short,
    pub possub: ::std::os::raw::c_short,
    pub hamsub: ::std::os::raw::c_short,
    pub gm2gr1: ::std::os::raw::c_short,
    pub crtgr2: ::std::os::raw::c_short,
    pub gm1gr2: ::std::os::raw::c_short,
    pub gm2gr2: ::std::os::raw::c_short,
    pub cmmrb: ::std::os::raw::c_short,
    pub sv5axs: ::std::os::raw::c_short,
    pub sv7axs: ::std::os::raw::c_short,
    pub sicaxs: ::std::os::raw::c_short,
    pub posaxs: ::std::os::raw::c_short,
    pub hanaxs: ::std::os::raw::c_short,
    pub romr64: ::std::os::raw::c_short,
    pub srmr64: ::std::os::raw::c_short,
    pub dr1r64: ::std::os::raw::c_short,
    pub dr2r64: ::std::os::raw::c_short,
    pub iopio2: ::std::os::raw::c_short,
    pub hdiio2: ::std::os::raw::c_short,
    pub cmmrb2: ::std::os::raw::c_short,
    pub romfap: ::std::os::raw::c_short,
    pub srmfap: ::std::os::raw::c_short,
    pub drmfap: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsysc() {
    const UNINIT: ::std::mem::MaybeUninit<odbsysc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsysc>(),
        402usize,
        concat!("Size of: ", stringify!(odbsysc))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsysc>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsysc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(slot_no_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no_l) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(slot_no_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(mod_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_id) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(soft_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_series) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(s_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_version) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(s_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_rom) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(m_rom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_rom) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(s_rom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svo_soft) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(svo_soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_soft) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(pmc_soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lad_soft) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(lad_soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr_soft) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(mcr_soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl1_soft) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(spl1_soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl2_soft) as usize - ptr as usize },
        310usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(spl2_soft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frmmin) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(frmmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmmin) as usize - ptr as usize },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(drmmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srmmin) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(srmmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmcmin) as usize - ptr as usize },
        322usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(pmcmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crtmin) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(crtmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv1min) as usize - ptr as usize },
        326usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sv1min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv3min) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sv3min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sicmin) as usize - ptr as usize },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sicmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).posmin) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(posmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmmrc) as usize - ptr as usize },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(drmmrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmarc) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(drmarc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmcmrc) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(pmcmrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmaarc) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(dmaarc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iopt) as usize - ptr as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(iopt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdiio) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(hdiio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frmsub) as usize - ptr as usize },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(frmsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmsub) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(drmsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srmsub) as usize - ptr as usize },
        350usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(srmsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv5sub) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sv5sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv7sub) as usize - ptr as usize },
        354usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sv7sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sicsub) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sicsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).possub) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(possub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hamsub) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(hamsub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gm2gr1) as usize - ptr as usize },
        362usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(gm2gr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crtgr2) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(crtgr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gm1gr2) as usize - ptr as usize },
        366usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(gm1gr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gm2gr2) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(gm2gr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmmrb) as usize - ptr as usize },
        370usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(cmmrb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv5axs) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sv5axs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv7axs) as usize - ptr as usize },
        374usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sv7axs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sicaxs) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(sicaxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).posaxs) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(posaxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hanaxs) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(hanaxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).romr64) as usize - ptr as usize },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(romr64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srmr64) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(srmr64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dr1r64) as usize - ptr as usize },
        386usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(dr1r64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dr2r64) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(dr2r64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iopio2) as usize - ptr as usize },
        390usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(iopio2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdiio2) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(hdiio2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmmrb2) as usize - ptr as usize },
        394usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(cmmrb2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).romfap) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(romfap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srmfap) as usize - ptr as usize },
        398usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(srmfap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmfap) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysc),
            "::",
            stringify!(drmfap)
        )
    );
}
pub type ODBSYSC = odbsysc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprs {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data_info: [::std::os::raw::c_short; 5usize],
    pub rstr_bc: ::std::os::raw::c_long,
    pub rstr_m: [::std::os::raw::c_long; 35usize],
    pub rstr_t: [::std::os::raw::c_long; 2usize],
    pub rstr_s: ::std::os::raw::c_long,
    pub rstr_b: ::std::os::raw::c_long,
    pub dest: [::std::os::raw::c_long; 32usize],
    pub dist: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbprs() {
    const UNINIT: ::std::mem::MaybeUninit<odbprs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprs>(),
        848usize,
        concat!("Size of: ", stringify!(odbprs))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprs>(),
        8usize,
        concat!("Alignment of ", stringify!(odbprs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(data_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_bc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(rstr_bc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_m) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(rstr_m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_t) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(rstr_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_s) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(rstr_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_b) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(rstr_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprs),
            "::",
            stringify!(dist)
        )
    );
}
pub type ODBPRS = odbprs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprsm {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data_info: [::std::os::raw::c_short; 5usize],
    pub rstr_bc: ::std::os::raw::c_long,
    pub rstr_m: [::std::os::raw::c_long; 35usize],
    pub rstr_t: [::std::os::raw::c_long; 2usize],
    pub rstr_s: ::std::os::raw::c_long,
    pub rstr_b: ::std::os::raw::c_long,
    pub dest: [::std::os::raw::c_long; 32usize],
    pub dist: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbprsm() {
    const UNINIT: ::std::mem::MaybeUninit<odbprsm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprsm>(),
        848usize,
        concat!("Size of: ", stringify!(odbprsm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprsm>(),
        8usize,
        concat!("Alignment of ", stringify!(odbprsm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(data_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_bc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(rstr_bc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_m) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(rstr_m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_t) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(rstr_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_s) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(rstr_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstr_b) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(rstr_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprsm),
            "::",
            stringify!(dist)
        )
    );
}
pub type ODBPRSM = odbprsm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsgnl {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub mode: ::std::os::raw::c_short,
    pub hndl_ax: ::std::os::raw::c_short,
    pub hndl_mv: ::std::os::raw::c_short,
    pub rpd_ovrd: ::std::os::raw::c_short,
    pub jog_ovrd: ::std::os::raw::c_short,
    pub feed_ovrd: ::std::os::raw::c_short,
    pub spdl_ovrd: ::std::os::raw::c_short,
    pub blck_del: ::std::os::raw::c_short,
    pub sngl_blck: ::std::os::raw::c_short,
    pub machn_lock: ::std::os::raw::c_short,
    pub dry_run: ::std::os::raw::c_short,
    pub mem_prtct: ::std::os::raw::c_short,
    pub feed_hold: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbsgnl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsgnl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsgnl>(),
        30usize,
        concat!("Size of: ", stringify!(iodbsgnl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsgnl>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsgnl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hndl_ax) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(hndl_ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hndl_mv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(hndl_mv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rpd_ovrd) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(rpd_ovrd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jog_ovrd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(jog_ovrd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_ovrd) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(feed_ovrd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spdl_ovrd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(spdl_ovrd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blck_del) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(blck_del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sngl_blck) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(sngl_blck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machn_lock) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(machn_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dry_run) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(dry_run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_prtct) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(mem_prtct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_hold) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsgnl),
            "::",
            stringify!(feed_hold)
        )
    );
}
pub type IODBSGNL = iodbsgnl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbgnrl {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub sgnal: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbgnrl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbgnrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbgnrl>(),
        6usize,
        concat!("Size of: ", stringify!(iodbgnrl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbgnrl>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbgnrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbgnrl),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbgnrl),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbgnrl),
            "::",
            stringify!(sgnal)
        )
    );
}
pub type IODBGNRL = iodbgnrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbgnrl2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub sgnal: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbgnrl2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbgnrl2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbgnrl2>(),
        6usize,
        concat!("Size of: ", stringify!(iodbgnrl2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbgnrl2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbgnrl2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbgnrl2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbgnrl2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbgnrl2),
            "::",
            stringify!(sgnal)
        )
    );
}
pub type IODBGNRL2 = iodbgnrl2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrdna {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub sgnl1_name: [::std::os::raw::c_char; 9usize],
    pub sgnl2_name: [::std::os::raw::c_char; 9usize],
    pub sgnl3_name: [::std::os::raw::c_char; 9usize],
    pub sgnl4_name: [::std::os::raw::c_char; 9usize],
    pub sgnl5_name: [::std::os::raw::c_char; 9usize],
    pub sgnl6_name: [::std::os::raw::c_char; 9usize],
    pub sgnl7_name: [::std::os::raw::c_char; 9usize],
    pub sgnl8_name: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_iodbrdna() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrdna> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrdna>(),
        76usize,
        concat!("Size of: ", stringify!(iodbrdna))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrdna>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrdna))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl1_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl1_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl2_name) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl2_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl3_name) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl3_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl4_name) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl4_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl5_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl5_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl6_name) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl6_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl7_name) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl7_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl8_name) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna),
            "::",
            stringify!(sgnl8_name)
        )
    );
}
pub type IODBRDNA = iodbrdna;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrdna2 {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub sgnl1_name: [::std::os::raw::c_char; 9usize],
    pub sgnl2_name: [::std::os::raw::c_char; 9usize],
    pub sgnl3_name: [::std::os::raw::c_char; 9usize],
    pub sgnl4_name: [::std::os::raw::c_char; 9usize],
    pub sgnl5_name: [::std::os::raw::c_char; 9usize],
    pub sgnl6_name: [::std::os::raw::c_char; 9usize],
    pub sgnl7_name: [::std::os::raw::c_char; 9usize],
    pub sgnl8_name: [::std::os::raw::c_char; 9usize],
    pub sgnl9_name: [::std::os::raw::c_char; 9usize],
    pub sgnl10_name: [::std::os::raw::c_char; 9usize],
    pub sgnl11_name: [::std::os::raw::c_char; 9usize],
    pub sgnl12_name: [::std::os::raw::c_char; 9usize],
    pub sgnl13_name: [::std::os::raw::c_char; 9usize],
    pub sgnl14_name: [::std::os::raw::c_char; 9usize],
    pub sgnl15_name: [::std::os::raw::c_char; 9usize],
    pub sgnl16_name: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_iodbrdna2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrdna2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrdna2>(),
        148usize,
        concat!("Size of: ", stringify!(iodbrdna2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrdna2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrdna2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl1_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl1_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl2_name) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl2_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl3_name) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl3_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl4_name) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl4_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl5_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl5_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl6_name) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl6_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl7_name) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl7_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl8_name) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl8_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl9_name) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl9_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl10_name) as usize - ptr as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl10_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl11_name) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl11_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl12_name) as usize - ptr as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl12_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl13_name) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl13_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl14_name) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl14_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl15_name) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl15_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl16_name) as usize - ptr as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrdna2),
            "::",
            stringify!(sgnl16_name)
        )
    );
}
pub type IODBRDNA2 = iodbrdna2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odberr {
    pub err_no: ::std::os::raw::c_short,
    pub err_dtno: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odberr() {
    const UNINIT: ::std::mem::MaybeUninit<odberr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odberr>(),
        4usize,
        concat!("Size of: ", stringify!(odberr))
    );
    assert_eq!(
        ::std::mem::align_of::<odberr>(),
        2usize,
        concat!("Alignment of ", stringify!(odberr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odberr),
            "::",
            stringify!(err_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_dtno) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odberr),
            "::",
            stringify!(err_dtno)
        )
    );
}
pub type ODBERR = odberr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbparaif {
    pub info_no: ::std::os::raw::c_ushort,
    pub prev_no: ::std::os::raw::c_short,
    pub next_no: ::std::os::raw::c_short,
    pub info: [odbparaif__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbparaif__bindgen_ty_1 {
    pub prm_no: ::std::os::raw::c_short,
    pub prm_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbparaif__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbparaif__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbparaif__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbparaif__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbparaif__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbparaif__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif__bindgen_ty_1),
            "::",
            stringify!(prm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif__bindgen_ty_1),
            "::",
            stringify!(prm_type)
        )
    );
}
#[test]
fn bindgen_test_layout_odbparaif() {
    const UNINIT: ::std::mem::MaybeUninit<odbparaif> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbparaif>(),
        46usize,
        concat!("Size of: ", stringify!(odbparaif))
    );
    assert_eq!(
        ::std::mem::align_of::<odbparaif>(),
        2usize,
        concat!("Alignment of ", stringify!(odbparaif))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif),
            "::",
            stringify!(info_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif),
            "::",
            stringify!(prev_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif),
            "::",
            stringify!(next_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBPARAIF = odbparaif;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsetif {
    pub info_no: ::std::os::raw::c_ushort,
    pub prev_no: ::std::os::raw::c_short,
    pub next_no: ::std::os::raw::c_short,
    pub info: [odbsetif__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsetif__bindgen_ty_1 {
    pub set_no: ::std::os::raw::c_short,
    pub set_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsetif__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbsetif__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsetif__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbsetif__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsetif__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsetif__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetif__bindgen_ty_1),
            "::",
            stringify!(set_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetif__bindgen_ty_1),
            "::",
            stringify!(set_type)
        )
    );
}
#[test]
fn bindgen_test_layout_odbsetif() {
    const UNINIT: ::std::mem::MaybeUninit<odbsetif> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsetif>(),
        46usize,
        concat!("Size of: ", stringify!(odbsetif))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsetif>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsetif))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetif),
            "::",
            stringify!(info_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetif),
            "::",
            stringify!(prev_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetif),
            "::",
            stringify!(next_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetif),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBSETIF = odbsetif;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdiagif {
    pub info_no: ::std::os::raw::c_ushort,
    pub prev_no: ::std::os::raw::c_short,
    pub next_no: ::std::os::raw::c_short,
    pub info: [odbdiagif__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdiagif__bindgen_ty_1 {
    pub diag_no: ::std::os::raw::c_short,
    pub diag_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbdiagif__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdiagif__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdiagif__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbdiagif__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdiagif__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbdiagif__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diag_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagif__bindgen_ty_1),
            "::",
            stringify!(diag_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diag_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagif__bindgen_ty_1),
            "::",
            stringify!(diag_type)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdiagif() {
    const UNINIT: ::std::mem::MaybeUninit<odbdiagif> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdiagif>(),
        46usize,
        concat!("Size of: ", stringify!(odbdiagif))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdiagif>(),
        2usize,
        concat!("Alignment of ", stringify!(odbdiagif))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagif),
            "::",
            stringify!(info_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagif),
            "::",
            stringify!(prev_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagif),
            "::",
            stringify!(next_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagif),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBDIAGIF = odbdiagif;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbparaif2 {
    pub prm_no: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_short,
    pub array: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
    pub dim: ::std::os::raw::c_short,
    pub input: ::std::os::raw::c_short,
    pub display: ::std::os::raw::c_short,
    pub others: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbparaif2() {
    const UNINIT: ::std::mem::MaybeUninit<odbparaif2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbparaif2>(),
        16usize,
        concat!("Size of: ", stringify!(odbparaif2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbparaif2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbparaif2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(prm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).others) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparaif2),
            "::",
            stringify!(others)
        )
    );
}
pub type ODBPARAIF2 = odbparaif2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbparanum {
    pub para_min: ::std::os::raw::c_ushort,
    pub para_max: ::std::os::raw::c_ushort,
    pub total_no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbparanum() {
    const UNINIT: ::std::mem::MaybeUninit<odbparanum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbparanum>(),
        6usize,
        concat!("Size of: ", stringify!(odbparanum))
    );
    assert_eq!(
        ::std::mem::align_of::<odbparanum>(),
        2usize,
        concat!("Alignment of ", stringify!(odbparanum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparanum),
            "::",
            stringify!(para_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparanum),
            "::",
            stringify!(para_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbparanum),
            "::",
            stringify!(total_no)
        )
    );
}
pub type ODBPARANUM = odbparanum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsetnum {
    pub set_min: ::std::os::raw::c_ushort,
    pub set_max: ::std::os::raw::c_ushort,
    pub total_no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbsetnum() {
    const UNINIT: ::std::mem::MaybeUninit<odbsetnum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsetnum>(),
        6usize,
        concat!("Size of: ", stringify!(odbsetnum))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsetnum>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsetnum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetnum),
            "::",
            stringify!(set_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetnum),
            "::",
            stringify!(set_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsetnum),
            "::",
            stringify!(total_no)
        )
    );
}
pub type ODBSETNUM = odbsetnum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdiagnum {
    pub diag_min: ::std::os::raw::c_ushort,
    pub diag_max: ::std::os::raw::c_ushort,
    pub total_no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbdiagnum() {
    const UNINIT: ::std::mem::MaybeUninit<odbdiagnum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdiagnum>(),
        6usize,
        concat!("Size of: ", stringify!(odbdiagnum))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdiagnum>(),
        2usize,
        concat!("Alignment of ", stringify!(odbdiagnum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diag_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagnum),
            "::",
            stringify!(diag_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diag_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagnum),
            "::",
            stringify!(diag_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdiagnum),
            "::",
            stringify!(total_no)
        )
    );
}
pub type ODBDIAGNUM = odbdiagnum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfinfo {
    pub slotname: [::std::os::raw::c_char; 12usize],
    pub fromnum: ::std::os::raw::c_long,
    pub info: [odbfinfo__bindgen_ty_1; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfinfo__bindgen_ty_1 {
    pub sysname: [::std::os::raw::c_char; 12usize],
    pub fromsize: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbfinfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbfinfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfinfo__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(odbfinfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfinfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfinfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinfo__bindgen_ty_1),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinfo__bindgen_ty_1),
            "::",
            stringify!(fromsize)
        )
    );
}
#[test]
fn bindgen_test_layout_odbfinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbfinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfinfo>(),
        792usize,
        concat!("Size of: ", stringify!(odbfinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinfo),
            "::",
            stringify!(slotname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinfo),
            "::",
            stringify!(fromnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinfo),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBFINFO = odbfinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfinform {
    pub slotno: ::std::os::raw::c_long,
    pub slotname: [::std::os::raw::c_char; 12usize],
    pub fromnum: ::std::os::raw::c_long,
    pub info: [odbfinform__bindgen_ty_1; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfinform__bindgen_ty_1 {
    pub sysname: [::std::os::raw::c_char; 12usize],
    pub fromsize: ::std::os::raw::c_long,
    pub fromattrib: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbfinform__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbfinform__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfinform__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(odbfinform__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfinform__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfinform__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform__bindgen_ty_1),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform__bindgen_ty_1),
            "::",
            stringify!(fromsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromattrib) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform__bindgen_ty_1),
            "::",
            stringify!(fromattrib)
        )
    );
}
#[test]
fn bindgen_test_layout_odbfinform() {
    const UNINIT: ::std::mem::MaybeUninit<odbfinform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfinform>(),
        4128usize,
        concat!("Size of: ", stringify!(odbfinform))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfinform>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfinform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform),
            "::",
            stringify!(slotno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform),
            "::",
            stringify!(slotname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fromnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform),
            "::",
            stringify!(fromnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfinform),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBFINFORM = odbfinform;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsinfo {
    pub sramnum: ::std::os::raw::c_long,
    pub info: [odbsinfo__bindgen_ty_1; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsinfo__bindgen_ty_1 {
    pub sramname: [::std::os::raw::c_char; 12usize],
    pub sramsize: ::std::os::raw::c_long,
    pub divnumber: ::std::os::raw::c_short,
    pub fname: [[::std::os::raw::c_char; 16usize]; 6usize],
}
#[test]
fn bindgen_test_layout_odbsinfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbsinfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsinfo__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(odbsinfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsinfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsinfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sramname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsinfo__bindgen_ty_1),
            "::",
            stringify!(sramname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sramsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsinfo__bindgen_ty_1),
            "::",
            stringify!(sramsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).divnumber) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsinfo__bindgen_ty_1),
            "::",
            stringify!(divnumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsinfo__bindgen_ty_1),
            "::",
            stringify!(fname)
        )
    );
}
#[test]
fn bindgen_test_layout_odbsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsinfo>(),
        1032usize,
        concat!("Size of: ", stringify!(odbsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sramnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsinfo),
            "::",
            stringify!(sramnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsinfo),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBSINFO = odbsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sramaddr {
    pub type_: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_long,
    pub offset: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_sramaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sramaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sramaddr>(),
        24usize,
        concat!("Size of: ", stringify!(sramaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sramaddr>(),
        8usize,
        concat!("Alignment of ", stringify!(sramaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sramaddr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sramaddr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sramaddr),
            "::",
            stringify!(offset)
        )
    );
}
pub type SRAMADDR = sramaddr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdsdir {
    pub file_num: ::std::os::raw::c_long,
    pub remainder: ::std::os::raw::c_long,
    pub data_num: ::std::os::raw::c_short,
    pub data: [odbdsdir__bindgen_ty_1; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdsdir__bindgen_ty_1 {
    pub file_name: [::std::os::raw::c_char; 16usize],
    pub comment: [::std::os::raw::c_char; 64usize],
    pub size: ::std::os::raw::c_long,
    pub date: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_odbdsdir__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdsdir__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdsdir__bindgen_ty_1>(),
        104usize,
        concat!("Size of: ", stringify!(odbdsdir__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdsdir__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdsdir__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir__bindgen_ty_1),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir__bindgen_ty_1),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir__bindgen_ty_1),
            "::",
            stringify!(date)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdsdir() {
    const UNINIT: ::std::mem::MaybeUninit<odbdsdir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdsdir>(),
        3352usize,
        concat!("Size of: ", stringify!(odbdsdir))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdsdir>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdsdir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir),
            "::",
            stringify!(file_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remainder) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir),
            "::",
            stringify!(remainder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir),
            "::",
            stringify!(data_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsdir),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBDSDIR = odbdsdir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbdsset {
    pub host_ip: [::std::os::raw::c_char; 16usize],
    pub host_uname: [::std::os::raw::c_char; 32usize],
    pub host_passwd: [::std::os::raw::c_char; 32usize],
    pub host_dir: [::std::os::raw::c_char; 128usize],
    pub dtsv_mac: [::std::os::raw::c_char; 13usize],
    pub dtsv_ip: [::std::os::raw::c_char; 16usize],
    pub dtsv_mask: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_iodbdsset() {
    const UNINIT: ::std::mem::MaybeUninit<iodbdsset> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbdsset>(),
        253usize,
        concat!("Size of: ", stringify!(iodbdsset))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbdsset>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbdsset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(host_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_uname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(host_uname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_passwd) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(host_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_dir) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(host_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtsv_mac) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(dtsv_mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtsv_ip) as usize - ptr as usize },
        221usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(dtsv_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtsv_mask) as usize - ptr as usize },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsset),
            "::",
            stringify!(dtsv_mask)
        )
    );
}
pub type IODBDSSET = iodbdsset;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdsmnt {
    pub empty_cnt: ::std::os::raw::c_long,
    pub total_size: ::std::os::raw::c_long,
    pub read_ptr: ::std::os::raw::c_long,
    pub write_ptr: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdsmnt() {
    const UNINIT: ::std::mem::MaybeUninit<odbdsmnt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdsmnt>(),
        32usize,
        concat!("Size of: ", stringify!(odbdsmnt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdsmnt>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdsmnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty_cnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsmnt),
            "::",
            stringify!(empty_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsmnt),
            "::",
            stringify!(total_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsmnt),
            "::",
            stringify!(read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_ptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdsmnt),
            "::",
            stringify!(write_ptr)
        )
    );
}
pub type ODBDSMNT = odbdsmnt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpser {
    pub poserr1: ::std::os::raw::c_long,
    pub poserr2: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbpser() {
    const UNINIT: ::std::mem::MaybeUninit<odbpser> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpser>(),
        16usize,
        concat!("Size of: ", stringify!(odbpser))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpser>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpser))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poserr1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpser),
            "::",
            stringify!(poserr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poserr2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpser),
            "::",
            stringify!(poserr2)
        )
    );
}
pub type ODBPSER = odbpser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbspdi {
    pub sgnl1: ::std::os::raw::c_char,
    pub sgnl2: ::std::os::raw::c_char,
    pub sgnl3: ::std::os::raw::c_char,
    pub sgnl4: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbspdi() {
    const UNINIT: ::std::mem::MaybeUninit<odbspdi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbspdi>(),
        4usize,
        concat!("Size of: ", stringify!(odbspdi))
    );
    assert_eq!(
        ::std::mem::align_of::<odbspdi>(),
        1usize,
        concat!("Alignment of ", stringify!(odbspdi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdi),
            "::",
            stringify!(sgnl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdi),
            "::",
            stringify!(sgnl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdi),
            "::",
            stringify!(sgnl3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl4) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdi),
            "::",
            stringify!(sgnl4)
        )
    );
}
pub type ODBSPDI = odbspdi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbspdo {
    pub sgnl1: ::std::os::raw::c_char,
    pub sgnl2: ::std::os::raw::c_char,
    pub sgnl3: ::std::os::raw::c_char,
    pub sgnl4: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbspdo() {
    const UNINIT: ::std::mem::MaybeUninit<odbspdo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbspdo>(),
        4usize,
        concat!("Size of: ", stringify!(odbspdo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbspdo>(),
        1usize,
        concat!("Alignment of ", stringify!(odbspdo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdo),
            "::",
            stringify!(sgnl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdo),
            "::",
            stringify!(sgnl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdo),
            "::",
            stringify!(sgnl3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl4) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdo),
            "::",
            stringify!(sgnl4)
        )
    );
}
pub type ODBSPDO = odbspdo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsvfback {
    pub dummy: ::std::os::raw::c_short,
    pub dtype: ::std::os::raw::c_short,
    pub fback: [::std::os::raw::c_long; 32usize],
    pub afback: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbsvfback() {
    const UNINIT: ::std::mem::MaybeUninit<odbsvfback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsvfback>(),
        520usize,
        concat!("Size of: ", stringify!(odbsvfback))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsvfback>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsvfback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsvfback),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtype) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsvfback),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsvfback),
            "::",
            stringify!(fback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afback) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsvfback),
            "::",
            stringify!(afback)
        )
    );
}
pub type ODBSVFBACK = odbsvfback;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbwave {
    pub condition: ::std::os::raw::c_short,
    pub trg_adr: ::std::os::raw::c_char,
    pub trg_bit: ::std::os::raw::c_char,
    pub trg_no: ::std::os::raw::c_short,
    pub delay: ::std::os::raw::c_short,
    pub t_range: ::std::os::raw::c_short,
    pub ch: [iodbwave__bindgen_ty_1; 12usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbwave__bindgen_ty_1 {
    pub kind: ::std::os::raw::c_short,
    pub u: iodbwave__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbwave__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_long,
    pub io: iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwave__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwave__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwave__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwave__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwave__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwave__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwave__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbwave__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwave__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwave__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwave() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwave> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwave>(),
        208usize,
        concat!("Size of: ", stringify!(iodbwave))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwave>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwave))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_adr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(trg_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_bit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(trg_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(trg_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_range) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(t_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwave),
            "::",
            stringify!(ch)
        )
    );
}
pub type IODBWAVE = iodbwave;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbwvprm {
    pub condition: ::std::os::raw::c_short,
    pub trg_adr: ::std::os::raw::c_char,
    pub trg_bit: ::std::os::raw::c_char,
    pub trg_no: ::std::os::raw::c_short,
    pub reserve1: ::std::os::raw::c_short,
    pub delay: ::std::os::raw::c_long,
    pub t_range: ::std::os::raw::c_long,
    pub ch: [iodbwvprm__bindgen_ty_1; 12usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbwvprm__bindgen_ty_1 {
    pub kind: ::std::os::raw::c_short,
    pub u: iodbwvprm__bindgen_ty_1__bindgen_ty_1,
    pub reserve2: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbwvprm__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_long,
    pub io: iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwvprm__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwvprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(iodbwvprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwvprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm__bindgen_ty_1),
            "::",
            stringify!(reserve2)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwvprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm>(),
        312usize,
        concat!("Size of: ", stringify!(iodbwvprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwvprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_adr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(trg_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_bit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(trg_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(trg_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_range) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(t_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm),
            "::",
            stringify!(ch)
        )
    );
}
pub type IODBWVPRM = iodbwvprm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbwvprm3 {
    pub condition: ::std::os::raw::c_short,
    pub trg_unittype: ::std::os::raw::c_short,
    pub trg_adr: ::std::os::raw::c_char,
    pub trg_bit: ::std::os::raw::c_char,
    pub trg_no: ::std::os::raw::c_short,
    pub alm_kind: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub alm_axis: ::std::os::raw::c_short,
    pub reserve1: ::std::os::raw::c_short,
    pub delay: ::std::os::raw::c_long,
    pub t_range: ::std::os::raw::c_long,
    pub wav_cycle: ::std::os::raw::c_short,
    pub dio_cycle: ::std::os::raw::c_short,
    pub ch: [iodbwvprm3__bindgen_ty_1; 40usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbwvprm3__bindgen_ty_1 {
    pub kind: ::std::os::raw::c_short,
    pub reserve2: ::std::os::raw::c_short,
    pub u: iodbwvprm3__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbwvprm3__bindgen_ty_1__bindgen_ty_1 {
    pub ax: iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub io: iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_long,
    pub reserve3: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserve3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub unittype: ::std::os::raw::c_short,
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
    pub reserve3: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unittype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserve3)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwvprm3__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm3__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm3__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm3__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwvprm3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm3__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(iodbwvprm3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm3__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwvprm3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbwvprm3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwvprm3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwvprm3>(),
        1000usize,
        concat!("Size of: ", stringify!(iodbwvprm3))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwvprm3>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwvprm3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_unittype) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(trg_unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_adr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(trg_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_bit) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(trg_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_no) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(trg_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(alm_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_axis) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(alm_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_range) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(t_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wav_cycle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(wav_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dio_cycle) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(dio_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwvprm3),
            "::",
            stringify!(ch)
        )
    );
}
pub type IODBWVPRM3 = iodbwvprm3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbwvdt {
    pub channel: ::std::os::raw::c_short,
    pub kind: ::std::os::raw::c_short,
    pub u: odbwvdt__bindgen_ty_1,
    pub year: ::std::os::raw::c_char,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub t_cycle: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_short; 8192usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbwvdt__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_short,
    pub io: odbwvdt__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwvdt__bindgen_ty_1__bindgen_ty_1 {
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbwvdt__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbwvdt__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbwvdt__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
}
#[test]
fn bindgen_test_layout_odbwvdt__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbwvdt__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbwvdt__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[test]
fn bindgen_test_layout_odbwvdt() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt>(),
        16400usize,
        concat!("Size of: ", stringify!(odbwvdt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt>(),
        2usize,
        concat!("Alignment of ", stringify!(odbwvdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_cycle) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(t_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBWVDT = odbwvdt;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbwvdt2 {
    pub channel: ::std::os::raw::c_short,
    pub u: odbwvdt2__bindgen_ty_1,
    pub start: odbwvdt2__bindgen_ty_2,
    pub stop: odbwvdt2__bindgen_ty_2,
    pub t_cycle: ::std::os::raw::c_short,
    pub adjust: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_short; 8192usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbwvdt2__bindgen_ty_1 {
    pub w: odbwvdt2__bindgen_ty_1__bindgen_ty_1,
    pub io: odbwvdt2__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwvdt2__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_short,
    pub kind: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbwvdt2__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt2__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt2__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt2__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwvdt2__bindgen_ty_1__bindgen_ty_2 {
    pub no: ::std::os::raw::c_short,
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbwvdt2__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt2__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt2__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt2__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bit)
        )
    );
}
#[test]
fn bindgen_test_layout_odbwvdt2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbwvdt2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbwvdt2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwvdt2__bindgen_ty_2 {
    pub year: ::std::os::raw::c_char,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbwvdt2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt2__bindgen_ty_2>(),
        6usize,
        concat!("Size of: ", stringify!(odbwvdt2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt2__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(odbwvdt2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_2),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_2),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_2),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_2),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_2),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2__bindgen_ty_2),
            "::",
            stringify!(second)
        )
    );
}
#[test]
fn bindgen_test_layout_odbwvdt2() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt2>(),
        16406usize,
        concat!("Size of: ", stringify!(odbwvdt2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbwvdt2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_cycle) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(t_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjust) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(adjust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt2),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBWVDT2 = odbwvdt2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbwvdt3 {
    pub channel: ::std::os::raw::c_short,
    pub kind: ::std::os::raw::c_short,
    pub u: odbwvdt3__bindgen_ty_1,
    pub year: ::std::os::raw::c_char,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub t_cycle: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_short; 8192usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbwvdt3__bindgen_ty_1 {
    pub ax: odbwvdt3__bindgen_ty_1__bindgen_ty_1,
    pub io: odbwvdt3__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwvdt3__bindgen_ty_1__bindgen_ty_1 {
    pub axis: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout_odbwvdt3__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt3__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt3__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt3__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserve)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwvdt3__bindgen_ty_1__bindgen_ty_2 {
    pub unittype: ::std::os::raw::c_short,
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbwvdt3__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt3__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt3__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt3__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unittype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_odbwvdt3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt3__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(odbwvdt3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbwvdt3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1),
            "::",
            stringify!(ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[test]
fn bindgen_test_layout_odbwvdt3() {
    const UNINIT: ::std::mem::MaybeUninit<odbwvdt3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwvdt3>(),
        16404usize,
        concat!("Size of: ", stringify!(odbwvdt3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwvdt3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbwvdt3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_cycle) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(t_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwvdt3),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBWVDT3 = odbwvdt3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbrmtprm {
    pub condition: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub trg: iodbrmtprm__bindgen_ty_1,
    pub delay: ::std::os::raw::c_long,
    pub wv_intrvl: ::std::os::raw::c_short,
    pub io_intrvl: ::std::os::raw::c_short,
    pub kind1: ::std::os::raw::c_short,
    pub kind2: ::std::os::raw::c_short,
    pub smpl: [iodbrmtprm__bindgen_ty_2; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbrmtprm__bindgen_ty_1 {
    pub alm: iodbrmtprm__bindgen_ty_1__bindgen_ty_1,
    pub io: iodbrmtprm__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrmtprm__bindgen_ty_1__bindgen_ty_1 {
    pub no: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbrmtprm__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrmtprm__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrmtprm__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrmtprm__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrmtprm__bindgen_ty_1__bindgen_ty_2 {
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbrmtprm__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrmtprm__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrmtprm__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrmtprm__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(no)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbrmtprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrmtprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrmtprm__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(iodbrmtprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrmtprm__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrmtprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1),
            "::",
            stringify!(alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_1),
            "::",
            stringify!(io)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrmtprm__bindgen_ty_2 {
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbrmtprm__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrmtprm__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrmtprm__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(iodbrmtprm__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrmtprm__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrmtprm__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_2),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_2),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm__bindgen_ty_2),
            "::",
            stringify!(no)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbrmtprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrmtprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrmtprm>(),
        152usize,
        concat!("Size of: ", stringify!(iodbrmtprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrmtprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrmtprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(trg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wv_intrvl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(wv_intrvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_intrvl) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(io_intrvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(kind1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(kind2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smpl) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrmtprm),
            "::",
            stringify!(smpl)
        )
    );
}
pub type IODBRMTPRM = iodbrmtprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrmtdt {
    pub channel: ::std::os::raw::c_short,
    pub kind: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_char,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub t_intrvl: ::std::os::raw::c_short,
    pub trg_data: ::std::os::raw::c_short,
    pub ins_ptr: ::std::os::raw::c_long,
    pub t_delta: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_short; 1917usize],
}
#[test]
fn bindgen_test_layout_odbrmtdt() {
    const UNINIT: ::std::mem::MaybeUninit<odbrmtdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrmtdt>(),
        3864usize,
        concat!("Size of: ", stringify!(odbrmtdt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrmtdt>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrmtdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_intrvl) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(t_intrvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trg_data) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(trg_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(ins_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_delta) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(t_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrmtdt),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBRMTDT = odbrmtdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsigad {
    pub adr: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbsigad() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsigad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsigad>(),
        6usize,
        concat!("Size of: ", stringify!(iodbsigad))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsigad>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsigad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsigad),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsigad),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsigad),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsigad),
            "::",
            stringify!(size)
        )
    );
}
pub type IODBSIGAD = iodbsigad;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmgrp {
    pub m_code: ::std::os::raw::c_long,
    pub grp_no: ::std::os::raw::c_short,
    pub m_name: [::std::os::raw::c_char; 21usize],
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbmgrp() {
    const UNINIT: ::std::mem::MaybeUninit<odbmgrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmgrp>(),
        32usize,
        concat!("Size of: ", stringify!(odbmgrp))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmgrp>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmgrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmgrp),
            "::",
            stringify!(m_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmgrp),
            "::",
            stringify!(grp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_name) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmgrp),
            "::",
            stringify!(m_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmgrp),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBMGRP = odbmgrp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbmgrp {
    pub s_no: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub num: ::std::os::raw::c_short,
    pub group: [::std::os::raw::c_short; 500usize],
}
#[test]
fn bindgen_test_layout_idbmgrp() {
    const UNINIT: ::std::mem::MaybeUninit<idbmgrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbmgrp>(),
        1006usize,
        concat!("Size of: ", stringify!(idbmgrp))
    );
    assert_eq!(
        ::std::mem::align_of::<idbmgrp>(),
        2usize,
        concat!("Alignment of ", stringify!(idbmgrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbmgrp),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbmgrp),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbmgrp),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(idbmgrp),
            "::",
            stringify!(group)
        )
    );
}
pub type IDBMGRP = idbmgrp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbexem {
    pub grp_no: ::std::os::raw::c_short,
    pub mem_no: ::std::os::raw::c_short,
    pub m_code: [odbexem__bindgen_ty_1; 5usize],
    pub m_name: [::std::os::raw::c_char; 21usize],
    pub dummy: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbexem__bindgen_ty_1 {
    pub no: ::std::os::raw::c_long,
    pub flag: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbexem__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbexem__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbexem__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(odbexem__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbexem__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbexem__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem__bindgen_ty_1),
            "::",
            stringify!(flag)
        )
    );
}
#[test]
fn bindgen_test_layout_odbexem() {
    const UNINIT: ::std::mem::MaybeUninit<odbexem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbexem>(),
        112usize,
        concat!("Size of: ", stringify!(odbexem))
    );
    assert_eq!(
        ::std::mem::align_of::<odbexem>(),
        8usize,
        concat!("Alignment of ", stringify!(odbexem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem),
            "::",
            stringify!(grp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem),
            "::",
            stringify!(mem_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem),
            "::",
            stringify!(m_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem),
            "::",
            stringify!(m_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexem),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBEXEM = odbexem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrstrm {
    pub grp_no: ::std::os::raw::c_short,
    pub mem_no: ::std::os::raw::c_short,
    pub m_code: [odbrstrm__bindgen_ty_1; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrstrm__bindgen_ty_1 {
    pub no: ::std::os::raw::c_long,
    pub flag: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbrstrm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbrstrm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrstrm__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(odbrstrm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrstrm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrstrm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstrm__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstrm__bindgen_ty_1),
            "::",
            stringify!(flag)
        )
    );
}
#[test]
fn bindgen_test_layout_odbrstrm() {
    const UNINIT: ::std::mem::MaybeUninit<odbrstrm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrstrm>(),
        88usize,
        concat!("Size of: ", stringify!(odbrstrm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrstrm>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrstrm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstrm),
            "::",
            stringify!(grp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstrm),
            "::",
            stringify!(mem_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstrm),
            "::",
            stringify!(m_code)
        )
    );
}
pub type ODBRSTRM = odbrstrm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptime {
    pub num: ::std::os::raw::c_short,
    pub data: [odbptime__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptime__bindgen_ty_1 {
    pub prg_no: ::std::os::raw::c_long,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbptime__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptime__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptime__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(odbptime__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptime__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptime__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime__bindgen_ty_1),
            "::",
            stringify!(prg_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptime() {
    const UNINIT: ::std::mem::MaybeUninit<odbptime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptime>(),
        168usize,
        concat!("Size of: ", stringify!(odbptime))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptime>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBPTIME = odbptime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptime3 {
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbptime3() {
    const UNINIT: ::std::mem::MaybeUninit<odbptime3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptime3>(),
        8usize,
        concat!("Size of: ", stringify!(odbptime3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptime3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbptime3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime3),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime3),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime3),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime3),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBPTIME3 = odbptime3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdirtm {
    pub prg_no: ::std::os::raw::c_long,
    pub comment: [::std::os::raw::c_char; 51usize],
    pub cuttime: [::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout_prgdirtm() {
    const UNINIT: ::std::mem::MaybeUninit<prgdirtm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdirtm>(),
        72usize,
        concat!("Size of: ", stringify!(prgdirtm))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdirtm>(),
        8usize,
        concat!("Alignment of ", stringify!(prgdirtm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdirtm),
            "::",
            stringify!(prg_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdirtm),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cuttime) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdirtm),
            "::",
            stringify!(cuttime)
        )
    );
}
pub type PRGDIRTM = prgdirtm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdir2 {
    pub number: ::std::os::raw::c_short,
    pub length: ::std::os::raw::c_long,
    pub comment: [::std::os::raw::c_char; 51usize],
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_prgdir2() {
    const UNINIT: ::std::mem::MaybeUninit<prgdir2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdir2>(),
        72usize,
        concat!("Size of: ", stringify!(prgdir2))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdir2>(),
        8usize,
        concat!("Alignment of ", stringify!(prgdir2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2),
            "::",
            stringify!(dummy)
        )
    );
}
pub type PRGDIR2 = prgdir2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdir3 {
    pub number: ::std::os::raw::c_long,
    pub length: ::std::os::raw::c_long,
    pub page: ::std::os::raw::c_long,
    pub comment: [::std::os::raw::c_char; 52usize],
    pub mdate: prgdir3__bindgen_ty_1,
    pub cdate: prgdir3__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdir3__bindgen_ty_1 {
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_prgdir3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<prgdir3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdir3__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(prgdir3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdir3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(prgdir3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdir3__bindgen_ty_2 {
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_prgdir3__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<prgdir3__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdir3__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(prgdir3__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdir3__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(prgdir3__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_2),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_2),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_2),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_2),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_2),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3__bindgen_ty_2),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_prgdir3() {
    const UNINIT: ::std::mem::MaybeUninit<prgdir3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdir3>(),
        104usize,
        concat!("Size of: ", stringify!(prgdir3))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdir3>(),
        8usize,
        concat!("Alignment of ", stringify!(prgdir3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3),
            "::",
            stringify!(page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdate) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3),
            "::",
            stringify!(mdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdate) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir3),
            "::",
            stringify!(cdate)
        )
    );
}
pub type PRGDIR3 = prgdir3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbcprm {
    pub NcApli: [::std::os::raw::c_char; 65usize],
    pub Dummy1: ::std::os::raw::c_char,
    pub HostApli: [::std::os::raw::c_char; 65usize],
    pub Dummy2: ::std::os::raw::c_char,
    pub StatPstv: ::std::os::raw::c_ulong,
    pub StatNgtv: ::std::os::raw::c_ulong,
    pub Statmask: ::std::os::raw::c_ulong,
    pub AlarmStat: ::std::os::raw::c_ulong,
    pub PsclHaddr: ::std::os::raw::c_ulong,
    pub PsclLaddr: ::std::os::raw::c_ulong,
    pub SvcMode1: ::std::os::raw::c_ushort,
    pub SvcMode2: ::std::os::raw::c_ushort,
    pub FileTout: ::std::os::raw::c_long,
    pub RemTout: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbcprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbcprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbcprm>(),
        208usize,
        concat!("Size of: ", stringify!(iodbcprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbcprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbcprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NcApli) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(NcApli)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dummy1) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(Dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostApli) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(HostApli)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dummy2) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(Dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatPstv) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(StatPstv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatNgtv) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(StatNgtv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Statmask) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(Statmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AlarmStat) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(AlarmStat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PsclHaddr) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(PsclHaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PsclLaddr) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(PsclLaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SvcMode1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(SvcMode1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SvcMode2) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(SvcMode2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileTout) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(FileTout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RemTout) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcprm),
            "::",
            stringify!(RemTout)
        )
    );
}
pub type IODBCPRM = iodbcprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbint {
    pub datano_s: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 24usize],
}
#[test]
fn bindgen_test_layout_iodbint() {
    const UNINIT: ::std::mem::MaybeUninit<iodbint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbint>(),
        200usize,
        concat!("Size of: ", stringify!(iodbint))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbint>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbint),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbint),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbint),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbint),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBINT = iodbint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwcsf {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_iodbwcsf() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwcsf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwcsf>(),
        264usize,
        concat!("Size of: ", stringify!(iodbwcsf))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwcsf>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwcsf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwcsf),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBWCSF = iodbwcsf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbomif {
    pub om_max: ::std::os::raw::c_ushort,
    pub om_sum: ::std::os::raw::c_ushort,
    pub om_char: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbomif() {
    const UNINIT: ::std::mem::MaybeUninit<odbomif> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbomif>(),
        6usize,
        concat!("Size of: ", stringify!(odbomif))
    );
    assert_eq!(
        ::std::mem::align_of::<odbomif>(),
        2usize,
        concat!("Alignment of ", stringify!(odbomif))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_max) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomif),
            "::",
            stringify!(om_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_sum) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomif),
            "::",
            stringify!(om_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_char) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomif),
            "::",
            stringify!(om_char)
        )
    );
}
pub type ODBOMIF = odbomif;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbomhis {
    pub om_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub om_msg: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_odbomhis() {
    const UNINIT: ::std::mem::MaybeUninit<odbomhis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbomhis>(),
        270usize,
        concat!("Size of: ", stringify!(odbomhis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbomhis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbomhis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(om_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).om_msg) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbomhis),
            "::",
            stringify!(om_msg)
        )
    );
}
pub type ODBOMHIS = odbomhis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbbto {
    pub datano_s: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub ofs: [::std::os::raw::c_long; 18usize],
}
#[test]
fn bindgen_test_layout_iodbbto() {
    const UNINIT: ::std::mem::MaybeUninit<iodbbto> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbbto>(),
        152usize,
        concat!("Size of: ", stringify!(iodbbto))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbbto>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbbto))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbto),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbto),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbto),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbto),
            "::",
            stringify!(ofs)
        )
    );
}
pub type IODBBTO = iodbbto;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbbtlinf {
    pub ofs_type: ::std::os::raw::c_short,
    pub use_no: ::std::os::raw::c_short,
    pub sub_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbbtlinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbbtlinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbbtlinf>(),
        6usize,
        concat!("Size of: ", stringify!(odbbtlinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbbtlinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbbtlinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbtlinf),
            "::",
            stringify!(ofs_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbtlinf),
            "::",
            stringify!(use_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbtlinf),
            "::",
            stringify!(sub_no)
        )
    );
}
pub type ODBBTLINF = odbbtlinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbbaxis {
    pub flag: ::std::os::raw::c_short,
    pub command: ::std::os::raw::c_short,
    pub speed: ::std::os::raw::c_ushort,
    pub sub_data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbbaxis() {
    const UNINIT: ::std::mem::MaybeUninit<odbbaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbbaxis>(),
        16usize,
        concat!("Size of: ", stringify!(odbbaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbbaxis>(),
        8usize,
        concat!("Alignment of ", stringify!(odbbaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbaxis),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbaxis),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbaxis),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbaxis),
            "::",
            stringify!(sub_data)
        )
    );
}
pub type ODBBAXIS = odbbaxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsyss {
    pub slot_no_p: [::std::os::raw::c_char; 16usize],
    pub slot_no_l: [::std::os::raw::c_char; 16usize],
    pub module_id: [::std::os::raw::c_short; 16usize],
    pub soft_id: [::std::os::raw::c_short; 16usize],
    pub soft_series: [[::std::os::raw::c_char; 5usize]; 16usize],
    pub soft_version: [[::std::os::raw::c_char; 5usize]; 16usize],
    pub soft_inst: ::std::os::raw::c_short,
    pub boot_ser: [::std::os::raw::c_char; 5usize],
    pub boot_ver: [::std::os::raw::c_char; 5usize],
    pub servo_ser: [::std::os::raw::c_char; 5usize],
    pub servo_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_ver: [::std::os::raw::c_char; 5usize],
    pub ladder_ser: [::std::os::raw::c_char; 5usize],
    pub ladder_ver: [::std::os::raw::c_char; 5usize],
    pub mcrlib_ser: [::std::os::raw::c_char; 5usize],
    pub mcrlib_ver: [::std::os::raw::c_char; 5usize],
    pub mcrapl_ser: [::std::os::raw::c_char; 5usize],
    pub mcrapl_ver: [::std::os::raw::c_char; 5usize],
    pub spl1_ser: [::std::os::raw::c_char; 5usize],
    pub spl1_ver: [::std::os::raw::c_char; 5usize],
    pub spl2_ser: [::std::os::raw::c_char; 5usize],
    pub spl2_ver: [::std::os::raw::c_char; 5usize],
    pub spl3_ser: [::std::os::raw::c_char; 5usize],
    pub spl3_ver: [::std::os::raw::c_char; 5usize],
    pub c_exelib_ser: [::std::os::raw::c_char; 5usize],
    pub c_exelib_ver: [::std::os::raw::c_char; 5usize],
    pub c_exeapl_ser: [::std::os::raw::c_char; 5usize],
    pub c_exeapl_ver: [::std::os::raw::c_char; 5usize],
    pub int_vga_ser: [::std::os::raw::c_char; 5usize],
    pub int_vga_ver: [::std::os::raw::c_char; 5usize],
    pub out_vga_ser: [::std::os::raw::c_char; 5usize],
    pub out_vga_ver: [::std::os::raw::c_char; 5usize],
    pub pmm_ser: [::std::os::raw::c_char; 5usize],
    pub pmm_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_mng_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_mng_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_shin_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_shin_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_shout_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_shout_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_c_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_c_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_edit_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_edit_ver: [::std::os::raw::c_char; 5usize],
    pub lddr_mng_ser: [::std::os::raw::c_char; 5usize],
    pub lddr_mng_ver: [::std::os::raw::c_char; 5usize],
    pub lddr_apl_ser: [::std::os::raw::c_char; 5usize],
    pub lddr_apl_ver: [::std::os::raw::c_char; 5usize],
    pub spl4_ser: [::std::os::raw::c_char; 5usize],
    pub spl4_ver: [::std::os::raw::c_char; 5usize],
    pub mcr2_ser: [::std::os::raw::c_char; 5usize],
    pub mcr2_ver: [::std::os::raw::c_char; 5usize],
    pub mcr3_ser: [::std::os::raw::c_char; 5usize],
    pub mcr3_ver: [::std::os::raw::c_char; 5usize],
    pub eth_boot_ser: [::std::os::raw::c_char; 5usize],
    pub eth_boot_ver: [::std::os::raw::c_char; 5usize],
    pub reserve: [[::std::os::raw::c_char; 5usize]; 8usize],
}
#[test]
fn bindgen_test_layout_odbsyss() {
    const UNINIT: ::std::mem::MaybeUninit<odbsyss> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsyss>(),
        548usize,
        concat!("Size of: ", stringify!(odbsyss))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsyss>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsyss))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(slot_no_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no_l) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(slot_no_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(module_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_id) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(soft_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_series) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(soft_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_version) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(soft_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_inst) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(soft_inst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_ser) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(boot_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_ver) as usize - ptr as usize },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(boot_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo_ser) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(servo_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo_ver) as usize - ptr as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(servo_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_ser) as usize - ptr as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_ver) as usize - ptr as usize },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ladder_ser) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(ladder_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ladder_ver) as usize - ptr as usize },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(ladder_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrlib_ser) as usize - ptr as usize },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcrlib_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrlib_ver) as usize - ptr as usize },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcrlib_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrapl_ser) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcrapl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrapl_ver) as usize - ptr as usize },
        313usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcrapl_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl1_ser) as usize - ptr as usize },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl1_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl1_ver) as usize - ptr as usize },
        323usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl1_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl2_ser) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl2_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl2_ver) as usize - ptr as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl2_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl3_ser) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl3_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl3_ver) as usize - ptr as usize },
        343usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl3_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exelib_ser) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(c_exelib_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exelib_ver) as usize - ptr as usize },
        353usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(c_exelib_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exeapl_ser) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(c_exeapl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exeapl_ver) as usize - ptr as usize },
        363usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(c_exeapl_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_vga_ser) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(int_vga_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_vga_ver) as usize - ptr as usize },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(int_vga_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_vga_ser) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(out_vga_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_vga_ver) as usize - ptr as usize },
        383usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(out_vga_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmm_ser) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmm_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmm_ver) as usize - ptr as usize },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmm_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_mng_ser) as usize - ptr as usize },
        398usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_mng_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_mng_ver) as usize - ptr as usize },
        403usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_mng_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shin_ser) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_shin_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shin_ver) as usize - ptr as usize },
        413usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_shin_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shout_ser) as usize - ptr as usize },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_shout_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shout_ver) as usize - ptr as usize },
        423usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_shout_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_c_ser) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_c_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_c_ver) as usize - ptr as usize },
        433usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_c_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_edit_ser) as usize - ptr as usize },
        438usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_edit_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_edit_ver) as usize - ptr as usize },
        443usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(pmc_edit_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_mng_ser) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(lddr_mng_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_mng_ver) as usize - ptr as usize },
        453usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(lddr_mng_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_apl_ser) as usize - ptr as usize },
        458usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(lddr_apl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_apl_ver) as usize - ptr as usize },
        463usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(lddr_apl_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl4_ser) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl4_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl4_ver) as usize - ptr as usize },
        473usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(spl4_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr2_ser) as usize - ptr as usize },
        478usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcr2_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr2_ver) as usize - ptr as usize },
        483usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcr2_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr3_ser) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcr3_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr3_ver) as usize - ptr as usize },
        493usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(mcr3_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eth_boot_ser) as usize - ptr as usize },
        498usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(eth_boot_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eth_boot_ver) as usize - ptr as usize },
        503usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(eth_boot_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBSYSS = odbsyss;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsyss2 {
    pub slot_no_p: [::std::os::raw::c_char; 16usize],
    pub slot_no_l: [::std::os::raw::c_char; 16usize],
    pub module_id: [::std::os::raw::c_short; 16usize],
    pub soft_id: [::std::os::raw::c_short; 16usize],
    pub soft_series: [[::std::os::raw::c_char; 5usize]; 16usize],
    pub soft_version: [[::std::os::raw::c_char; 5usize]; 16usize],
    pub soft_inst: ::std::os::raw::c_short,
    pub boot_ser: [::std::os::raw::c_char; 5usize],
    pub boot_ver: [::std::os::raw::c_char; 5usize],
    pub servo_ser: [::std::os::raw::c_char; 5usize],
    pub servo_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_ver: [::std::os::raw::c_char; 5usize],
    pub ladder_ser: [::std::os::raw::c_char; 5usize],
    pub ladder_ver: [::std::os::raw::c_char; 5usize],
    pub mcrlib_ser: [::std::os::raw::c_char; 5usize],
    pub mcrlib_ver: [::std::os::raw::c_char; 5usize],
    pub mcrapl_ser: [::std::os::raw::c_char; 5usize],
    pub mcrapl_ver: [::std::os::raw::c_char; 5usize],
    pub spl1_ser: [::std::os::raw::c_char; 5usize],
    pub spl1_ver: [::std::os::raw::c_char; 5usize],
    pub spl2_ser: [::std::os::raw::c_char; 5usize],
    pub spl2_ver: [::std::os::raw::c_char; 5usize],
    pub spl3_ser: [::std::os::raw::c_char; 5usize],
    pub spl3_ver: [::std::os::raw::c_char; 5usize],
    pub c_exelib_ser: [::std::os::raw::c_char; 5usize],
    pub c_exelib_ver: [::std::os::raw::c_char; 5usize],
    pub c_exeapl_ser: [::std::os::raw::c_char; 5usize],
    pub c_exeapl_ver: [::std::os::raw::c_char; 5usize],
    pub int_vga_ser: [::std::os::raw::c_char; 5usize],
    pub int_vga_ver: [::std::os::raw::c_char; 5usize],
    pub out_vga_ser: [::std::os::raw::c_char; 5usize],
    pub out_vga_ver: [::std::os::raw::c_char; 5usize],
    pub pmm_ser: [::std::os::raw::c_char; 5usize],
    pub pmm_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_mng_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_mng_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_shin_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_shin_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_shout_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_shout_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_c_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_c_ver: [::std::os::raw::c_char; 5usize],
    pub pmc_edit_ser: [::std::os::raw::c_char; 5usize],
    pub pmc_edit_ver: [::std::os::raw::c_char; 5usize],
    pub lddr_mng_ser: [::std::os::raw::c_char; 5usize],
    pub lddr_mng_ver: [::std::os::raw::c_char; 5usize],
    pub lddr_apl_ser: [::std::os::raw::c_char; 5usize],
    pub lddr_apl_ver: [::std::os::raw::c_char; 5usize],
    pub spl4_ser: [::std::os::raw::c_char; 5usize],
    pub spl4_ver: [::std::os::raw::c_char; 5usize],
    pub mcr2_ser: [::std::os::raw::c_char; 5usize],
    pub mcr2_ver: [::std::os::raw::c_char; 5usize],
    pub mcr3_ser: [::std::os::raw::c_char; 5usize],
    pub mcr3_ver: [::std::os::raw::c_char; 5usize],
    pub eth_boot_ser: [::std::os::raw::c_char; 5usize],
    pub eth_boot_ver: [::std::os::raw::c_char; 5usize],
    pub reserve: [[::std::os::raw::c_char; 5usize]; 8usize],
    pub embEthe_ser: [::std::os::raw::c_char; 5usize],
    pub embEthe_ver: [::std::os::raw::c_char; 5usize],
    pub reserve2: [[::std::os::raw::c_char; 5usize]; 38usize],
}
#[test]
fn bindgen_test_layout_odbsyss2() {
    const UNINIT: ::std::mem::MaybeUninit<odbsyss2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsyss2>(),
        748usize,
        concat!("Size of: ", stringify!(odbsyss2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsyss2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsyss2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(slot_no_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no_l) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(slot_no_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(module_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_id) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(soft_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_series) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(soft_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_version) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(soft_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_inst) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(soft_inst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_ser) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(boot_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_ver) as usize - ptr as usize },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(boot_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo_ser) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(servo_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo_ver) as usize - ptr as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(servo_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_ser) as usize - ptr as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_ver) as usize - ptr as usize },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ladder_ser) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(ladder_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ladder_ver) as usize - ptr as usize },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(ladder_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrlib_ser) as usize - ptr as usize },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcrlib_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrlib_ver) as usize - ptr as usize },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcrlib_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrapl_ser) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcrapl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcrapl_ver) as usize - ptr as usize },
        313usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcrapl_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl1_ser) as usize - ptr as usize },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl1_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl1_ver) as usize - ptr as usize },
        323usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl1_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl2_ser) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl2_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl2_ver) as usize - ptr as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl2_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl3_ser) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl3_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl3_ver) as usize - ptr as usize },
        343usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl3_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exelib_ser) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(c_exelib_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exelib_ver) as usize - ptr as usize },
        353usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(c_exelib_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exeapl_ser) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(c_exeapl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_exeapl_ver) as usize - ptr as usize },
        363usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(c_exeapl_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_vga_ser) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(int_vga_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_vga_ver) as usize - ptr as usize },
        373usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(int_vga_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_vga_ser) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(out_vga_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_vga_ver) as usize - ptr as usize },
        383usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(out_vga_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmm_ser) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmm_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmm_ver) as usize - ptr as usize },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmm_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_mng_ser) as usize - ptr as usize },
        398usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_mng_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_mng_ver) as usize - ptr as usize },
        403usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_mng_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shin_ser) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_shin_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shin_ver) as usize - ptr as usize },
        413usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_shin_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shout_ser) as usize - ptr as usize },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_shout_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_shout_ver) as usize - ptr as usize },
        423usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_shout_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_c_ser) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_c_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_c_ver) as usize - ptr as usize },
        433usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_c_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_edit_ser) as usize - ptr as usize },
        438usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_edit_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_edit_ver) as usize - ptr as usize },
        443usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(pmc_edit_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_mng_ser) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(lddr_mng_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_mng_ver) as usize - ptr as usize },
        453usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(lddr_mng_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_apl_ser) as usize - ptr as usize },
        458usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(lddr_apl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lddr_apl_ver) as usize - ptr as usize },
        463usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(lddr_apl_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl4_ser) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl4_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spl4_ver) as usize - ptr as usize },
        473usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(spl4_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr2_ser) as usize - ptr as usize },
        478usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcr2_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr2_ver) as usize - ptr as usize },
        483usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcr2_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr3_ser) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcr3_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcr3_ver) as usize - ptr as usize },
        493usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(mcr3_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eth_boot_ser) as usize - ptr as usize },
        498usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(eth_boot_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eth_boot_ver) as usize - ptr as usize },
        503usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(eth_boot_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embEthe_ser) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(embEthe_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embEthe_ver) as usize - ptr as usize },
        553usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(embEthe_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss2),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type ODBSYSS2 = odbsyss2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsyss3 {
    pub soft_id: ::std::os::raw::c_short,
    pub soft_series: [::std::os::raw::c_char; 5usize],
    pub soft_edition: [::std::os::raw::c_char; 5usize],
}
#[test]
fn bindgen_test_layout_odbsyss3() {
    const UNINIT: ::std::mem::MaybeUninit<odbsyss3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsyss3>(),
        12usize,
        concat!("Size of: ", stringify!(odbsyss3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsyss3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsyss3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3),
            "::",
            stringify!(soft_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_series) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3),
            "::",
            stringify!(soft_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_edition) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3),
            "::",
            stringify!(soft_edition)
        )
    );
}
pub type ODBSYSS3 = odbsyss3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsyss3_str {
    pub soft_id: ::std::os::raw::c_short,
    pub soft_name: [::std::os::raw::c_char; 13usize],
    pub soft_series: [::std::os::raw::c_char; 5usize],
    pub soft_edition: [::std::os::raw::c_char; 5usize],
    pub dummy: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odbsyss3_str() {
    const UNINIT: ::std::mem::MaybeUninit<odbsyss3_str> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsyss3_str>(),
        28usize,
        concat!("Size of: ", stringify!(odbsyss3_str))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsyss3_str>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsyss3_str))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3_str),
            "::",
            stringify!(soft_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3_str),
            "::",
            stringify!(soft_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_series) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3_str),
            "::",
            stringify!(soft_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soft_edition) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3_str),
            "::",
            stringify!(soft_edition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsyss3_str),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBSYSS3_STR = odbsyss3_str;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsysh_str {
    pub group_id: ::std::os::raw::c_short,
    pub group_name: [::std::os::raw::c_char; 14usize],
    pub hard_id: ::std::os::raw::c_short,
    pub hard_name: [::std::os::raw::c_char; 13usize],
    pub id1: [::std::os::raw::c_char; 11usize],
    pub id2: [::std::os::raw::c_char; 9usize],
    pub slot_no: [::std::os::raw::c_char; 3usize],
    pub dummy: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odbsysh_str() {
    const UNINIT: ::std::mem::MaybeUninit<odbsysh_str> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsysh_str>(),
        56usize,
        concat!("Size of: ", stringify!(odbsysh_str))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsysh_str>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsysh_str))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(group_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(group_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(hard_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard_name) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(hard_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id1) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(id1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id2) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(id2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(slot_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh_str),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBSYSH_STR = odbsysh_str;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsysh {
    pub id1: ::std::os::raw::c_ulong,
    pub id2: ::std::os::raw::c_ulong,
    pub group_id: ::std::os::raw::c_short,
    pub hard_id: ::std::os::raw::c_short,
    pub hard_num: ::std::os::raw::c_short,
    pub slot_no: ::std::os::raw::c_short,
    pub id1_format: ::std::os::raw::c_short,
    pub id2_format: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsysh() {
    const UNINIT: ::std::mem::MaybeUninit<odbsysh> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsysh>(),
        32usize,
        concat!("Size of: ", stringify!(odbsysh))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsysh>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsysh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(id1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(id2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(group_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard_id) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(hard_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard_num) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(hard_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(slot_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id1_format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(id1_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id2_format) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysh),
            "::",
            stringify!(id2_format)
        )
    );
}
pub type ODBSYSH = odbsysh;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdlc {
    pub from: ::std::os::raw::c_short,
    pub dram: ::std::os::raw::c_short,
    pub sram: ::std::os::raw::c_short,
    pub pmc: ::std::os::raw::c_short,
    pub crtc: ::std::os::raw::c_short,
    pub servo12: ::std::os::raw::c_short,
    pub servo34: ::std::os::raw::c_short,
    pub servo56: ::std::os::raw::c_short,
    pub servo78: ::std::os::raw::c_short,
    pub sic: ::std::os::raw::c_short,
    pub pos_lsi: ::std::os::raw::c_short,
    pub hi_aio: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 12usize],
    pub drmmrc: ::std::os::raw::c_short,
    pub drmarc: ::std::os::raw::c_short,
    pub pmcmrc: ::std::os::raw::c_short,
    pub dmaarc: ::std::os::raw::c_short,
    pub iopt: ::std::os::raw::c_short,
    pub hdiio: ::std::os::raw::c_short,
    pub gm2gr1: ::std::os::raw::c_short,
    pub crtgr2: ::std::os::raw::c_short,
    pub gm1gr2: ::std::os::raw::c_short,
    pub gm2gr2: ::std::os::raw::c_short,
    pub cmmrb: ::std::os::raw::c_short,
    pub sv5axs: ::std::os::raw::c_short,
    pub sv7axs: ::std::os::raw::c_short,
    pub sicaxs: ::std::os::raw::c_short,
    pub posaxs: ::std::os::raw::c_short,
    pub hamaxs: ::std::os::raw::c_short,
    pub romr64: ::std::os::raw::c_short,
    pub srmr64: ::std::os::raw::c_short,
    pub dr1r64: ::std::os::raw::c_short,
    pub dr2r64: ::std::os::raw::c_short,
    pub iopio2: ::std::os::raw::c_short,
    pub hdiio2: ::std::os::raw::c_short,
    pub cmmrb2: ::std::os::raw::c_short,
    pub romfap: ::std::os::raw::c_short,
    pub srmfap: ::std::os::raw::c_short,
    pub drmfap: ::std::os::raw::c_short,
    pub drmare: ::std::os::raw::c_short,
    pub pmcmre: ::std::os::raw::c_short,
    pub dmaare: ::std::os::raw::c_short,
    pub frmbgg: ::std::os::raw::c_short,
    pub drmbgg: ::std::os::raw::c_short,
    pub asrbgg: ::std::os::raw::c_short,
    pub edtpsc: ::std::os::raw::c_short,
    pub slcpsc: ::std::os::raw::c_short,
    pub reserve2: [::std::os::raw::c_short; 34usize],
}
#[test]
fn bindgen_test_layout_odbmdlc() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdlc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdlc>(),
        184usize,
        concat!("Size of: ", stringify!(odbmdlc))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdlc>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmdlc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dram) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(dram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sram) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(sram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crtc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(crtc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo12) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(servo12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo34) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(servo34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo56) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(servo56)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo78) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(servo78)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sic) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(sic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_lsi) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(pos_lsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi_aio) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(hi_aio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmmrc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(drmmrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmarc) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(drmarc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmcmrc) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(pmcmrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmaarc) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(dmaarc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iopt) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(iopt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdiio) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(hdiio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gm2gr1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(gm2gr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crtgr2) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(crtgr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gm1gr2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(gm1gr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gm2gr2) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(gm2gr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmmrb) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(cmmrb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv5axs) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(sv5axs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv7axs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(sv7axs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sicaxs) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(sicaxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).posaxs) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(posaxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hamaxs) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(hamaxs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).romr64) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(romr64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srmr64) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(srmr64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dr1r64) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(dr1r64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dr2r64) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(dr2r64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iopio2) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(iopio2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdiio2) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(hdiio2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmmrb2) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(cmmrb2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).romfap) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(romfap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srmfap) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(srmfap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmfap) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(drmfap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmare) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(drmare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmcmre) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(pmcmre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmaare) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(dmaare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frmbgg) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(frmbgg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmbgg) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(drmbgg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asrbgg) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(asrbgg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edtpsc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(edtpsc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slcpsc) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(slcpsc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdlc),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type ODBMDLC = odbmdlc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpscd {
    pub slct: ::std::os::raw::c_short,
    pub feed: ::std::os::raw::c_long,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub g_press: ::std::os::raw::c_short,
    pub g_kind: ::std::os::raw::c_short,
    pub g_ready_t: ::std::os::raw::c_short,
    pub displace: ::std::os::raw::c_short,
    pub supple: ::std::os::raw::c_long,
    pub edge_slt: ::std::os::raw::c_short,
    pub appr_slt: ::std::os::raw::c_short,
    pub pwr_ctrl: ::std::os::raw::c_short,
    pub displace2: ::std::os::raw::c_long,
    pub gap_axis: ::std::os::raw::c_char,
    pub feed_dec: ::std::os::raw::c_char,
    pub supple_dec: ::std::os::raw::c_char,
    pub dsp2_dec: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbpscd() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpscd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpscd>(),
        64usize,
        concat!("Size of: ", stringify!(iodbpscd))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpscd>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpscd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_press) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(g_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(g_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_ready_t) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(g_ready_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displace) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(displace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supple) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(supple)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_slt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(edge_slt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appr_slt) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(appr_slt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr_ctrl) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(pwr_ctrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displace2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(displace2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_axis) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(gap_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_dec) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supple_dec) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(supple_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp2_dec) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd),
            "::",
            stringify!(dsp2_dec)
        )
    );
}
pub type IODBPSCD = iodbpscd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpscd2 {
    pub slct: ::std::os::raw::c_long,
    pub feed: ::std::os::raw::c_long,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub g_press: ::std::os::raw::c_short,
    pub g_kind: ::std::os::raw::c_short,
    pub g_ready_t: ::std::os::raw::c_short,
    pub displace: ::std::os::raw::c_short,
    pub supple: ::std::os::raw::c_long,
    pub edge_slt: ::std::os::raw::c_short,
    pub appr_slt: ::std::os::raw::c_short,
    pub pwr_ctrl: ::std::os::raw::c_short,
    pub displace2: ::std::os::raw::c_long,
    pub gap_axis: ::std::os::raw::c_char,
    pub feed_dec: ::std::os::raw::c_char,
    pub supple_dec: ::std::os::raw::c_char,
    pub dsp2_dec: ::std::os::raw::c_char,
    pub pb_power: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 8usize],
}
#[test]
fn bindgen_test_layout_iodbpscd2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpscd2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpscd2>(),
        80usize,
        concat!("Size of: ", stringify!(iodbpscd2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpscd2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpscd2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_press) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(g_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(g_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_ready_t) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(g_ready_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displace) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(displace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supple) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(supple)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edge_slt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(edge_slt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appr_slt) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(appr_slt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr_ctrl) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(pwr_ctrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displace2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(displace2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_axis) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(gap_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_dec) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supple_dec) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(supple_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp2_dec) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(dsp2_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pb_power) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(pb_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpscd2),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBPSCD2 = iodbpscd2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpirc {
    pub slct: ::std::os::raw::c_short,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub i_freq: ::std::os::raw::c_short,
    pub i_duty: ::std::os::raw::c_short,
    pub step_t: ::std::os::raw::c_short,
    pub step_sum: ::std::os::raw::c_short,
    pub pier_t: ::std::os::raw::c_long,
    pub g_press: ::std::os::raw::c_short,
    pub g_kind: ::std::os::raw::c_short,
    pub g_time: ::std::os::raw::c_short,
    pub def_pos: ::std::os::raw::c_short,
    pub def_pos2: ::std::os::raw::c_long,
    pub gap_axis: ::std::os::raw::c_char,
    pub def_pos2_dec: ::std::os::raw::c_char,
    pub pb_power: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbpirc() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpirc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpirc>(),
        48usize,
        concat!("Size of: ", stringify!(iodbpirc))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpirc>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpirc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i_freq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(i_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i_duty) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(i_duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_t) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(step_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_sum) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(step_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pier_t) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(pier_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_press) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(g_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_kind) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(g_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_time) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(g_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pos) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(def_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pos2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(def_pos2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_axis) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(gap_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_pos2_dec) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(def_pos2_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pb_power) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpirc),
            "::",
            stringify!(pb_power)
        )
    );
}
pub type IODBPIRC = iodbpirc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbedge {
    pub slct: ::std::os::raw::c_short,
    pub angle: ::std::os::raw::c_short,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub pier_t: ::std::os::raw::c_long,
    pub g_press: ::std::os::raw::c_short,
    pub g_kind: ::std::os::raw::c_short,
    pub r_len: ::std::os::raw::c_long,
    pub r_feed: ::std::os::raw::c_short,
    pub r_freq: ::std::os::raw::c_short,
    pub r_duty: ::std::os::raw::c_short,
    pub gap: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 4usize],
}
#[test]
fn bindgen_test_layout_iodbedge() {
    const UNINIT: ::std::mem::MaybeUninit<iodbedge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbedge>(),
        56usize,
        concat!("Size of: ", stringify!(iodbedge))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbedge>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbedge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pier_t) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(pier_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_press) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(g_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_kind) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(g_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(r_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_feed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(r_feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_freq) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(r_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_duty) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(r_duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBEDGE = iodbedge;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbslop {
    pub slct: ::std::os::raw::c_long,
    pub upleng: ::std::os::raw::c_long,
    pub upsp: [::std::os::raw::c_short; 10usize],
    pub dwleng: ::std::os::raw::c_long,
    pub dwsp: [::std::os::raw::c_short; 10usize],
    pub upleng_dec: ::std::os::raw::c_char,
    pub dwleng_dec: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_short; 9usize],
}
#[test]
fn bindgen_test_layout_iodbslop() {
    const UNINIT: ::std::mem::MaybeUninit<iodbslop> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbslop>(),
        88usize,
        concat!("Size of: ", stringify!(iodbslop))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbslop>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbslop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upleng) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(upleng)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upsp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(upsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwleng) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(dwleng)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwsp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(dwsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upleng_dec) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(upleng_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwleng_dec) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(dwleng_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslop),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBSLOP = iodbslop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblpwdt {
    pub slct: ::std::os::raw::c_short,
    pub dty_const: ::std::os::raw::c_short,
    pub dty_min: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 6usize],
}
#[test]
fn bindgen_test_layout_iodblpwdt() {
    const UNINIT: ::std::mem::MaybeUninit<iodblpwdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblpwdt>(),
        18usize,
        concat!("Size of: ", stringify!(iodblpwdt))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblpwdt>(),
        2usize,
        concat!("Alignment of ", stringify!(iodblpwdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpwdt),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dty_const) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpwdt),
            "::",
            stringify!(dty_const)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dty_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpwdt),
            "::",
            stringify!(dty_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpwdt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBLPWDT = iodblpwdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblopdt {
    pub slct: ::std::os::raw::c_short,
    pub pwr_mon: ::std::os::raw::c_short,
    pub pwr_ofs: ::std::os::raw::c_short,
    pub pwr_act: ::std::os::raw::c_short,
    pub feed_act: ::std::os::raw::c_long,
    pub feed_dec: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub reserves: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout_odblopdt() {
    const UNINIT: ::std::mem::MaybeUninit<odblopdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblopdt>(),
        24usize,
        concat!("Size of: ", stringify!(odblopdt))
    );
    assert_eq!(
        ::std::mem::align_of::<odblopdt>(),
        8usize,
        concat!("Alignment of ", stringify!(odblopdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr_mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(pwr_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr_ofs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(pwr_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr_act) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(pwr_act)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_act) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(feed_act)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odblopdt),
            "::",
            stringify!(reserves)
        )
    );
}
pub type ODBLOPDT = odblopdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblagsl {
    pub slct: ::std::os::raw::c_short,
    pub ag_slt: ::std::os::raw::c_short,
    pub agflow_slt: ::std::os::raw::c_short,
    pub ag_press: ::std::os::raw::c_short,
    pub ag_ready_t: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 4usize],
}
#[test]
fn bindgen_test_layout_iodblagsl() {
    const UNINIT: ::std::mem::MaybeUninit<iodblagsl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblagsl>(),
        18usize,
        concat!("Size of: ", stringify!(iodblagsl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblagsl>(),
        2usize,
        concat!("Alignment of ", stringify!(iodblagsl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagsl),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ag_slt) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagsl),
            "::",
            stringify!(ag_slt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).agflow_slt) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagsl),
            "::",
            stringify!(agflow_slt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ag_press) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagsl),
            "::",
            stringify!(ag_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ag_ready_t) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagsl),
            "::",
            stringify!(ag_ready_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagsl),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBLAGSL = iodblagsl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblagst {
    pub gasflow: [iodblagst__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblagst__bindgen_ty_1 {
    pub slct: ::std::os::raw::c_short,
    pub pre_time: ::std::os::raw::c_short,
    pub pre_press: ::std::os::raw::c_short,
    pub proc_press: ::std::os::raw::c_short,
    pub end_time: ::std::os::raw::c_short,
    pub end_press: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout_iodblagst__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodblagst__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblagst__bindgen_ty_1>(),
        18usize,
        concat!("Size of: ", stringify!(iodblagst__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblagst__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodblagst__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_time) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(pre_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_press) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(pre_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proc_press) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(proc_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(end_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_press) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(end_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst__bindgen_ty_1),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_iodblagst() {
    const UNINIT: ::std::mem::MaybeUninit<iodblagst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblagst>(),
        54usize,
        concat!("Size of: ", stringify!(iodblagst))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblagst>(),
        2usize,
        concat!("Alignment of ", stringify!(iodblagst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gasflow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblagst),
            "::",
            stringify!(gasflow)
        )
    );
}
pub type IODBLAGST = iodblagst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblegpr {
    pub slct: ::std::os::raw::c_short,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 5usize],
}
#[test]
fn bindgen_test_layout_iodblegpr() {
    const UNINIT: ::std::mem::MaybeUninit<iodblegpr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblegpr>(),
        18usize,
        concat!("Size of: ", stringify!(iodblegpr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblegpr>(),
        2usize,
        concat!("Alignment of ", stringify!(iodblegpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblegpr),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblegpr),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblegpr),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblegpr),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblegpr),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBLEGPR = iodblegpr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblpcpr {
    pub slct: ::std::os::raw::c_short,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub time: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_short; 4usize],
}
#[test]
fn bindgen_test_layout_iodblpcpr() {
    const UNINIT: ::std::mem::MaybeUninit<iodblpcpr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblpcpr>(),
        24usize,
        concat!("Size of: ", stringify!(iodblpcpr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblpcpr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodblpcpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpcpr),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpcpr),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpcpr),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpcpr),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpcpr),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblpcpr),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBLPCPR = iodblpcpr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblcmdt {
    pub slct: ::std::os::raw::c_short,
    pub feed: ::std::os::raw::c_long,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub g_kind: ::std::os::raw::c_short,
    pub g_ready_t: ::std::os::raw::c_short,
    pub g_press: ::std::os::raw::c_short,
    pub error: ::std::os::raw::c_short,
    pub dsplc: ::std::os::raw::c_long,
    pub error2: ::std::os::raw::c_long,
    pub gap_axis: ::std::os::raw::c_char,
    pub feed_dec: ::std::os::raw::c_char,
    pub dsplc_dec: ::std::os::raw::c_char,
    pub error2_dec: ::std::os::raw::c_char,
    pub pb_power: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_iodblcmdt() {
    const UNINIT: ::std::mem::MaybeUninit<iodblcmdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblcmdt>(),
        64usize,
        concat!("Size of: ", stringify!(iodblcmdt))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblcmdt>(),
        8usize,
        concat!("Alignment of ", stringify!(iodblcmdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_kind) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(g_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_ready_t) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(g_ready_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_press) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(g_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsplc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(dsplc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(error2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_axis) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(gap_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_dec) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsplc_dec) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(dsplc_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error2_dec) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(error2_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pb_power) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(pb_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblcmdt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBLCMDT = iodblcmdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblactn {
    pub slct: ::std::os::raw::c_short,
    pub act_proc: ::std::os::raw::c_short,
    pub act_pirce: ::std::os::raw::c_short,
    pub act_slop: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 5usize],
}
#[test]
fn bindgen_test_layout_odblactn() {
    const UNINIT: ::std::mem::MaybeUninit<odblactn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblactn>(),
        18usize,
        concat!("Size of: ", stringify!(odblactn))
    );
    assert_eq!(
        ::std::mem::align_of::<odblactn>(),
        2usize,
        concat!("Alignment of ", stringify!(odblactn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblactn),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_proc) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odblactn),
            "::",
            stringify!(act_proc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_pirce) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblactn),
            "::",
            stringify!(act_pirce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_slop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odblactn),
            "::",
            stringify!(act_slop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblactn),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBLACTN = odblactn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblcmmt {
    pub comment: [::std::os::raw::c_char; 25usize],
}
#[test]
fn bindgen_test_layout_odblcmmt() {
    const UNINIT: ::std::mem::MaybeUninit<odblcmmt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblcmmt>(),
        25usize,
        concat!("Size of: ", stringify!(odblcmmt))
    );
    assert_eq!(
        ::std::mem::align_of::<odblcmmt>(),
        1usize,
        concat!("Alignment of ", stringify!(odblcmmt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblcmmt),
            "::",
            stringify!(comment)
        )
    );
}
pub type ODBLCMMT = odblcmmt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpwofst {
    pub pwratio: ::std::os::raw::c_long,
    pub rfvolt: ::std::os::raw::c_long,
    pub year: ::std::os::raw::c_ushort,
    pub month: ::std::os::raw::c_ushort,
    pub day: ::std::os::raw::c_ushort,
    pub hour: ::std::os::raw::c_ushort,
    pub minute: ::std::os::raw::c_ushort,
    pub second: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbpwofst() {
    const UNINIT: ::std::mem::MaybeUninit<odbpwofst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpwofst>(),
        32usize,
        concat!("Size of: ", stringify!(odbpwofst))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpwofst>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpwofst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwratio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(pwratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfvolt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(rfvolt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwofst),
            "::",
            stringify!(second)
        )
    );
}
pub type ODBPWOFST = odbpwofst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmngtime {
    pub life: ::std::os::raw::c_ulong,
    pub total: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_iodbmngtime() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmngtime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmngtime>(),
        16usize,
        concat!("Size of: ", stringify!(iodbmngtime))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmngtime>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmngtime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).life) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmngtime),
            "::",
            stringify!(life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmngtime),
            "::",
            stringify!(total)
        )
    );
}
pub type IODBMNGTIME = iodbmngtime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdischrg {
    pub aps: ::std::os::raw::c_ushort,
    pub year: ::std::os::raw::c_ushort,
    pub month: ::std::os::raw::c_ushort,
    pub day: ::std::os::raw::c_ushort,
    pub hour: ::std::os::raw::c_ushort,
    pub minute: ::std::os::raw::c_ushort,
    pub second: ::std::os::raw::c_ushort,
    pub hpc: ::std::os::raw::c_short,
    pub hfq: ::std::os::raw::c_short,
    pub hdt: ::std::os::raw::c_short,
    pub hpa: ::std::os::raw::c_short,
    pub hce: ::std::os::raw::c_long,
    pub rfi: [::std::os::raw::c_long; 8usize],
    pub rfv: [::std::os::raw::c_long; 8usize],
    pub dci: [::std::os::raw::c_long; 8usize],
    pub dcv: [::std::os::raw::c_long; 8usize],
    pub dcw: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_odbdischrg() {
    const UNINIT: ::std::mem::MaybeUninit<odbdischrg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdischrg>(),
        352usize,
        concat!("Size of: ", stringify!(odbdischrg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdischrg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdischrg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(aps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpc) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(hpc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(hfq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdt) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(hdt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpa) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(hpa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hce) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(hce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(rfi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfv) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(rfv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dci) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(dci)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcv) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(dcv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcw) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrg),
            "::",
            stringify!(dcw)
        )
    );
}
pub type ODBDISCHRG = odbdischrg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdischrgalm {
    pub year: ::std::os::raw::c_ushort,
    pub month: ::std::os::raw::c_ushort,
    pub day: ::std::os::raw::c_ushort,
    pub hour: ::std::os::raw::c_ushort,
    pub minute: ::std::os::raw::c_ushort,
    pub second: ::std::os::raw::c_ushort,
    pub almnum: ::std::os::raw::c_long,
    pub psec: ::std::os::raw::c_ulong,
    pub hpc: ::std::os::raw::c_short,
    pub hfq: ::std::os::raw::c_short,
    pub hdt: ::std::os::raw::c_short,
    pub hpa: ::std::os::raw::c_short,
    pub hce: ::std::os::raw::c_long,
    pub asq: ::std::os::raw::c_ushort,
    pub psu: ::std::os::raw::c_ushort,
    pub aps: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_short,
    pub rfi: [::std::os::raw::c_long; 8usize],
    pub rfv: [::std::os::raw::c_long; 8usize],
    pub dci: [::std::os::raw::c_long; 8usize],
    pub dcv: [::std::os::raw::c_long; 8usize],
    pub dcw: [::std::os::raw::c_long; 8usize],
    pub almcd: [::std::os::raw::c_short; 8usize],
}
#[test]
fn bindgen_test_layout_odbdischrgalm() {
    const UNINIT: ::std::mem::MaybeUninit<odbdischrgalm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdischrgalm>(),
        392usize,
        concat!("Size of: ", stringify!(odbdischrgalm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdischrgalm>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdischrgalm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).almnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(almnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psec) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(psec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(hpc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfq) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(hfq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(hdt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpa) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(hpa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hce) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(hce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asq) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(asq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psu) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(psu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aps) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(aps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfi) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(rfi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rfv) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(rfv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dci) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(dci)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcv) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(dcv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcw) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(dcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).almcd) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdischrgalm),
            "::",
            stringify!(almcd)
        )
    );
}
pub type ODBDISCHRGALM = odbdischrgalm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idblppfbfg {
    pub s_no: ::std::os::raw::c_short,
    pub slct: ::std::os::raw::c_short,
    pub s_freq: ::std::os::raw::c_short,
    pub e_freq: ::std::os::raw::c_short,
    pub s_duty: ::std::os::raw::c_short,
    pub e_duty: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idblppfbfg() {
    const UNINIT: ::std::mem::MaybeUninit<idblppfbfg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idblppfbfg>(),
        12usize,
        concat!("Size of: ", stringify!(idblppfbfg))
    );
    assert_eq!(
        ::std::mem::align_of::<idblppfbfg>(),
        2usize,
        concat!("Alignment of ", stringify!(idblppfbfg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idblppfbfg),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idblppfbfg),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idblppfbfg),
            "::",
            stringify!(s_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_freq) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(idblppfbfg),
            "::",
            stringify!(e_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_duty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idblppfbfg),
            "::",
            stringify!(s_duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_duty) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(idblppfbfg),
            "::",
            stringify!(e_duty)
        )
    );
}
pub type IDBLPPFBFG = idblppfbfg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodblppfbdt {
    pub ppower: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub freq: [::std::os::raw::c_short; 10usize],
    pub duty: [::std::os::raw::c_short; 10usize],
    pub rpower: [[::std::os::raw::c_short; 10usize]; 10usize],
}
#[test]
fn bindgen_test_layout_iodblppfbdt() {
    const UNINIT: ::std::mem::MaybeUninit<iodblppfbdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodblppfbdt>(),
        244usize,
        concat!("Size of: ", stringify!(iodblppfbdt))
    );
    assert_eq!(
        ::std::mem::align_of::<iodblppfbdt>(),
        2usize,
        concat!("Alignment of ", stringify!(iodblppfbdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppower) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblppfbdt),
            "::",
            stringify!(ppower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblppfbdt),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblppfbdt),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblppfbdt),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rpower) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iodblppfbdt),
            "::",
            stringify!(rpower)
        )
    );
}
pub type IODBLPPFBDT = iodblppfbdt;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbtimer {
    pub type_: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub data: iodbtimer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbtimer__bindgen_ty_1 {
    pub date: iodbtimer__bindgen_ty_1__bindgen_ty_1,
    pub time: iodbtimer__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtimer__bindgen_ty_1__bindgen_ty_1 {
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub date: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtimer__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtimer__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtimer__bindgen_ty_1__bindgen_ty_1>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtimer__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(date)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtimer__bindgen_ty_1__bindgen_ty_2 {
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbtimer__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtimer__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtimer__bindgen_ty_1__bindgen_ty_2>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtimer__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(second)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtimer__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtimer__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtimer__bindgen_ty_1>(),
        6usize,
        concat!("Size of: ", stringify!(iodbtimer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtimer__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtimer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbtimer() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtimer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtimer>(),
        10usize,
        concat!("Size of: ", stringify!(iodbtimer))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtimer>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbtimer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtimer),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBTIMER = iodbtimer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtime {
    pub minute: ::std::os::raw::c_long,
    pub msec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbtime() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtime>(),
        16usize,
        concat!("Size of: ", stringify!(iodbtime))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtime>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtime),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtime),
            "::",
            stringify!(msec)
        )
    );
}
pub type IODBTIME = iodbtime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlctl {
    pub slct: ::std::os::raw::c_short,
    pub used_tool: ::std::os::raw::c_short,
    pub turret_indx: ::std::os::raw::c_short,
    pub zero_tl_no: ::std::os::raw::c_long,
    pub t_axis_move: ::std::os::raw::c_long,
    pub total_punch: [::std::os::raw::c_long; 2usize],
    pub t_axis_dec: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub reserves: [::std::os::raw::c_short; 10usize],
}
#[test]
fn bindgen_test_layout_iodbtlctl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlctl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlctl>(),
        64usize,
        concat!("Size of: ", stringify!(iodbtlctl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlctl>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlctl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_tool) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(used_tool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).turret_indx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(turret_indx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_tl_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(zero_tl_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_axis_move) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(t_axis_move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_punch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(total_punch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_axis_dec) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(t_axis_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlctl),
            "::",
            stringify!(reserves)
        )
    );
}
pub type IODBTLCTL = iodbtlctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtldt {
    pub slct: ::std::os::raw::c_short,
    pub tool_no: ::std::os::raw::c_long,
    pub x_axis_ofs: ::std::os::raw::c_long,
    pub y_axis_ofs: ::std::os::raw::c_long,
    pub turret_pos: ::std::os::raw::c_long,
    pub chg_tl_no: ::std::os::raw::c_long,
    pub punch_count: ::std::os::raw::c_long,
    pub tool_life: ::std::os::raw::c_long,
    pub m_tl_radius: ::std::os::raw::c_long,
    pub m_tl_angle: ::std::os::raw::c_long,
    pub tl_shape: ::std::os::raw::c_char,
    pub tl_size_i: ::std::os::raw::c_long,
    pub tl_size_j: ::std::os::raw::c_long,
    pub tl_angle: ::std::os::raw::c_long,
    pub x_axis_dec: ::std::os::raw::c_char,
    pub y_axis_dec: ::std::os::raw::c_char,
    pub turret_dec: ::std::os::raw::c_char,
    pub m_radius_dec: ::std::os::raw::c_char,
    pub m_angle_dec: ::std::os::raw::c_char,
    pub tl_size_i_dec: ::std::os::raw::c_char,
    pub tl_size_j_dec: ::std::os::raw::c_char,
    pub tl_angle_dec: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_iodbtldt() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtldt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtldt>(),
        128usize,
        concat!("Size of: ", stringify!(iodbtldt))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtldt>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtldt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tool_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_ofs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(x_axis_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_axis_ofs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(y_axis_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).turret_pos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(turret_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chg_tl_no) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(chg_tl_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).punch_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(punch_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_life) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tool_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_tl_radius) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(m_tl_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_tl_angle) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(m_tl_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_shape) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_shape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_i) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_size_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_j) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_size_j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_angle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_dec) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(x_axis_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_axis_dec) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(y_axis_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).turret_dec) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(turret_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_radius_dec) as usize - ptr as usize },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(m_radius_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_angle_dec) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(m_angle_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_i_dec) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_size_i_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_j_dec) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_size_j_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_angle_dec) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(tl_angle_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtldt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBTLDT = iodbtldt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmlttl {
    pub slct: ::std::os::raw::c_short,
    pub m_tl_no: ::std::os::raw::c_short,
    pub m_tl_radius: ::std::os::raw::c_long,
    pub m_tl_angle: ::std::os::raw::c_long,
    pub x_axis_ofs: ::std::os::raw::c_long,
    pub y_axis_ofs: ::std::os::raw::c_long,
    pub tl_shape: ::std::os::raw::c_char,
    pub tl_size_i: ::std::os::raw::c_long,
    pub tl_size_j: ::std::os::raw::c_long,
    pub tl_angle: ::std::os::raw::c_long,
    pub m_radius_dec: ::std::os::raw::c_char,
    pub m_angle_dec: ::std::os::raw::c_char,
    pub x_axis_dec: ::std::os::raw::c_char,
    pub y_axis_dec: ::std::os::raw::c_char,
    pub tl_size_i_dec: ::std::os::raw::c_char,
    pub tl_size_j_dec: ::std::os::raw::c_char,
    pub tl_angle_dec: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub reserves: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_iodbmlttl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmlttl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmlttl>(),
        120usize,
        concat!("Size of: ", stringify!(iodbmlttl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmlttl>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmlttl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_tl_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(m_tl_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_tl_radius) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(m_tl_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_tl_angle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(m_tl_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_ofs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(x_axis_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_axis_ofs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(y_axis_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_shape) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_shape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_i) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_size_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_j) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_size_j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_angle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_radius_dec) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(m_radius_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_angle_dec) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(m_angle_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_dec) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(x_axis_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_axis_dec) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(y_axis_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_i_dec) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_size_i_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_size_j_dec) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_size_j_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl_angle_dec) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(tl_angle_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmlttl),
            "::",
            stringify!(reserves)
        )
    );
}
pub type IODBMLTTL = iodbmlttl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmtap {
    pub slct: ::std::os::raw::c_short,
    pub tool_no: ::std::os::raw::c_long,
    pub x_axis_ofs: ::std::os::raw::c_long,
    pub y_axis_ofs: ::std::os::raw::c_long,
    pub punch_count: ::std::os::raw::c_long,
    pub tool_life: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_long; 11usize],
}
#[test]
fn bindgen_test_layout_iodbmtap() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmtap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmtap>(),
        136usize,
        concat!("Size of: ", stringify!(iodbmtap))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmtap>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmtap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(tool_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_axis_ofs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(x_axis_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_axis_ofs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(y_axis_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).punch_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(punch_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_life) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(tool_life)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmtap),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBMTAP = iodbmtap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptlinf {
    pub tld_max: ::std::os::raw::c_short,
    pub mlt_max: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub tld_size: [::std::os::raw::c_short; 16usize],
    pub mlt_size: [::std::os::raw::c_short; 16usize],
    pub reserves: [::std::os::raw::c_short; 16usize],
}
#[test]
fn bindgen_test_layout_odbptlinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbptlinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptlinf>(),
        102usize,
        concat!("Size of: ", stringify!(odbptlinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptlinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbptlinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tld_max) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptlinf),
            "::",
            stringify!(tld_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlt_max) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptlinf),
            "::",
            stringify!(mlt_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptlinf),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tld_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptlinf),
            "::",
            stringify!(tld_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlt_size) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptlinf),
            "::",
            stringify!(mlt_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptlinf),
            "::",
            stringify!(reserves)
        )
    );
}
pub type ODBPTLINF = odbptlinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsafe {
    pub slct: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_iodbsafe() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsafe> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsafe>(),
        32usize,
        concat!("Size of: ", stringify!(iodbsafe))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsafe>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsafe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsafe),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsafe),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBSAFE = iodbsafe;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbtlzn {
    pub slct: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_iodbtlzn() {
    const UNINIT: ::std::mem::MaybeUninit<iodbtlzn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbtlzn>(),
        24usize,
        concat!("Size of: ", stringify!(iodbtlzn))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbtlzn>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbtlzn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlzn),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbtlzn),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBTLZN = iodbtlzn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbacttlzn {
    pub act_no: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_odbacttlzn() {
    const UNINIT: ::std::mem::MaybeUninit<odbacttlzn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbacttlzn>(),
        24usize,
        concat!("Size of: ", stringify!(odbacttlzn))
    );
    assert_eq!(
        ::std::mem::align_of::<odbacttlzn>(),
        8usize,
        concat!("Alignment of ", stringify!(odbacttlzn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbacttlzn),
            "::",
            stringify!(act_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbacttlzn),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBACTTLZN = odbacttlzn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbbrs {
    pub dest: [::std::os::raw::c_long; 32usize],
    pub dist: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbbrs() {
    const UNINIT: ::std::mem::MaybeUninit<odbbrs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbbrs>(),
        512usize,
        concat!("Size of: ", stringify!(odbbrs))
    );
    assert_eq!(
        ::std::mem::align_of::<odbbrs>(),
        8usize,
        concat!("Alignment of ", stringify!(odbbrs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbrs),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbrs),
            "::",
            stringify!(dist)
        )
    );
}
pub type ODBBRS = odbbrs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrofs {
    pub mode: ::std::os::raw::c_short,
    pub pln_axes: [::std::os::raw::c_short; 2usize],
    pub ofsvct: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_odbrofs() {
    const UNINIT: ::std::mem::MaybeUninit<odbrofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrofs>(),
        24usize,
        concat!("Size of: ", stringify!(odbrofs))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrofs>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrofs),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pln_axes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrofs),
            "::",
            stringify!(pln_axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofsvct) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrofs),
            "::",
            stringify!(ofsvct)
        )
    );
}
pub type ODBROFS = odbrofs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblofs {
    pub mode: ::std::os::raw::c_short,
    pub ofsvct: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odblofs() {
    const UNINIT: ::std::mem::MaybeUninit<odblofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblofs>(),
        264usize,
        concat!("Size of: ", stringify!(odblofs))
    );
    assert_eq!(
        ::std::mem::align_of::<odblofs>(),
        8usize,
        concat!("Alignment of ", stringify!(odblofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblofs),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofsvct) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblofs),
            "::",
            stringify!(ofsvct)
        )
    );
}
pub type ODBLOFS = odblofs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfix {
    pub mode: ::std::os::raw::c_short,
    pub pln_axes: [::std::os::raw::c_short; 2usize],
    pub drl_axes: ::std::os::raw::c_short,
    pub i_pos: ::std::os::raw::c_long,
    pub r_pos: ::std::os::raw::c_long,
    pub z_pos: ::std::os::raw::c_long,
    pub cmd_cnt: ::std::os::raw::c_long,
    pub act_cnt: ::std::os::raw::c_long,
    pub cut: ::std::os::raw::c_long,
    pub shift: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_odbfix() {
    const UNINIT: ::std::mem::MaybeUninit<odbfix> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfix>(),
        72usize,
        concat!("Size of: ", stringify!(odbfix))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfix>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pln_axes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(pln_axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drl_axes) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(drl_axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i_pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(i_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_pos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(r_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_pos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(z_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_cnt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(cmd_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(act_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cut) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(cut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfix),
            "::",
            stringify!(shift)
        )
    );
}
pub type ODBFIX = odbfix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrot {
    pub mode: ::std::os::raw::c_short,
    pub pln_axes: [::std::os::raw::c_short; 2usize],
    pub center: [::std::os::raw::c_long; 2usize],
    pub angle: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbrot() {
    const UNINIT: ::std::mem::MaybeUninit<odbrot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrot>(),
        32usize,
        concat!("Size of: ", stringify!(odbrot))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrot>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrot),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pln_axes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrot),
            "::",
            stringify!(pln_axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrot),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrot),
            "::",
            stringify!(angle)
        )
    );
}
pub type ODBROT = odbrot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dcd {
    pub mode: ::std::os::raw::c_short,
    pub dno: ::std::os::raw::c_short,
    pub cd_axes: [::std::os::raw::c_short; 3usize],
    pub center: [[::std::os::raw::c_long; 3usize]; 2usize],
    pub direct: [[::std::os::raw::c_long; 3usize]; 2usize],
    pub angle: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_odb3dcd() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dcd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dcd>(),
        128usize,
        concat!("Size of: ", stringify!(odb3dcd))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dcd>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dcd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dcd),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dno) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dcd),
            "::",
            stringify!(dno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cd_axes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dcd),
            "::",
            stringify!(cd_axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dcd),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direct) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dcd),
            "::",
            stringify!(direct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dcd),
            "::",
            stringify!(angle)
        )
    );
}
pub type ODB3DCD = odb3dcd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmir {
    pub mode: ::std::os::raw::c_short,
    pub mir_flag: ::std::os::raw::c_long,
    pub mir_pos: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbmir() {
    const UNINIT: ::std::mem::MaybeUninit<odbmir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmir>(),
        272usize,
        concat!("Size of: ", stringify!(odbmir))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmir>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmir),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mir_flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmir),
            "::",
            stringify!(mir_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mir_pos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmir),
            "::",
            stringify!(mir_pos)
        )
    );
}
pub type ODBMIR = odbmir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbscl {
    pub mode: ::std::os::raw::c_short,
    pub center: [::std::os::raw::c_long; 32usize],
    pub magnif: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbscl() {
    const UNINIT: ::std::mem::MaybeUninit<odbscl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbscl>(),
        520usize,
        concat!("Size of: ", stringify!(odbscl))
    );
    assert_eq!(
        ::std::mem::align_of::<odbscl>(),
        8usize,
        concat!("Alignment of ", stringify!(odbscl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbscl),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbscl),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magnif) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(odbscl),
            "::",
            stringify!(magnif)
        )
    );
}
pub type ODBSCL = odbscl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dto {
    pub mode: ::std::os::raw::c_short,
    pub ofs_axes: [::std::os::raw::c_short; 3usize],
    pub ofsvct: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_odb3dto() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dto> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dto>(),
        32usize,
        concat!("Size of: ", stringify!(odb3dto))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dto>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dto))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dto),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_axes) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dto),
            "::",
            stringify!(ofs_axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofsvct) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dto),
            "::",
            stringify!(ofsvct)
        )
    );
}
pub type ODB3DTO = odb3dto;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpofs {
    pub mode: ::std::os::raw::c_short,
    pub ofsvct: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbpofs() {
    const UNINIT: ::std::mem::MaybeUninit<odbpofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpofs>(),
        264usize,
        concat!("Size of: ", stringify!(odbpofs))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpofs>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpofs),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofsvct) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpofs),
            "::",
            stringify!(ofsvct)
        )
    );
}
pub type ODBPOFS = odbpofs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbhpst {
    pub slct: ::std::os::raw::c_short,
    pub hpcc: ::std::os::raw::c_short,
    pub multi: ::std::os::raw::c_short,
    pub ovr1: ::std::os::raw::c_short,
    pub ign_f: ::std::os::raw::c_short,
    pub foward: ::std::os::raw::c_short,
    pub max_f: ::std::os::raw::c_long,
    pub ovr2: ::std::os::raw::c_short,
    pub ovr3: ::std::os::raw::c_short,
    pub ovr4: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_long; 7usize],
}
#[test]
fn bindgen_test_layout_iodbhpst() {
    const UNINIT: ::std::mem::MaybeUninit<iodbhpst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbhpst>(),
        88usize,
        concat!("Size of: ", stringify!(iodbhpst))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbhpst>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbhpst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpcc) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(hpcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(multi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(ovr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ign_f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(ign_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foward) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(foward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_f) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(max_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(ovr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr3) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(ovr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovr4) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(ovr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpst),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBHPST = iodbhpst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbhppr {
    pub tune: [iodbhppr__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbhppr__bindgen_ty_1 {
    pub slct: ::std::os::raw::c_short,
    pub diff: ::std::os::raw::c_short,
    pub fine: ::std::os::raw::c_short,
    pub acc_lv: ::std::os::raw::c_short,
    pub max_f: ::std::os::raw::c_long,
    pub bipl: ::std::os::raw::c_short,
    pub aipl: ::std::os::raw::c_short,
    pub corner: ::std::os::raw::c_long,
    pub clamp: ::std::os::raw::c_short,
    pub radius: ::std::os::raw::c_long,
    pub max_cf: ::std::os::raw::c_long,
    pub min_cf: ::std::os::raw::c_long,
    pub foward: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_iodbhppr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbhppr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbhppr__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(iodbhppr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbhppr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbhppr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fine) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(fine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_lv) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(acc_lv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(max_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bipl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(bipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aipl) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(aipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(corner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clamp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(clamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cf) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(max_cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_cf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(min_cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foward) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(foward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr__bindgen_ty_1),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbhppr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbhppr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbhppr>(),
        336usize,
        concat!("Size of: ", stringify!(iodbhppr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbhppr>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbhppr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tune) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhppr),
            "::",
            stringify!(tune)
        )
    );
}
pub type IODBHPPR = iodbhppr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbhpac {
    pub tune: [iodbhpac__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbhpac__bindgen_ty_1 {
    pub slct: ::std::os::raw::c_short,
    pub diff: ::std::os::raw::c_short,
    pub fine: ::std::os::raw::c_short,
    pub acc_lv: ::std::os::raw::c_short,
    pub bipl: ::std::os::raw::c_long,
    pub aipl: ::std::os::raw::c_short,
    pub corner: ::std::os::raw::c_long,
    pub clamp: ::std::os::raw::c_long,
    pub c_acc: ::std::os::raw::c_long,
    pub foward: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbhpac__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbhpac__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbhpac__bindgen_ty_1>(),
        120usize,
        concat!("Size of: ", stringify!(iodbhpac__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbhpac__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbhpac__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fine) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(fine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_lv) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(acc_lv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bipl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(bipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aipl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(aipl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).corner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(corner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clamp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(clamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_acc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(c_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foward) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(foward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac__bindgen_ty_1),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbhpac() {
    const UNINIT: ::std::mem::MaybeUninit<iodbhpac> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbhpac>(),
        360usize,
        concat!("Size of: ", stringify!(iodbhpac))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbhpac>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbhpac))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tune) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbhpac),
            "::",
            stringify!(tune)
        )
    );
}
pub type IODBHPAC = iodbhpac;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dhdl {
    pub axes: [::std::os::raw::c_short; 5usize],
    pub data: [::std::os::raw::c_long; 5usize],
}
#[test]
fn bindgen_test_layout_odb3dhdl() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dhdl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dhdl>(),
        56usize,
        concat!("Size of: ", stringify!(odb3dhdl))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dhdl>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dhdl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dhdl),
            "::",
            stringify!(axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dhdl),
            "::",
            stringify!(data)
        )
    );
}
pub type ODB3DHDL = odb3dhdl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dpls {
    pub right_angle_x: ::std::os::raw::c_long,
    pub right_angle_y: ::std::os::raw::c_long,
    pub tool_axis: ::std::os::raw::c_long,
    pub tool_tip_a_b: ::std::os::raw::c_long,
    pub tool_tip_c: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odb3dpls() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dpls> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dpls>(),
        40usize,
        concat!("Size of: ", stringify!(odb3dpls))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dpls>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dpls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_angle_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dpls),
            "::",
            stringify!(right_angle_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_angle_y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dpls),
            "::",
            stringify!(right_angle_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_axis) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dpls),
            "::",
            stringify!(tool_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_tip_a_b) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dpls),
            "::",
            stringify!(tool_tip_a_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tool_tip_c) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dpls),
            "::",
            stringify!(tool_tip_c)
        )
    );
}
pub type ODB3DPLS = odb3dpls;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb5dhdl {
    pub name: [::std::os::raw::c_char; 4usize],
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub flag: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odb5dhdl() {
    const UNINIT: ::std::mem::MaybeUninit<odb5dhdl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb5dhdl>(),
        24usize,
        concat!("Size of: ", stringify!(odb5dhdl))
    );
    assert_eq!(
        ::std::mem::align_of::<odb5dhdl>(),
        8usize,
        concat!("Alignment of ", stringify!(odb5dhdl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dhdl),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dhdl),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dhdl),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dhdl),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dhdl),
            "::",
            stringify!(axis)
        )
    );
}
pub type ODB5DHDL = odb5dhdl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb5dpls {
    pub name: [::std::os::raw::c_char; 3usize],
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odb5dpls() {
    const UNINIT: ::std::mem::MaybeUninit<odb5dpls> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb5dpls>(),
        24usize,
        concat!("Size of: ", stringify!(odb5dpls))
    );
    assert_eq!(
        ::std::mem::align_of::<odb5dpls>(),
        8usize,
        concat!("Alignment of ", stringify!(odb5dpls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dpls),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dpls),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odb5dpls),
            "::",
            stringify!(dec)
        )
    );
}
pub type ODB5DPLS = odb5dpls;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxisname {
    pub name: ::std::os::raw::c_char,
    pub suff: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbaxisname() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxisname> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxisname>(),
        2usize,
        concat!("Size of: ", stringify!(odbaxisname))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxisname>(),
        1usize,
        concat!("Alignment of ", stringify!(odbaxisname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxisname),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxisname),
            "::",
            stringify!(suff)
        )
    );
}
pub type ODBAXISNAME = odbaxisname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbspdlname {
    pub name: ::std::os::raw::c_char,
    pub suff1: ::std::os::raw::c_char,
    pub suff2: ::std::os::raw::c_char,
    pub suff3: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbspdlname() {
    const UNINIT: ::std::mem::MaybeUninit<odbspdlname> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbspdlname>(),
        4usize,
        concat!("Size of: ", stringify!(odbspdlname))
    );
    assert_eq!(
        ::std::mem::align_of::<odbspdlname>(),
        1usize,
        concat!("Alignment of ", stringify!(odbspdlname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdlname),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdlname),
            "::",
            stringify!(suff1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdlname),
            "::",
            stringify!(suff2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbspdlname),
            "::",
            stringify!(suff3)
        )
    );
}
pub type ODBSPDLNAME = odbspdlname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrelaxis {
    pub path: ::std::os::raw::c_short,
    pub rel_axis: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbrelaxis() {
    const UNINIT: ::std::mem::MaybeUninit<odbrelaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrelaxis>(),
        4usize,
        concat!("Size of: ", stringify!(odbrelaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrelaxis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbrelaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrelaxis),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rel_axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrelaxis),
            "::",
            stringify!(rel_axis)
        )
    );
}
pub type ODBRELAXIS = odbrelaxis;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbunsolic {
    pub ipaddr: [::std::os::raw::c_char; 16usize],
    pub port: ::std::os::raw::c_ushort,
    pub reqaddr: ::std::os::raw::c_short,
    pub pmcno: ::std::os::raw::c_short,
    pub retry: ::std::os::raw::c_short,
    pub timeout: ::std::os::raw::c_short,
    pub alivetime: ::std::os::raw::c_short,
    pub setno: ::std::os::raw::c_short,
    pub rddata: [iodbunsolic__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbunsolic__bindgen_ty_1 {
    pub pmc: iodbunsolic__bindgen_ty_1__bindgen_ty_1,
    pub dmy: iodbunsolic__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbunsolic__bindgen_ty_1__bindgen_ty_1 {
    pub type_: ::std::os::raw::c_short,
    pub rdaddr: ::std::os::raw::c_short,
    pub rdno: ::std::os::raw::c_short,
    pub rdsize: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbunsolic__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbunsolic__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbunsolic__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbunsolic__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdaddr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rdaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rdno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdsize) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rdsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbunsolic__bindgen_ty_1__bindgen_ty_2 {
    pub type_: ::std::os::raw::c_short,
    pub dummy1: ::std::os::raw::c_long,
    pub dummy2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbunsolic__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbunsolic__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbunsolic__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbunsolic__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy2)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbunsolic__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbunsolic__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbunsolic__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(iodbunsolic__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbunsolic__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbunsolic__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic__bindgen_ty_1),
            "::",
            stringify!(dmy)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbunsolic() {
    const UNINIT: ::std::mem::MaybeUninit<iodbunsolic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbunsolic>(),
        104usize,
        concat!("Size of: ", stringify!(iodbunsolic))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbunsolic>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbunsolic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(ipaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reqaddr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(reqaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmcno) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(pmcno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alivetime) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(alivetime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setno) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(setno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rddata) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic),
            "::",
            stringify!(rddata)
        )
    );
}
pub type IODBUNSOLIC = iodbunsolic;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct unsolicmsg_type_prm {
    pub type_: ::std::os::raw::c_ushort,
    pub dummy1: [::std::os::raw::c_char; 2usize],
    pub prm: unsolicmsg_type_prm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union unsolicmsg_type_prm__bindgen_ty_1 {
    pub pmc: unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1,
    pub macro_: unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1 {
    pub path: ::std::os::raw::c_ushort,
    pub addr: ::std::os::raw::c_short,
    pub no: ::std::os::raw::c_ulong,
    pub size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2 {
    pub path: ::std::os::raw::c_ushort,
    pub dummy2: [::std::os::raw::c_char; 2usize],
    pub no: ::std::os::raw::c_ulong,
    pub num: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(num)
        )
    );
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_prm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_prm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_prm__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(unsolicmsg_type_prm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_prm__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).macro_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm__bindgen_ty_1),
            "::",
            stringify!(macro_)
        )
    );
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_prm() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_prm>(),
        32usize,
        concat!("Size of: ", stringify!(unsolicmsg_type_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(unsolicmsg_type_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_prm),
            "::",
            stringify!(prm)
        )
    );
}
pub type UNSOLICMSG_TYPE_PRM = unsolicmsg_type_prm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbunsolic2 {
    pub ipaddr: [::std::os::raw::c_char; 64usize],
    pub port: ::std::os::raw::c_ulong,
    pub retry: ::std::os::raw::c_ushort,
    pub timeout: ::std::os::raw::c_ushort,
    pub alivetime: ::std::os::raw::c_ushort,
    pub dummy1: [::std::os::raw::c_char; 8usize],
    pub cntrl: UNSOLICMSG_TYPE_PRM,
    pub transnum: ::std::os::raw::c_ushort,
    pub dummy2: [::std::os::raw::c_char; 14usize],
    pub trans: [UNSOLICMSG_TYPE_PRM; 3usize],
}
#[test]
fn bindgen_test_layout_iodbunsolic2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbunsolic2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbunsolic2>(),
        232usize,
        concat!("Size of: ", stringify!(iodbunsolic2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbunsolic2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbunsolic2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(ipaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alivetime) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(alivetime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cntrl) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(cntrl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transnum) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(transnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbunsolic2),
            "::",
            stringify!(trans)
        )
    );
}
pub type IODBUNSOLIC2 = iodbunsolic2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbunsolicmsg {
    pub getno: ::std::os::raw::c_short,
    pub msg: [idbunsolicmsg__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbunsolicmsg__bindgen_ty_1 {
    pub rdsize: ::std::os::raw::c_short,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_idbunsolicmsg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<idbunsolicmsg__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbunsolicmsg__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(idbunsolicmsg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<idbunsolicmsg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(idbunsolicmsg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg__bindgen_ty_1),
            "::",
            stringify!(rdsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_idbunsolicmsg() {
    const UNINIT: ::std::mem::MaybeUninit<idbunsolicmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbunsolicmsg>(),
        56usize,
        concat!("Size of: ", stringify!(idbunsolicmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<idbunsolicmsg>(),
        8usize,
        concat!("Alignment of ", stringify!(idbunsolicmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg),
            "::",
            stringify!(getno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg),
            "::",
            stringify!(msg)
        )
    );
}
pub type IDBUNSOLICMSG = idbunsolicmsg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct unsolicmsg_type_msg {
    pub type_: ::std::os::raw::c_ushort,
    pub dummy1: [::std::os::raw::c_char; 2usize],
    pub msg: unsolicmsg_type_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union unsolicmsg_type_msg__bindgen_ty_1 {
    pub pmc: unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1,
    pub macro_: unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1 {
    pub path: ::std::os::raw::c_ushort,
    pub dummy2: [::std::os::raw::c_char; 2usize],
    pub size: ::std::os::raw::c_ulong,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2 {
    pub path: ::std::os::raw::c_ushort,
    pub dummy3: [::std::os::raw::c_char; 2usize],
    pub num: ::std::os::raw::c_ulong,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_msg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_msg__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_msg__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(unsolicmsg_type_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_msg__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).macro_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg__bindgen_ty_1),
            "::",
            stringify!(macro_)
        )
    );
}
#[test]
fn bindgen_test_layout_unsolicmsg_type_msg() {
    const UNINIT: ::std::mem::MaybeUninit<unsolicmsg_type_msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unsolicmsg_type_msg>(),
        32usize,
        concat!("Size of: ", stringify!(unsolicmsg_type_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<unsolicmsg_type_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(unsolicmsg_type_msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unsolicmsg_type_msg),
            "::",
            stringify!(msg)
        )
    );
}
pub type UNSOLICMSG_TYPE_MSG = unsolicmsg_type_msg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct idbunsolicmsg2 {
    pub getnum: ::std::os::raw::c_ushort,
    pub dummy: [::std::os::raw::c_char; 2usize],
    pub get: [UNSOLICMSG_TYPE_MSG; 3usize],
}
#[test]
fn bindgen_test_layout_idbunsolicmsg2() {
    const UNINIT: ::std::mem::MaybeUninit<idbunsolicmsg2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbunsolicmsg2>(),
        104usize,
        concat!("Size of: ", stringify!(idbunsolicmsg2))
    );
    assert_eq!(
        ::std::mem::align_of::<idbunsolicmsg2>(),
        8usize,
        concat!("Alignment of ", stringify!(idbunsolicmsg2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg2),
            "::",
            stringify!(getnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbunsolicmsg2),
            "::",
            stringify!(get)
        )
    );
}
pub type IDBUNSOLICMSG2 = idbunsolicmsg2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtrq {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_ushort; 32usize],
}
#[test]
fn bindgen_test_layout_idbtrq() {
    const UNINIT: ::std::mem::MaybeUninit<idbtrq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtrq>(),
        68usize,
        concat!("Size of: ", stringify!(idbtrq))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtrq>(),
        2usize,
        concat!("Alignment of ", stringify!(idbtrq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtrq),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtrq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtrq),
            "::",
            stringify!(data)
        )
    );
}
pub type IDBTRQ = idbtrq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ODBP_FTRQ_PRM_INF {
    pub smpl_enbl: ::std::os::raw::c_char,
    pub cycle: ::std::os::raw::c_char,
    pub axis_num: ::std::os::raw::c_char,
    pub dummy1: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ODBP_FTRQ_PRM_INF() {
    const UNINIT: ::std::mem::MaybeUninit<ODBP_FTRQ_PRM_INF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ODBP_FTRQ_PRM_INF>(),
        4usize,
        concat!("Size of: ", stringify!(ODBP_FTRQ_PRM_INF))
    );
    assert_eq!(
        ::std::mem::align_of::<ODBP_FTRQ_PRM_INF>(),
        1usize,
        concat!("Alignment of ", stringify!(ODBP_FTRQ_PRM_INF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smpl_enbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBP_FTRQ_PRM_INF),
            "::",
            stringify!(smpl_enbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycle) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBP_FTRQ_PRM_INF),
            "::",
            stringify!(cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBP_FTRQ_PRM_INF),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBP_FTRQ_PRM_INF),
            "::",
            stringify!(dummy1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct embtcpprmw {
    pub IPAddress: [::std::os::raw::c_char; 16usize],
    pub SubNetMask: [::std::os::raw::c_char; 16usize],
    pub RouterIPAddress: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_embtcpprmw() {
    const UNINIT: ::std::mem::MaybeUninit<embtcpprmw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<embtcpprmw>(),
        48usize,
        concat!("Size of: ", stringify!(embtcpprmw))
    );
    assert_eq!(
        ::std::mem::align_of::<embtcpprmw>(),
        1usize,
        concat!("Alignment of ", stringify!(embtcpprmw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IPAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(embtcpprmw),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(embtcpprmw),
            "::",
            stringify!(SubNetMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIPAddress) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(embtcpprmw),
            "::",
            stringify!(RouterIPAddress)
        )
    );
}
pub type EMBTCPPRMW = embtcpprmw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fwlibprmw {
    pub TcpPort: ::std::os::raw::c_ushort,
    pub UdpPort: ::std::os::raw::c_ushort,
    pub UdpInterval: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_fwlibprmw() {
    const UNINIT: ::std::mem::MaybeUninit<fwlibprmw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fwlibprmw>(),
        6usize,
        concat!("Size of: ", stringify!(fwlibprmw))
    );
    assert_eq!(
        ::std::mem::align_of::<fwlibprmw>(),
        2usize,
        concat!("Alignment of ", stringify!(fwlibprmw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fwlibprmw),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPort) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fwlibprmw),
            "::",
            stringify!(UdpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpInterval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fwlibprmw),
            "::",
            stringify!(UdpInterval)
        )
    );
}
pub type FWLIBPRMW = fwlibprmw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flinkprmw {
    pub IPAddress: [::std::os::raw::c_char; 16usize],
    pub Port: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_flinkprmw() {
    const UNINIT: ::std::mem::MaybeUninit<flinkprmw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flinkprmw>(),
        18usize,
        concat!("Size of: ", stringify!(flinkprmw))
    );
    assert_eq!(
        ::std::mem::align_of::<flinkprmw>(),
        2usize,
        concat!("Alignment of ", stringify!(flinkprmw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IPAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flinkprmw),
            "::",
            stringify!(IPAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flinkprmw),
            "::",
            stringify!(Port)
        )
    );
}
pub type FLINKPRMW = flinkprmw;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbembethprmw {
    pub embethprm: iodbembethprmw__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbembethprmw__bindgen_ty_1 {
    pub tcpip: EMBTCPPRMW,
    pub fwlib: FWLIBPRMW,
    pub flink: FLINKPRMW,
    pub MACAddress: [::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout_iodbembethprmw__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbembethprmw__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbembethprmw__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(iodbembethprmw__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbembethprmw__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbembethprmw__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbembethprmw__bindgen_ty_1),
            "::",
            stringify!(tcpip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fwlib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbembethprmw__bindgen_ty_1),
            "::",
            stringify!(fwlib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flink) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbembethprmw__bindgen_ty_1),
            "::",
            stringify!(flink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbembethprmw__bindgen_ty_1),
            "::",
            stringify!(MACAddress)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbembethprmw() {
    const UNINIT: ::std::mem::MaybeUninit<iodbembethprmw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbembethprmw>(),
        48usize,
        concat!("Size of: ", stringify!(iodbembethprmw))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbembethprmw>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbembethprmw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embethprm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbembethprmw),
            "::",
            stringify!(embethprm)
        )
    );
}
pub type IODBEMBETHPRMW = iodbembethprmw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpmainte {
    pub name: [::std::os::raw::c_char; 62usize],
    pub type_: ::std::os::raw::c_long,
    pub total: ::std::os::raw::c_long,
    pub remain: ::std::os::raw::c_long,
    pub stat: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbpmainte() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpmainte> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpmainte>(),
        96usize,
        concat!("Size of: ", stringify!(iodbpmainte))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpmainte>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpmainte))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmainte),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmainte),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmainte),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remain) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmainte),
            "::",
            stringify!(remain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmainte),
            "::",
            stringify!(stat)
        )
    );
}
pub type IODBPMAINTE = iodbpmainte;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbofslen {
    pub len: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbofslen() {
    const UNINIT: ::std::mem::MaybeUninit<odbofslen> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbofslen>(),
        16usize,
        concat!("Size of: ", stringify!(odbofslen))
    );
    assert_eq!(
        ::std::mem::align_of::<odbofslen>(),
        8usize,
        concat!("Alignment of ", stringify!(odbofslen))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbofslen),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbofslen),
            "::",
            stringify!(dec)
        )
    );
}
pub type ODBOFSLEN = odbofslen;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsysex {
    pub max_axis: ::std::os::raw::c_short,
    pub max_spdl: ::std::os::raw::c_short,
    pub max_path: ::std::os::raw::c_short,
    pub max_mchn: ::std::os::raw::c_short,
    pub ctrl_axis: ::std::os::raw::c_short,
    pub ctrl_srvo: ::std::os::raw::c_short,
    pub ctrl_spdl: ::std::os::raw::c_short,
    pub ctrl_path: ::std::os::raw::c_short,
    pub ctrl_mchn: ::std::os::raw::c_short,
    pub addinfo: ::std::os::raw::c_short,
    pub reserved: [::std::os::raw::c_short; 2usize],
    pub path: [odbsysex__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsysex__bindgen_ty_1 {
    pub system: ::std::os::raw::c_short,
    pub group: ::std::os::raw::c_short,
    pub attrib: ::std::os::raw::c_short,
    pub ctrl_axis: ::std::os::raw::c_short,
    pub ctrl_srvo: ::std::os::raw::c_short,
    pub ctrl_spdl: ::std::os::raw::c_short,
    pub mchn_no: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsysex__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbsysex__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsysex__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(odbsysex__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsysex__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsysex__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_axis) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(ctrl_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_srvo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(ctrl_srvo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_spdl) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(ctrl_spdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mchn_no) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(mchn_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_odbsysex() {
    const UNINIT: ::std::mem::MaybeUninit<odbsysex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsysex>(),
        264usize,
        concat!("Size of: ", stringify!(odbsysex))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsysex>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsysex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(max_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_spdl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(max_spdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(max_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mchn) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(max_mchn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_axis) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(ctrl_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_srvo) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(ctrl_srvo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_spdl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(ctrl_spdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_path) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(ctrl_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrl_mchn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(ctrl_mchn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addinfo) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(addinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsysex),
            "::",
            stringify!(path)
        )
    );
}
pub type ODBSYSEX = odbsysex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wseterror {
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_wseterror() {
    const UNINIT: ::std::mem::MaybeUninit<wseterror> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wseterror>(),
        16usize,
        concat!("Size of: ", stringify!(wseterror))
    );
    assert_eq!(
        ::std::mem::align_of::<wseterror>(),
        8usize,
        concat!("Alignment of ", stringify!(wseterror))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wseterror),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wseterror),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(wseterror),
            "::",
            stringify!(dummy)
        )
    );
}
pub type REALWSET = wseterror;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwseterror {
    pub d_no: ::std::os::raw::c_long,
    pub data_act: [::std::os::raw::c_long; 6usize],
    pub dp_act: [::std::os::raw::c_long; 6usize],
    pub dsp_ix: [::std::os::raw::c_long; 2usize],
    pub data: [[REALWSET; 8usize]; 8usize],
}
#[test]
fn bindgen_test_layout_iodbwseterror() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwseterror> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwseterror>(),
        1144usize,
        concat!("Size of: ", stringify!(iodbwseterror))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwseterror>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwseterror))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwseterror),
            "::",
            stringify!(d_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_act) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwseterror),
            "::",
            stringify!(data_act)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dp_act) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwseterror),
            "::",
            stringify!(dp_act)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp_ix) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwseterror),
            "::",
            stringify!(dsp_ix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwseterror),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBWSETERROR = iodbwseterror;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtrns {
    pub status: ::std::os::raw::c_short,
    pub pct: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub dummy: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odbtrns() {
    const UNINIT: ::std::mem::MaybeUninit<odbtrns> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtrns>(),
        8usize,
        concat!("Size of: ", stringify!(odbtrns))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtrns>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtrns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtrns),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pct) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtrns),
            "::",
            stringify!(pct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtrns),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtrns),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBTRNS = odbtrns;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblrninfo {
    pub name: [::std::os::raw::c_char; 33usize],
    pub dummy1: [::std::os::raw::c_char; 3usize],
    pub axis: [[::std::os::raw::c_char; 4usize]; 4usize],
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub comment: [::std::os::raw::c_char; 33usize],
    pub dummy2: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odblrninfo() {
    const UNINIT: ::std::mem::MaybeUninit<odblrninfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblrninfo>(),
        100usize,
        concat!("Size of: ", stringify!(odblrninfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odblrninfo>(),
        2usize,
        concat!("Alignment of ", stringify!(odblrninfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo),
            "::",
            stringify!(dummy2)
        )
    );
}
pub type ODBLRNINFO = odblrninfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblrninfo2 {
    pub name: [::std::os::raw::c_char; 33usize],
    pub dummy1: [::std::os::raw::c_char; 3usize],
    pub axis: [[::std::os::raw::c_char; 4usize]; 20usize],
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub comment: [::std::os::raw::c_char; 33usize],
    pub dummy2: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odblrninfo2() {
    const UNINIT: ::std::mem::MaybeUninit<odblrninfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblrninfo2>(),
        164usize,
        concat!("Size of: ", stringify!(odblrninfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<odblrninfo2>(),
        2usize,
        concat!("Alignment of ", stringify!(odblrninfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfo2),
            "::",
            stringify!(dummy2)
        )
    );
}
pub type ODBLRNINFO2 = odblrninfo2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblrninfol {
    pub axis: [::std::os::raw::c_char; 4usize],
    pub name: [::std::os::raw::c_char; 33usize],
    pub comment: [::std::os::raw::c_char; 33usize],
    pub path: ::std::os::raw::c_char,
    pub dummy1: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odblrninfol() {
    const UNINIT: ::std::mem::MaybeUninit<odblrninfol> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblrninfol>(),
        72usize,
        concat!("Size of: ", stringify!(odblrninfol))
    );
    assert_eq!(
        ::std::mem::align_of::<odblrninfol>(),
        1usize,
        concat!("Alignment of ", stringify!(odblrninfol))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfol),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfol),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfol),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfol),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrninfol),
            "::",
            stringify!(dummy1)
        )
    );
}
pub type ODBLRNINFOL = odblrninfol;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblrnprf {
    pub status: ::std::os::raw::c_char,
    pub comment: [::std::os::raw::c_char; 17usize],
    pub path: ::std::os::raw::c_char,
    pub dummy1: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odblrnprf() {
    const UNINIT: ::std::mem::MaybeUninit<odblrnprf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblrnprf>(),
        20usize,
        concat!("Size of: ", stringify!(odblrnprf))
    );
    assert_eq!(
        ::std::mem::align_of::<odblrnprf>(),
        1usize,
        concat!("Alignment of ", stringify!(odblrnprf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrnprf),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrnprf),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrnprf),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(odblrnprf),
            "::",
            stringify!(dummy1)
        )
    );
}
pub type ODBLRNPRF = odblrnprf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbkeyinfo {
    pub key: [::std::os::raw::c_ulong; 2usize],
}
#[test]
fn bindgen_test_layout_odbkeyinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbkeyinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbkeyinfo>(),
        16usize,
        concat!("Size of: ", stringify!(odbkeyinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbkeyinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbkeyinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbkeyinfo),
            "::",
            stringify!(key)
        )
    );
}
pub type ODBKEYINFO = odbkeyinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prginf {
    pub prgid: [::std::os::raw::c_ulong; 4usize],
}
#[test]
fn bindgen_test_layout_prginf() {
    const UNINIT: ::std::mem::MaybeUninit<prginf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prginf>(),
        32usize,
        concat!("Size of: ", stringify!(prginf))
    );
    assert_eq!(
        ::std::mem::align_of::<prginf>(),
        8usize,
        concat!("Alignment of ", stringify!(prginf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prginf),
            "::",
            stringify!(prgid)
        )
    );
}
pub type PRGINF = prginf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct toolinf {
    pub tcode: ::std::os::raw::c_long,
    pub magazin: ::std::os::raw::c_long,
    pub pot: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_toolinf() {
    const UNINIT: ::std::mem::MaybeUninit<toolinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<toolinf>(),
        24usize,
        concat!("Size of: ", stringify!(toolinf))
    );
    assert_eq!(
        ::std::mem::align_of::<toolinf>(),
        8usize,
        concat!("Alignment of ", stringify!(toolinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(toolinf),
            "::",
            stringify!(tcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magazin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(toolinf),
            "::",
            stringify!(magazin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(toolinf),
            "::",
            stringify!(pot)
        )
    );
}
pub type TOOLINF = toolinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posinf {
    pub pos: posinf__bindgen_ty_1,
    pub feed: posinf__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posinf__bindgen_ty_1 {
    pub prec_pntr: ::std::os::raw::c_short,
    pub prec_time: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_long; 2usize],
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_posinf__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<posinf__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posinf__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(posinf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<posinf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(posinf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prec_pntr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_1),
            "::",
            stringify!(prec_pntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prec_time) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_1),
            "::",
            stringify!(prec_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_1),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_1),
            "::",
            stringify!(unit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posinf__bindgen_ty_2 {
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_short,
    pub unit: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_posinf__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<posinf__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posinf__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(posinf__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<posinf__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(posinf__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_2),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf__bindgen_ty_2),
            "::",
            stringify!(unit)
        )
    );
}
#[test]
fn bindgen_test_layout_posinf() {
    const UNINIT: ::std::mem::MaybeUninit<posinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posinf>(),
        48usize,
        concat!("Size of: ", stringify!(posinf))
    );
    assert_eq!(
        ::std::mem::align_of::<posinf>(),
        8usize,
        concat!("Alignment of ", stringify!(posinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(posinf),
            "::",
            stringify!(feed)
        )
    );
}
pub type POSINF = posinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dchk {
    pub pathno: ::std::os::raw::c_long,
    pub path: [odb3dchk__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dchk__bindgen_ty_1 {
    pub mode: ::std::os::raw::c_long,
    pub prginf: PRGINF,
    pub dummy: [::std::os::raw::c_long; 2usize],
    pub mcode: [::std::os::raw::c_long; 2usize],
    pub tlinf: TOOLINF,
    pub dummy2: [::std::os::raw::c_long; 3usize],
    pub ctrlaxis: ::std::os::raw::c_long,
    pub data: [POSINF; 32usize],
}
#[test]
fn bindgen_test_layout_odb3dchk__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dchk__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dchk__bindgen_ty_1>(),
        1664usize,
        concat!("Size of: ", stringify!(odb3dchk__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dchk__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dchk__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prginf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(prginf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlinf) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(tlinf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctrlaxis) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(ctrlaxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_odb3dchk() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dchk> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dchk>(),
        24968usize,
        concat!("Size of: ", stringify!(odb3dchk))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dchk>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dchk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pathno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk),
            "::",
            stringify!(pathno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dchk),
            "::",
            stringify!(path)
        )
    );
}
pub type ODB3DCHK = odb3dchk;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dmtbinfo {
    pub prginf: PRGINF,
    pub mcode: [::std::os::raw::c_long; 3usize],
    pub bcode: ::std::os::raw::c_long,
    pub tlinf: TOOLINF,
    pub hisorder: ::std::os::raw::c_long,
    pub dummy: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_odb3dmtbinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dmtbinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dmtbinfo>(),
        120usize,
        concat!("Size of: ", stringify!(odb3dmtbinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dmtbinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dmtbinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prginf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo),
            "::",
            stringify!(prginf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcode) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo),
            "::",
            stringify!(bcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlinf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo),
            "::",
            stringify!(tlinf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hisorder) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo),
            "::",
            stringify!(hisorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODB3DMTBINFO = odb3dmtbinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odb3dmtbinfo2 {
    pub path: ::std::os::raw::c_ulong,
    pub prginf: PRGINF,
    pub mcode: [::std::os::raw::c_long; 3usize],
    pub bcode: ::std::os::raw::c_long,
    pub tlinf: TOOLINF,
    pub dummy: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_odb3dmtbinfo2() {
    const UNINIT: ::std::mem::MaybeUninit<odb3dmtbinfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odb3dmtbinfo2>(),
        128usize,
        concat!("Size of: ", stringify!(odb3dmtbinfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<odb3dmtbinfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(odb3dmtbinfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo2),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prginf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo2),
            "::",
            stringify!(prginf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo2),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bcode) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo2),
            "::",
            stringify!(bcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlinf) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo2),
            "::",
            stringify!(tlinf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odb3dmtbinfo2),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODB3DMTBINFO2 = odb3dmtbinfo2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idb3dmstop {
    pub path: [idb3dmstop__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idb3dmstop__bindgen_ty_1 {
    pub plus: ::std::os::raw::c_ulong,
    pub minus: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_idb3dmstop__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<idb3dmstop__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idb3dmstop__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(idb3dmstop__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<idb3dmstop__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(idb3dmstop__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idb3dmstop__bindgen_ty_1),
            "::",
            stringify!(plus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idb3dmstop__bindgen_ty_1),
            "::",
            stringify!(minus)
        )
    );
}
#[test]
fn bindgen_test_layout_idb3dmstop() {
    const UNINIT: ::std::mem::MaybeUninit<idb3dmstop> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idb3dmstop>(),
        240usize,
        concat!("Size of: ", stringify!(idb3dmstop))
    );
    assert_eq!(
        ::std::mem::align_of::<idb3dmstop>(),
        8usize,
        concat!("Alignment of ", stringify!(idb3dmstop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idb3dmstop),
            "::",
            stringify!(path)
        )
    );
}
pub type IDB3DMSTOP = idb3dmstop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cexeinfo {
    pub cond: ::std::os::raw::c_long,
    pub cycle: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
    pub time: ::std::os::raw::c_long,
    pub dummy1: ::std::os::raw::c_long,
    pub dummy2: ::std::os::raw::c_long,
    pub dummy3: ::std::os::raw::c_long,
    pub dummy4: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_cexeinfo() {
    const UNINIT: ::std::mem::MaybeUninit<cexeinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cexeinfo>(),
        64usize,
        concat!("Size of: ", stringify!(cexeinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<cexeinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(cexeinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(dummy3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy4) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cexeinfo),
            "::",
            stringify!(dummy4)
        )
    );
}
pub type CEXEINFO = cexeinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmnddata {
    pub val: f64,
    pub dec: ::std::os::raw::c_long,
    pub dummy: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_cmnddata() {
    const UNINIT: ::std::mem::MaybeUninit<cmnddata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmnddata>(),
        24usize,
        concat!("Size of: ", stringify!(cmnddata))
    );
    assert_eq!(
        ::std::mem::align_of::<cmnddata>(),
        8usize,
        concat!("Alignment of ", stringify!(cmnddata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmnddata),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmnddata),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmnddata),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CMNDDATA = cmnddata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcancmd {
    pub p_data: CMNDDATA,
    pub q_data: CMNDDATA,
    pub r_data: CMNDDATA,
    pub z_data: CMNDDATA,
}
#[test]
fn bindgen_test_layout_odbcancmd() {
    const UNINIT: ::std::mem::MaybeUninit<odbcancmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcancmd>(),
        96usize,
        concat!("Size of: ", stringify!(odbcancmd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcancmd>(),
        8usize,
        concat!("Alignment of ", stringify!(odbcancmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcancmd),
            "::",
            stringify!(p_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcancmd),
            "::",
            stringify!(q_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcancmd),
            "::",
            stringify!(r_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_data) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcancmd),
            "::",
            stringify!(z_data)
        )
    );
}
pub type ODBCANCMD = odbcancmd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmdginfo {
    pub alm_no: ::std::os::raw::c_long,
    pub type_: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub path: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbmdginfo() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmdginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmdginfo>(),
        16usize,
        concat!("Size of: ", stringify!(iodbmdginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmdginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmdginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmdginfo),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmdginfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmdginfo),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmdginfo),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmdginfo),
            "::",
            stringify!(reserved)
        )
    );
}
pub type IODBMDGINFO = iodbmdginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdgmsg {
    pub alm_no: ::std::os::raw::c_long,
    pub msgidx: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
    pub type_: [::std::os::raw::c_char; 4usize],
    pub part: [::std::os::raw::c_char; 4usize],
    pub level: [::std::os::raw::c_char; 4usize],
    pub add_inf: [::std::os::raw::c_char; 4usize],
    pub mark: [::std::os::raw::c_char; 20usize],
    pub message: [::std::os::raw::c_char; 100usize],
    pub cause: [::std::os::raw::c_char; 300usize],
}
#[test]
fn bindgen_test_layout_odbmdgmsg() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdgmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdgmsg>(),
        448usize,
        concat!("Size of: ", stringify!(odbmdgmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdgmsg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdgmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgidx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(msgidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).part) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_inf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(add_inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cause) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgmsg),
            "::",
            stringify!(cause)
        )
    );
}
pub type ODBMDGMSG = odbmdgmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdgflow {
    pub msgidx: ::std::os::raw::c_short,
    pub yesidx: ::std::os::raw::c_short,
    pub noidx: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
    pub message: [::std::os::raw::c_char; 400usize],
    pub detail: ::std::os::raw::c_short,
    pub operate: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbmdgflow() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdgflow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdgflow>(),
        412usize,
        concat!("Size of: ", stringify!(odbmdgflow))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdgflow>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmdgflow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgidx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(msgidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yesidx) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(yesidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noidx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(noidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detail) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operate) as usize - ptr as usize },
        410usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgflow),
            "::",
            stringify!(operate)
        )
    );
}
pub type ODBMDGFLOW = odbmdgflow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdgdtmsg {
    pub message: [::std::os::raw::c_char; 1600usize],
    pub imgid: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbmdgdtmsg() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdgdtmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdgdtmsg>(),
        1608usize,
        concat!("Size of: ", stringify!(odbmdgdtmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdgdtmsg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdgdtmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgdtmsg),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imgid) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgdtmsg),
            "::",
            stringify!(imgid)
        )
    );
}
pub type ODBMDGDTMSG = odbmdgdtmsg;
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbmdgval {
    pub lval: ::std::os::raw::c_long,
    pub ulval: ::std::os::raw::c_ulong,
    pub sval: ::std::os::raw::c_short,
    pub usval: ::std::os::raw::c_ushort,
    pub cval: ::std::os::raw::c_char,
    pub ucval: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbmdgval() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdgval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdgval>(),
        8usize,
        concat!("Size of: ", stringify!(odbmdgval))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdgval>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdgval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgval),
            "::",
            stringify!(lval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgval),
            "::",
            stringify!(ulval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgval),
            "::",
            stringify!(sval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgval),
            "::",
            stringify!(usval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgval),
            "::",
            stringify!(cval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgval),
            "::",
            stringify!(ucval)
        )
    );
}
pub type ODBMDGVAL = odbmdgval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbmdgdt {
    pub dt: ODBMDGVAL,
    pub fp: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbmdgdt() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdgdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdgdt>(),
        16usize,
        concat!("Size of: ", stringify!(odbmdgdt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdgdt>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdgdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgdt),
            "::",
            stringify!(dt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgdt),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgdt),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBMDGDT = odbmdgdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsigdio {
    pub sgnl1: ::std::os::raw::c_char,
    pub sgnl2: ::std::os::raw::c_char,
    pub sgnl3: ::std::os::raw::c_char,
    pub sgnl4: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbsigdio() {
    const UNINIT: ::std::mem::MaybeUninit<odbsigdio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsigdio>(),
        4usize,
        concat!("Size of: ", stringify!(odbsigdio))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsigdio>(),
        1usize,
        concat!("Alignment of ", stringify!(odbsigdio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsigdio),
            "::",
            stringify!(sgnl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsigdio),
            "::",
            stringify!(sgnl2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsigdio),
            "::",
            stringify!(sgnl3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgnl4) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsigdio),
            "::",
            stringify!(sgnl4)
        )
    );
}
pub type ODBSIGDIO = odbsigdio;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsv2_grp1 {
    pub cmd_pls: ::std::os::raw::c_long,
    pub fb_pls: ::std::os::raw::c_long,
    pub refc: ::std::os::raw::c_long,
    pub pos_err: ::std::os::raw::c_long,
    pub act_spd: ODBMDGDT,
    pub amr: ::std::os::raw::c_ushort,
    pub reserved: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsv2_grp1() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp1>(),
        56usize,
        concat!("Size of: ", stringify!(odbsv2_grp1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsv2_grp1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_pls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(cmd_pls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_pls) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(fb_pls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(refc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_err) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(pos_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_spd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(act_spd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(amr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp1),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBSV2_GRP1 = odbsv2_grp1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsv2_grp2 {
    pub mt_cur: ODBMDGDT,
    pub trq_cmd: ::std::os::raw::c_short,
    pub efc_cur: ::std::os::raw::c_short,
    pub dlvl: ::std::os::raw::c_ushort,
    pub heat: ::std::os::raw::c_ushort,
    pub opt: ::std::os::raw::c_short,
    pub opt2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsv2_grp2() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp2>(),
        32usize,
        concat!("Size of: ", stringify!(odbsv2_grp2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsv2_grp2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(mt_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trq_cmd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(trq_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efc_cur) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(efc_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlvl) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(dlvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heat) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(heat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp2),
            "::",
            stringify!(opt2)
        )
    );
}
pub type ODBSV2_GRP2 = odbsv2_grp2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsv2_grp3 {
    pub ps_vumb: ODBMDGDT,
    pub ps_vthd: ODBMDGDT,
    pub freq: ODBMDGDT,
    pub ps_vrms: ::std::os::raw::c_ushort,
    pub ps_cur: ::std::os::raw::c_ushort,
    pub dvolt: ::std::os::raw::c_ushort,
    pub ps_statf: ::std::os::raw::c_uchar,
    pub reserved: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbsv2_grp3() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp3>(),
        56usize,
        concat!("Size of: ", stringify!(odbsv2_grp3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsv2_grp3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_vumb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(ps_vumb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_vthd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(ps_vthd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_vrms) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(ps_vrms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_cur) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(ps_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dvolt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(dvolt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_statf) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(ps_statf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp3),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBSV2_GRP3 = odbsv2_grp3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsv2_grp4 {
    pub resistance: ODBMDGDT,
    pub detect_res: ::std::os::raw::c_uchar,
    pub reserved: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout_odbsv2_grp4() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp4>(),
        24usize,
        concat!("Size of: ", stringify!(odbsv2_grp4))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp4>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsv2_grp4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resistance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp4),
            "::",
            stringify!(resistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detect_res) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp4),
            "::",
            stringify!(detect_res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp4),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBSV2_GRP4 = odbsv2_grp4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsv2_grp5 {
    pub ps_dgn: ::std::os::raw::c_ushort,
    pub ps_sub_dgn: ::std::os::raw::c_ushort,
    pub sv_dgn: ::std::os::raw::c_ushort,
    pub ps_int_tmp: ::std::os::raw::c_uchar,
    pub ps_sink_tmp: ::std::os::raw::c_uchar,
    pub sv_int_tmp: ::std::os::raw::c_uchar,
    pub sv_sink_tmp: ::std::os::raw::c_uchar,
    pub amp_grp: ::std::os::raw::c_uchar,
    pub amp_slv: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbsv2_grp5() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp5>(),
        12usize,
        concat!("Size of: ", stringify!(odbsv2_grp5))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp5>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsv2_grp5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_dgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(ps_dgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_sub_dgn) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(ps_sub_dgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_dgn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(sv_dgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_int_tmp) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(ps_int_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_sink_tmp) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(ps_sink_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_int_tmp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(sv_int_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_sink_tmp) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(sv_sink_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_grp) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(amp_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_slv) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp5),
            "::",
            stringify!(amp_slv)
        )
    );
}
pub type ODBSV2_GRP5 = odbsv2_grp5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsv2_grp6 {
    pub sv_up_err1: ::std::os::raw::c_ushort,
    pub sv_up_err2: ::std::os::raw::c_ushort,
    pub sv_lw_err1: ::std::os::raw::c_ushort,
    pub sv_lw_err2: ::std::os::raw::c_ushort,
    pub sv_up_jt1: ::std::os::raw::c_ushort,
    pub sv_up_jt2: ::std::os::raw::c_ushort,
    pub sv_lw_jt1: ::std::os::raw::c_ushort,
    pub sv_lw_jt2: ::std::os::raw::c_ushort,
    pub sdu_up_err1: ::std::os::raw::c_ushort,
    pub sdu_up_err2: ::std::os::raw::c_ushort,
    pub sdu_lw_err1: ::std::os::raw::c_ushort,
    pub sdu_lw_err2: ::std::os::raw::c_ushort,
    pub sdu_up_jt1: ::std::os::raw::c_ushort,
    pub sdu_up_jt2: ::std::os::raw::c_ushort,
    pub sdu_lw_jt1: ::std::os::raw::c_ushort,
    pub sdu_lw_jt2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbsv2_grp6() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp6>(),
        32usize,
        concat!("Size of: ", stringify!(odbsv2_grp6))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp6>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsv2_grp6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_up_err1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_up_err1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_up_err2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_up_err2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_lw_err1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_lw_err1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_lw_err2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_lw_err2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_up_jt1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_up_jt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_up_jt2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_up_jt2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_lw_jt1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_lw_jt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_lw_jt2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sv_lw_jt2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_up_err1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_up_err1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_up_err2) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_up_err2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_lw_err1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_lw_err1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_lw_err2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_lw_err2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_up_jt1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_up_jt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_up_jt2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_up_jt2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_lw_jt1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_lw_jt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sdu_lw_jt2) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp6),
            "::",
            stringify!(sdu_lw_jt2)
        )
    );
}
pub type ODBSV2_GRP6 = odbsv2_grp6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsv2_grp7 {
    pub id_intp: ::std::os::raw::c_ushort,
    pub id_com: ::std::os::raw::c_ushort,
    pub id_wrn: ::std::os::raw::c_ushort,
    pub ed_intp: ::std::os::raw::c_ushort,
    pub ed_com: ::std::os::raw::c_ushort,
    pub ed_wrn: ::std::os::raw::c_ushort,
    pub sv_dat1: ::std::os::raw::c_short,
    pub sv_dat2: ::std::os::raw::c_short,
    pub sv_dat3: ::std::os::raw::c_short,
    pub sv_dat4: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsv2_grp7() {
    const UNINIT: ::std::mem::MaybeUninit<odbsv2_grp7> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsv2_grp7>(),
        20usize,
        concat!("Size of: ", stringify!(odbsv2_grp7))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsv2_grp7>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsv2_grp7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_intp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(id_intp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_com) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(id_com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_wrn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(id_wrn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ed_intp) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(ed_intp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ed_com) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(ed_com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ed_wrn) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(ed_wrn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_dat1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(sv_dat1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_dat2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(sv_dat2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_dat3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(sv_dat3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_dat4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsv2_grp7),
            "::",
            stringify!(sv_dat4)
        )
    );
}
pub type ODBSV2_GRP7 = odbsv2_grp7;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsp2_grp1 {
    pub motion: ::std::os::raw::c_long,
    pub cmd_spd: ::std::os::raw::c_short,
    pub mode: ::std::os::raw::c_char,
    pub gear: ::std::os::raw::c_char,
    pub osel: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 3usize],
    pub sig_in: ODBSIGDIO,
    pub sig_out: ODBSIGDIO,
}
#[test]
fn bindgen_test_layout_odbsp2_grp1() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp1>(),
        24usize,
        concat!("Size of: ", stringify!(odbsp2_grp1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsp2_grp1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_spd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(cmd_spd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gear) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(gear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(osel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_in) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(sig_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_out) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp1),
            "::",
            stringify!(sig_out)
        )
    );
}
pub type ODBSP2_GRP1 = odbsp2_grp1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsp2_grp2 {
    pub pos_err: ::std::os::raw::c_long,
    pub syn_err: ::std::os::raw::c_long,
    pub sp_spd: ::std::os::raw::c_long,
    pub mt_spd: ::std::os::raw::c_long,
    pub mt_cur: ODBMDGDT,
    pub ldmtr: ::std::os::raw::c_ushort,
    pub trq_cmd: ::std::os::raw::c_short,
    pub heat_mt: ::std::os::raw::c_char,
    pub heat_amp: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odbsp2_grp2() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp2>(),
        56usize,
        concat!("Size of: ", stringify!(odbsp2_grp2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsp2_grp2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_err) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(pos_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syn_err) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(syn_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_spd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(sp_spd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_spd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(mt_spd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_cur) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(mt_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldmtr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(ldmtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trq_cmd) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(trq_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heat_mt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(heat_mt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heat_amp) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(heat_amp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp2),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBSP2_GRP2 = odbsp2_grp2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsp2_grp3 {
    pub ps_vumb: ODBMDGDT,
    pub ps_vthd: ODBMDGDT,
    pub freq: ODBMDGDT,
    pub ps_vrms: ::std::os::raw::c_ushort,
    pub ps_cur: ::std::os::raw::c_ushort,
    pub dvolt: ::std::os::raw::c_ushort,
    pub ps_statf: ::std::os::raw::c_uchar,
    pub reserved: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbsp2_grp3() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp3>(),
        56usize,
        concat!("Size of: ", stringify!(odbsp2_grp3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp3>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsp2_grp3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_vumb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(ps_vumb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_vthd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(ps_vthd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_vrms) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(ps_vrms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_cur) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(ps_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dvolt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(dvolt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_statf) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(ps_statf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp3),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBSP2_GRP3 = odbsp2_grp3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsp2_grp4 {
    pub resistance: ODBMDGDT,
    pub detect_res: ::std::os::raw::c_uchar,
    pub reserved: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout_odbsp2_grp4() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp4>(),
        24usize,
        concat!("Size of: ", stringify!(odbsp2_grp4))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp4>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsp2_grp4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resistance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp4),
            "::",
            stringify!(resistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detect_res) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp4),
            "::",
            stringify!(detect_res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp4),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBSP2_GRP4 = odbsp2_grp4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsp2_grp5 {
    pub ps_dgn: ::std::os::raw::c_ushort,
    pub ps_sub_dgn: ::std::os::raw::c_ushort,
    pub sp_dgn: ::std::os::raw::c_ushort,
    pub ps_int_tmp: ::std::os::raw::c_uchar,
    pub ps_sink_tmp: ::std::os::raw::c_uchar,
    pub sp_int_tmp: ::std::os::raw::c_uchar,
    pub sp_sink_tmp: ::std::os::raw::c_uchar,
    pub amp_grp: ::std::os::raw::c_uchar,
    pub amp_slv: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbsp2_grp5() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp5>(),
        12usize,
        concat!("Size of: ", stringify!(odbsp2_grp5))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp5>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsp2_grp5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_dgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(ps_dgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_sub_dgn) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(ps_sub_dgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_dgn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(sp_dgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_int_tmp) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(ps_int_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ps_sink_tmp) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(ps_sink_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_int_tmp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(sp_int_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_sink_tmp) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(sp_sink_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_grp) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(amp_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_slv) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp5),
            "::",
            stringify!(amp_slv)
        )
    );
}
pub type ODBSP2_GRP5 = odbsp2_grp5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsp2_grp6 {
    pub sp_up_err1: ::std::os::raw::c_ushort,
    pub sp_up_err2: ::std::os::raw::c_ushort,
    pub sp_lw_err1: ::std::os::raw::c_ushort,
    pub sp_lw_err2: ::std::os::raw::c_ushort,
    pub sp_up_jt1: ::std::os::raw::c_ushort,
    pub sp_up_jt2: ::std::os::raw::c_ushort,
    pub sp_lw_jt1: ::std::os::raw::c_ushort,
    pub sp_lw_jt2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbsp2_grp6() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp6>(),
        16usize,
        concat!("Size of: ", stringify!(odbsp2_grp6))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp6>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsp2_grp6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_up_err1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_up_err1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_up_err2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_up_err2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_lw_err1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_lw_err1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_lw_err2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_lw_err2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_up_jt1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_up_jt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_up_jt2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_up_jt2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_lw_jt1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_lw_jt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_lw_jt2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp6),
            "::",
            stringify!(sp_lw_jt2)
        )
    );
}
pub type ODBSP2_GRP6 = odbsp2_grp6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbsp2_grp7 {
    pub iab_amplt: ODBMDGDT,
    pub eab_amplt: ODBMDGDT,
    pub iab_ofs_a: ::std::os::raw::c_short,
    pub iab_ofs_b: ::std::os::raw::c_short,
    pub iab_noise: ::std::os::raw::c_short,
    pub eab_ofs_a: ::std::os::raw::c_short,
    pub eab_ofs_b: ::std::os::raw::c_short,
    pub eab_noise: ::std::os::raw::c_short,
    pub iab_max_flt: ::std::os::raw::c_ushort,
    pub eab_max_flt: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbsp2_grp7() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp7> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp7>(),
        48usize,
        concat!("Size of: ", stringify!(odbsp2_grp7))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp7>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsp2_grp7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iab_amplt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(iab_amplt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eab_amplt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(eab_amplt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iab_ofs_a) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(iab_ofs_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iab_ofs_b) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(iab_ofs_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iab_noise) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(iab_noise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eab_ofs_a) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(eab_ofs_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eab_ofs_b) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(eab_ofs_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eab_noise) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(eab_noise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iab_max_flt) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(iab_max_flt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eab_max_flt) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp7),
            "::",
            stringify!(eab_max_flt)
        )
    );
}
pub type ODBSP2_GRP7 = odbsp2_grp7;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsp2_grp8 {
    pub isncr_intp: ::std::os::raw::c_ushort,
    pub isncr_com: ::std::os::raw::c_ushort,
    pub isncr_wrn: ::std::os::raw::c_ushort,
    pub esncr_intp: ::std::os::raw::c_ushort,
    pub esncr_com: ::std::os::raw::c_ushort,
    pub esncr_wrn: ::std::os::raw::c_ushort,
    pub sp_dat1: ::std::os::raw::c_short,
    pub sp_dat2: ::std::os::raw::c_short,
    pub sp_dat3: ::std::os::raw::c_short,
    pub sp_dat4: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsp2_grp8() {
    const UNINIT: ::std::mem::MaybeUninit<odbsp2_grp8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsp2_grp8>(),
        20usize,
        concat!("Size of: ", stringify!(odbsp2_grp8))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsp2_grp8>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsp2_grp8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isncr_intp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(isncr_intp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isncr_com) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(isncr_com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isncr_wrn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(isncr_wrn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esncr_intp) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(esncr_intp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esncr_com) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(esncr_com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esncr_wrn) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(esncr_wrn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_dat1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(sp_dat1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_dat2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(sp_dat2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_dat3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(sp_dat3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_dat4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsp2_grp8),
            "::",
            stringify!(sp_dat4)
        )
    );
}
pub type ODBSP2_GRP8 = odbsp2_grp8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblat_grp1 {
    pub nnum: ::std::os::raw::c_ulong,
    pub prog: [::std::os::raw::c_char; 36usize],
    pub year: ::std::os::raw::c_char,
    pub mon: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub min: ::std::os::raw::c_char,
    pub sec: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_odblat_grp1() {
    const UNINIT: ::std::mem::MaybeUninit<odblat_grp1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblat_grp1>(),
        56usize,
        concat!("Size of: ", stringify!(odblat_grp1))
    );
    assert_eq!(
        ::std::mem::align_of::<odblat_grp1>(),
        8usize,
        concat!("Alignment of ", stringify!(odblat_grp1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(nnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prog) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(prog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odblat_grp1),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBLAT_GRP1 = odblat_grp1;
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbviewgrp2 {
    pub sv1: ODBSV2_GRP1,
    pub sv2: ODBSV2_GRP2,
    pub sv3: ODBSV2_GRP3,
    pub sv4: ODBSV2_GRP4,
    pub sv5: ODBSV2_GRP5,
    pub sv6: ODBSV2_GRP6,
    pub sv7: ODBSV2_GRP7,
    pub sp1: ODBSP2_GRP1,
    pub sp2: ODBSP2_GRP2,
    pub sp3: ODBSP2_GRP3,
    pub sp4: ODBSP2_GRP4,
    pub sp5: ODBSP2_GRP5,
    pub sp6: ODBSP2_GRP6,
    pub sp7: ODBSP2_GRP7,
    pub sp8: ODBSP2_GRP8,
    pub lat1: ODBLAT_GRP1,
}
#[test]
fn bindgen_test_layout_odbviewgrp2() {
    const UNINIT: ::std::mem::MaybeUninit<odbviewgrp2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbviewgrp2>(),
        56usize,
        concat!("Size of: ", stringify!(odbviewgrp2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbviewgrp2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbviewgrp2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv7) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sv7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp7) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(sp8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbviewgrp2),
            "::",
            stringify!(lat1)
        )
    );
}
pub type ODBVIEWGRP2 = odbviewgrp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdgwvdt {
    pub ldata: [::std::os::raw::c_long; 500usize],
    pub p_dec: ::std::os::raw::c_ushort,
    pub num: ::std::os::raw::c_ushort,
    pub channel: ::std::os::raw::c_ushort,
    pub axis: ::std::os::raw::c_ushort,
    pub kind: ::std::os::raw::c_ushort,
    pub interval: ::std::os::raw::c_ushort,
    pub t_cycle: ::std::os::raw::c_ushort,
    pub unit: ::std::os::raw::c_char,
    pub sw_alm: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbmdgwvdt() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdgwvdt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdgwvdt>(),
        4016usize,
        concat!("Size of: ", stringify!(odbmdgwvdt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdgwvdt>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdgwvdt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_dec) as usize - ptr as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(p_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        4002usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        4004usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        4006usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        4010usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_cycle) as usize - ptr as usize },
        4012usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(t_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        4014usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw_alm) as usize - ptr as usize },
        4015usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdgwvdt),
            "::",
            stringify!(sw_alm)
        )
    );
}
pub type ODBMDGWVDT = odbmdgwvdt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbidinf {
    pub id_no: ::std::os::raw::c_long,
    pub drv_no: ::std::os::raw::c_short,
    pub acc_element: ::std::os::raw::c_short,
    pub err_general: ::std::os::raw::c_short,
    pub err_id_no: ::std::os::raw::c_short,
    pub err_id_name: ::std::os::raw::c_short,
    pub err_attr: ::std::os::raw::c_short,
    pub err_unit: ::std::os::raw::c_short,
    pub err_min_val: ::std::os::raw::c_short,
    pub err_max_val: ::std::os::raw::c_short,
    pub id_name_len: ::std::os::raw::c_short,
    pub id_name_max: ::std::os::raw::c_short,
    pub id_name: [::std::os::raw::c_char; 60usize],
    pub attr: ::std::os::raw::c_long,
    pub unit_len: ::std::os::raw::c_short,
    pub unit_max: ::std::os::raw::c_short,
    pub unit: [::std::os::raw::c_char; 12usize],
    pub min_val: ::std::os::raw::c_long,
    pub max_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbidinf() {
    const UNINIT: ::std::mem::MaybeUninit<iodbidinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbidinf>(),
        136usize,
        concat!("Size of: ", stringify!(iodbidinf))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbidinf>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbidinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(id_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drv_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(drv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_element) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(acc_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_general) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_general)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_id_no) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_id_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_id_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_id_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_attr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_unit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_min_val) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_min_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_max_val) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(err_max_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_name_len) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(id_name_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_name_max) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(id_name_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_name) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(id_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_len) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(unit_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_max) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(unit_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_val) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(min_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_val) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbidinf),
            "::",
            stringify!(max_val)
        )
    );
}
pub type IODBIDINF = iodbidinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsrcsst {
    pub acc_element: ::std::os::raw::c_short,
    pub err_general: ::std::os::raw::c_short,
    pub err_id_no: ::std::os::raw::c_short,
    pub err_attr: ::std::os::raw::c_short,
    pub err_op_data: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsrcsst() {
    const UNINIT: ::std::mem::MaybeUninit<odbsrcsst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsrcsst>(),
        10usize,
        concat!("Size of: ", stringify!(odbsrcsst))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsrcsst>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsrcsst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc_element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcsst),
            "::",
            stringify!(acc_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_general) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcsst),
            "::",
            stringify!(err_general)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_id_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcsst),
            "::",
            stringify!(err_id_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_attr) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcsst),
            "::",
            stringify!(err_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_op_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcsst),
            "::",
            stringify!(err_op_data)
        )
    );
}
pub type ODBSRCSST = odbsrcsst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsrcslyt {
    pub spndl: [::std::os::raw::c_short; 4usize],
    pub servo: [::std::os::raw::c_short; 8usize],
    pub axis_name: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_odbsrcslyt() {
    const UNINIT: ::std::mem::MaybeUninit<odbsrcslyt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsrcslyt>(),
        32usize,
        concat!("Size of: ", stringify!(odbsrcslyt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsrcslyt>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsrcslyt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spndl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcslyt),
            "::",
            stringify!(spndl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcslyt),
            "::",
            stringify!(servo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsrcslyt),
            "::",
            stringify!(axis_name)
        )
    );
}
pub type ODBSRCSLYT = odbsrcslyt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbchan {
    pub chno: ::std::os::raw::c_char,
    pub axis: ::std::os::raw::c_char,
    pub datanum: ::std::os::raw::c_long,
    pub datainf: ::std::os::raw::c_ushort,
    pub dataadr: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_idbchan() {
    const UNINIT: ::std::mem::MaybeUninit<idbchan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbchan>(),
        24usize,
        concat!("Size of: ", stringify!(idbchan))
    );
    assert_eq!(
        ::std::mem::align_of::<idbchan>(),
        8usize,
        concat!("Alignment of ", stringify!(idbchan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan),
            "::",
            stringify!(chno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datanum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan),
            "::",
            stringify!(datanum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datainf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan),
            "::",
            stringify!(datainf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataadr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan),
            "::",
            stringify!(dataadr)
        )
    );
}
pub type IDBCHAN = idbchan;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmc_data {
    pub unittype: ::std::os::raw::c_short,
    pub adr: ::std::os::raw::c_char,
    pub bit: ::std::os::raw::c_uchar,
    pub no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_pmc_data() {
    const UNINIT: ::std::mem::MaybeUninit<pmc_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pmc_data>(),
        6usize,
        concat!("Size of: ", stringify!(pmc_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pmc_data>(),
        2usize,
        concat!("Alignment of ", stringify!(pmc_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unittype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmc_data),
            "::",
            stringify!(unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pmc_data),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(pmc_data),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pmc_data),
            "::",
            stringify!(no)
        )
    );
}
pub type PMC_DATA = pmc_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbchan2 {
    pub chno: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub datanum: ::std::os::raw::c_long,
    pub datainf: ::std::os::raw::c_ushort,
    pub dataadr: ::std::os::raw::c_short,
    pub io: [PMC_DATA; 16usize],
}
#[test]
fn bindgen_test_layout_idbchan2() {
    const UNINIT: ::std::mem::MaybeUninit<idbchan2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbchan2>(),
        120usize,
        concat!("Size of: ", stringify!(idbchan2))
    );
    assert_eq!(
        ::std::mem::align_of::<idbchan2>(),
        8usize,
        concat!("Alignment of ", stringify!(idbchan2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan2),
            "::",
            stringify!(chno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan2),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datanum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan2),
            "::",
            stringify!(datanum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datainf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan2),
            "::",
            stringify!(datainf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataadr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan2),
            "::",
            stringify!(dataadr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(idbchan2),
            "::",
            stringify!(io)
        )
    );
}
pub type IDBCHAN2 = idbchan2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trgdata {
    pub seq_no: ::std::os::raw::c_long,
    pub pmc_trg: PMC_DATA,
}
#[test]
fn bindgen_test_layout_trgdata() {
    const UNINIT: ::std::mem::MaybeUninit<trgdata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<trgdata>(),
        16usize,
        concat!("Size of: ", stringify!(trgdata))
    );
    assert_eq!(
        ::std::mem::align_of::<trgdata>(),
        8usize,
        concat!("Alignment of ", stringify!(trgdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trgdata),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_trg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trgdata),
            "::",
            stringify!(pmc_trg)
        )
    );
}
pub type TRG_DATA = trgdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbbinfo {
    pub iochno: ::std::os::raw::c_short,
    pub grpno: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub name: ::std::os::raw::c_char,
    pub suff: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout_odbbinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbbinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbbinfo>(),
        14usize,
        concat!("Size of: ", stringify!(odbbinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbbinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(odbbinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iochno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbinfo),
            "::",
            stringify!(iochno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grpno) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbinfo),
            "::",
            stringify!(grpno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbinfo),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbinfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suff) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbinfo),
            "::",
            stringify!(suff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbbinfo),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBBINFO = odbbinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsd {
    pub chadata: *mut ::std::os::raw::c_ushort,
    pub count: *mut ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbsd() {
    const UNINIT: ::std::mem::MaybeUninit<odbsd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsd>(),
        16usize,
        concat!("Size of: ", stringify!(odbsd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsd>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chadata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsd),
            "::",
            stringify!(chadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsd),
            "::",
            stringify!(count)
        )
    );
}
pub type ODBSD = odbsd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbsfbchan {
    pub chno: ::std::os::raw::c_char,
    pub axis: ::std::os::raw::c_char,
    pub shift: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_idbsfbchan() {
    const UNINIT: ::std::mem::MaybeUninit<idbsfbchan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbsfbchan>(),
        4usize,
        concat!("Size of: ", stringify!(idbsfbchan))
    );
    assert_eq!(
        ::std::mem::align_of::<idbsfbchan>(),
        2usize,
        concat!("Alignment of ", stringify!(idbsfbchan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsfbchan),
            "::",
            stringify!(chno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsfbchan),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsfbchan),
            "::",
            stringify!(shift)
        )
    );
}
pub type IDBSFBCHAN = idbsfbchan;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbsdtchan {
    pub type_: ::std::os::raw::c_short,
    pub chno: ::std::os::raw::c_char,
    pub axis: ::std::os::raw::c_char,
    pub shift: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_idbsdtchan() {
    const UNINIT: ::std::mem::MaybeUninit<idbsdtchan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbsdtchan>(),
        6usize,
        concat!("Size of: ", stringify!(idbsdtchan))
    );
    assert_eq!(
        ::std::mem::align_of::<idbsdtchan>(),
        2usize,
        concat!("Alignment of ", stringify!(idbsdtchan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chno) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan),
            "::",
            stringify!(chno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan),
            "::",
            stringify!(shift)
        )
    );
}
pub type IDBSDTCHAN = idbsdtchan;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbsdtchan2 {
    pub type_: ::std::os::raw::c_short,
    pub chno: ::std::os::raw::c_char,
    pub axis: ::std::os::raw::c_char,
    pub shift: ::std::os::raw::c_ushort,
    pub io: [PMC_DATA; 16usize],
}
#[test]
fn bindgen_test_layout_idbsdtchan2() {
    const UNINIT: ::std::mem::MaybeUninit<idbsdtchan2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbsdtchan2>(),
        102usize,
        concat!("Size of: ", stringify!(idbsdtchan2))
    );
    assert_eq!(
        ::std::mem::align_of::<idbsdtchan2>(),
        2usize,
        concat!("Alignment of ", stringify!(idbsdtchan2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chno) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan2),
            "::",
            stringify!(chno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan2),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan2),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdtchan2),
            "::",
            stringify!(io)
        )
    );
}
pub type IDBSDTCHAN2 = idbsdtchan2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbsdttrg {
    pub seq_no: ::std::os::raw::c_long,
    pub pmc_trg: PMC_DATA,
}
#[test]
fn bindgen_test_layout_idbsdttrg() {
    const UNINIT: ::std::mem::MaybeUninit<idbsdttrg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbsdttrg>(),
        16usize,
        concat!("Size of: ", stringify!(idbsdttrg))
    );
    assert_eq!(
        ::std::mem::align_of::<idbsdttrg>(),
        8usize,
        concat!("Alignment of ", stringify!(idbsdttrg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdttrg),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_trg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbsdttrg),
            "::",
            stringify!(pmc_trg)
        )
    );
}
pub type IDBSDTTRG = idbsdttrg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmtdgn_info {
    pub receipt_num: ::std::os::raw::c_ulong,
    pub time: ::std::os::raw::c_ulong,
    pub status: ::std::os::raw::c_short,
    pub err_num: ::std::os::raw::c_short,
    pub err_msg: [::std::os::raw::c_char; 36usize],
}
#[test]
fn bindgen_test_layout_rmtdgn_info() {
    const UNINIT: ::std::mem::MaybeUninit<rmtdgn_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmtdgn_info>(),
        56usize,
        concat!("Size of: ", stringify!(rmtdgn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rmtdgn_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rmtdgn_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).receipt_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmtdgn_info),
            "::",
            stringify!(receipt_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmtdgn_info),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rmtdgn_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_num) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(rmtdgn_info),
            "::",
            stringify!(err_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_msg) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rmtdgn_info),
            "::",
            stringify!(err_msg)
        )
    );
}
pub type OUT_RMTDGNINFO = rmtdgn_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcaxis {
    pub dummy: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub data: [::std::os::raw::c_uchar; 32usize],
}
#[test]
fn bindgen_test_layout_odbcaxis() {
    const UNINIT: ::std::mem::MaybeUninit<odbcaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcaxis>(),
        36usize,
        concat!("Size of: ", stringify!(odbcaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcaxis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbcaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcaxis),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcaxis),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcaxis),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBCAXIS = odbcaxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbproo8 {
    pub dummy: [::std::os::raw::c_short; 2usize],
    pub data: ::std::os::raw::c_long,
    pub mdata: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbproo8() {
    const UNINIT: ::std::mem::MaybeUninit<odbproo8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbproo8>(),
        24usize,
        concat!("Size of: ", stringify!(odbproo8))
    );
    assert_eq!(
        ::std::mem::align_of::<odbproo8>(),
        8usize,
        concat!("Alignment of ", stringify!(odbproo8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbproo8),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbproo8),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbproo8),
            "::",
            stringify!(mdata)
        )
    );
}
pub type ODBPROO8 = odbproo8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbdyo8 {
    pub dummy: ::std::os::raw::c_short,
    pub axis: ::std::os::raw::c_short,
    pub alarm: ::std::os::raw::c_short,
    pub prgnum: ::std::os::raw::c_long,
    pub prgmnum: ::std::os::raw::c_long,
    pub seqnum: ::std::os::raw::c_long,
    pub actf: ::std::os::raw::c_long,
    pub acts: ::std::os::raw::c_long,
    pub pos: odbdyo8__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbdyo8__bindgen_ty_1 {
    pub faxis: odbdyo8__bindgen_ty_1__bindgen_ty_1,
    pub oaxis: odbdyo8__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdyo8__bindgen_ty_1__bindgen_ty_1 {
    pub absolute: [::std::os::raw::c_long; 32usize],
    pub machine: [::std::os::raw::c_long; 32usize],
    pub relative: [::std::os::raw::c_long; 32usize],
    pub distance: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_odbdyo8__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdyo8__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdyo8__bindgen_ty_1__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdyo8__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdyo8__bindgen_ty_1__bindgen_ty_2 {
    pub absolute: ::std::os::raw::c_long,
    pub machine: ::std::os::raw::c_long,
    pub relative: ::std::os::raw::c_long,
    pub distance: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbdyo8__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbdyo8__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdyo8__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdyo8__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(distance)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdyo8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdyo8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdyo8__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(odbdyo8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdyo8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdyo8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1),
            "::",
            stringify!(faxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8__bindgen_ty_1),
            "::",
            stringify!(oaxis)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdyo8() {
    const UNINIT: ::std::mem::MaybeUninit<odbdyo8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdyo8>(),
        1072usize,
        concat!("Size of: ", stringify!(odbdyo8))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdyo8>(),
        8usize,
        concat!("Alignment of ", stringify!(odbdyo8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(prgnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgmnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(prgmnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acts) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(acts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdyo8),
            "::",
            stringify!(pos)
        )
    );
}
pub type ODBDYO8 = odbdyo8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmdipo8 {
    pub mdiprog: ::std::os::raw::c_long,
    pub mdipntr: ::std::os::raw::c_long,
    pub crntprog: ::std::os::raw::c_long,
    pub crntpntr: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbmdipo8() {
    const UNINIT: ::std::mem::MaybeUninit<odbmdipo8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmdipo8>(),
        32usize,
        concat!("Size of: ", stringify!(odbmdipo8))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmdipo8>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmdipo8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdiprog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdipo8),
            "::",
            stringify!(mdiprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdipntr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdipo8),
            "::",
            stringify!(mdipntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crntprog) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdipo8),
            "::",
            stringify!(crntprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crntpntr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmdipo8),
            "::",
            stringify!(crntpntr)
        )
    );
}
pub type ODBMDIPO8 = odbmdipo8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prgdir2o8 {
    pub number: ::std::os::raw::c_long,
    pub length: ::std::os::raw::c_long,
    pub comment: [::std::os::raw::c_char; 51usize],
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_prgdir2o8() {
    const UNINIT: ::std::mem::MaybeUninit<prgdir2o8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prgdir2o8>(),
        72usize,
        concat!("Size of: ", stringify!(prgdir2o8))
    );
    assert_eq!(
        ::std::mem::align_of::<prgdir2o8>(),
        8usize,
        concat!("Alignment of ", stringify!(prgdir2o8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2o8),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2o8),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2o8),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(prgdir2o8),
            "::",
            stringify!(dummy)
        )
    );
}
pub type PRGDIR2O8 = prgdir2o8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cfileinfo {
    pub fname: [::std::os::raw::c_char; 12usize],
    pub file_size: ::std::os::raw::c_long,
    pub file_attr: ::std::os::raw::c_long,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_cfileinfo() {
    const UNINIT: ::std::mem::MaybeUninit<cfileinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cfileinfo>(),
        48usize,
        concat!("Size of: ", stringify!(cfileinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<cfileinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(cfileinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_attr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(file_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(cfileinfo),
            "::",
            stringify!(second)
        )
    );
}
pub type CFILEINFO = cfileinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBFSSBAMP {
    pub ln_num: ::std::os::raw::c_short,
    pub slave_num: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 8usize],
    pub seires: [::std::os::raw::c_char; 8usize],
    pub unit: [::std::os::raw::c_char; 8usize],
    pub cur: [::std::os::raw::c_char; 8usize],
    pub axis_num: ::std::os::raw::c_short,
    pub axis_name: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_tagODBFSSBAMP() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBFSSBAMP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBFSSBAMP>(),
        42usize,
        concat!("Size of: ", stringify!(tagODBFSSBAMP))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBFSSBAMP>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBFSSBAMP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ln_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(ln_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seires) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(seires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBAMP),
            "::",
            stringify!(axis_name)
        )
    );
}
pub type ODBFSSBAMP = tagODBFSSBAMP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBPLSMDL {
    pub ln_num: ::std::os::raw::c_short,
    pub slave_num: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 8usize],
    pub type_: [::std::os::raw::c_char; 8usize],
    pub pcb_id: [::std::os::raw::c_char; 8usize],
    pub function: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tagODBPLSMDL() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBPLSMDL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBPLSMDL>(),
        60usize,
        concat!("Size of: ", stringify!(tagODBPLSMDL))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBPLSMDL>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBPLSMDL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ln_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBPLSMDL),
            "::",
            stringify!(ln_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBPLSMDL),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBPLSMDL),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBPLSMDL),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcb_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBPLSMDL),
            "::",
            stringify!(pcb_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBPLSMDL),
            "::",
            stringify!(function)
        )
    );
}
pub type ODBPLSMDL = tagODBPLSMDL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIODBFSSBAXIS {
    pub axis_num: ::std::os::raw::c_short,
    pub reserve1: ::std::os::raw::c_short,
    pub axis_name: [::std::os::raw::c_char; 4usize],
    pub amp_name: [::std::os::raw::c_char; 8usize],
    pub m1: ::std::os::raw::c_short,
    pub m2: ::std::os::raw::c_short,
    pub m3: ::std::os::raw::c_short,
    pub m4: ::std::os::raw::c_short,
    pub dsp1: ::std::os::raw::c_short,
    pub cs: ::std::os::raw::c_short,
    pub tndm: ::std::os::raw::c_short,
    pub reserve2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_tagIODBFSSBAXIS() {
    const UNINIT: ::std::mem::MaybeUninit<tagIODBFSSBAXIS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagIODBFSSBAXIS>(),
        32usize,
        concat!("Size of: ", stringify!(tagIODBFSSBAXIS))
    );
    assert_eq!(
        ::std::mem::align_of::<tagIODBFSSBAXIS>(),
        2usize,
        concat!("Alignment of ", stringify!(tagIODBFSSBAXIS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(axis_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(amp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(m1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m2) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(m2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(m3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m4) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(m4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsp1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(dsp1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tndm) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(tndm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBFSSBAXIS),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type IODBFSSBAXIS = tagIODBFSSBAXIS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBFSSBMT {
    pub axis_num: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub axis_name: [::std::os::raw::c_char; 4usize],
    pub amp_name: [::std::os::raw::c_char; 8usize],
    pub amp_seires: [::std::os::raw::c_char; 8usize],
    pub amp_unit: [::std::os::raw::c_char; 8usize],
    pub amp_cur: [::std::os::raw::c_char; 8usize],
    pub amp_edt: [::std::os::raw::c_char; 8usize],
    pub amp_axis_num: ::std::os::raw::c_short,
    pub test_year: ::std::os::raw::c_short,
    pub test_month: ::std::os::raw::c_short,
    pub test_day: ::std::os::raw::c_short,
    pub amp_mainte: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_tagODBFSSBMT() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBFSSBMT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBFSSBMT>(),
        58usize,
        concat!("Size of: ", stringify!(tagODBFSSBMT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBFSSBMT>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBFSSBMT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(axis_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_seires) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_seires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_unit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_cur) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_edt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_edt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_axis_num) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_year) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(test_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_month) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(test_month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test_day) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(test_day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_mainte) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBMT),
            "::",
            stringify!(amp_mainte)
        )
    );
}
pub type ODBFSSBMT = tagODBFSSBMT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBFSSBINFO {
    pub card_num: ::std::os::raw::c_short,
    pub card: [tagODBFSSBINFO__bindgen_ty_1; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBFSSBINFO__bindgen_ty_1 {
    pub amp_num: ::std::os::raw::c_short,
    pub plsm_num: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_tagODBFSSBINFO__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBFSSBINFO__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBFSSBINFO__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(tagODBFSSBINFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBFSSBINFO__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBFSSBINFO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBINFO__bindgen_ty_1),
            "::",
            stringify!(amp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plsm_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBINFO__bindgen_ty_1),
            "::",
            stringify!(plsm_num)
        )
    );
}
#[test]
fn bindgen_test_layout_tagODBFSSBINFO() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBFSSBINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBFSSBINFO>(),
        34usize,
        concat!("Size of: ", stringify!(tagODBFSSBINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBFSSBINFO>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBFSSBINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).card_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBINFO),
            "::",
            stringify!(card_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).card) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBINFO),
            "::",
            stringify!(card)
        )
    );
}
pub type ODBFSSBINFO = tagODBFSSBINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBLINE {
    pub hrv_ln: ::std::os::raw::c_ushort,
    pub ax_num_ln: ::std::os::raw::c_ushort,
    pub sp_num_ln: ::std::os::raw::c_ushort,
    pub pm_num_ln: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tagODBIFSBLINE() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBLINE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBLINE>(),
        8usize,
        concat!("Size of: ", stringify!(tagODBIFSBLINE))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBLINE>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBLINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hrv_ln) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBLINE),
            "::",
            stringify!(hrv_ln)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ax_num_ln) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBLINE),
            "::",
            stringify!(ax_num_ln)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_num_ln) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBLINE),
            "::",
            stringify!(sp_num_ln)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pm_num_ln) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBLINE),
            "::",
            stringify!(pm_num_ln)
        )
    );
}
pub type ODBIFSBLINE = tagODBIFSBLINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBINFO {
    pub fssb_line_mnt_st: ::std::os::raw::c_uchar,
    pub reserve: ::std::os::raw::c_uchar,
    pub card_num: ::std::os::raw::c_ushort,
    pub line_info: [ODBIFSBLINE; 4usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBINFO() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBINFO>(),
        36usize,
        concat!("Size of: ", stringify!(tagODBIFSBINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBINFO>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fssb_line_mnt_st) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBINFO),
            "::",
            stringify!(fssb_line_mnt_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBINFO),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).card_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBINFO),
            "::",
            stringify!(card_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBINFO),
            "::",
            stringify!(line_info)
        )
    );
}
pub type ODBIFSBINFO = tagODBIFSBINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBFSSBSLVUNT {
    pub slv_unt_num: ::std::os::raw::c_short,
    pub kind: ::std::os::raw::c_char,
    pub attrb: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tagODBFSSBSLVUNT() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBFSSBSLVUNT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBFSSBSLVUNT>(),
        4usize,
        concat!("Size of: ", stringify!(tagODBFSSBSLVUNT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBFSSBSLVUNT>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBFSSBSLVUNT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_unt_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBSLVUNT),
            "::",
            stringify!(slv_unt_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBSLVUNT),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrb) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBFSSBSLVUNT),
            "::",
            stringify!(attrb)
        )
    );
}
pub type ODBIFSBSLVUNT = tagODBFSSBSLVUNT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBSLUSV {
    pub slave_num: ::std::os::raw::c_short,
    pub axis_num: ::std::os::raw::c_short,
    pub axis_name: [::std::os::raw::c_char; 4usize],
    pub tndm: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBSLUSV() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBSLUSV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBSLUSV>(),
        12usize,
        concat!("Size of: ", stringify!(tagODBIFSBSLUSV))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBSLUSV>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBSLUSV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSV),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSV),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSV),
            "::",
            stringify!(axis_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tndm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSV),
            "::",
            stringify!(tndm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSV),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBIFSBSLUSV = tagODBIFSBSLUSV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBSVAMP {
    pub slave_num: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 8usize],
    pub series: [::std::os::raw::c_char; 12usize],
    pub cur: [::std::os::raw::c_char; 8usize],
    pub as_axis_num: ::std::os::raw::c_short,
    pub as_axis_name: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBSVAMP() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBSVAMP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBSVAMP>(),
        36usize,
        concat!("Size of: ", stringify!(tagODBIFSBSVAMP))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBSVAMP>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBSVAMP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSVAMP),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSVAMP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSVAMP),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSVAMP),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_axis_num) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSVAMP),
            "::",
            stringify!(as_axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_axis_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSVAMP),
            "::",
            stringify!(as_axis_name)
        )
    );
}
pub type ODBIFSBSVAMP = tagODBIFSBSVAMP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBSLUSP {
    pub slave_num: ::std::os::raw::c_short,
    pub spdl_num: ::std::os::raw::c_short,
    pub spdl_name: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBSLUSP() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBSLUSP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBSLUSP>(),
        8usize,
        concat!("Size of: ", stringify!(tagODBIFSBSLUSP))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBSLUSP>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBSLUSP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSP),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spdl_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSP),
            "::",
            stringify!(spdl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spdl_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUSP),
            "::",
            stringify!(spdl_name)
        )
    );
}
pub type ODBIFSBSLUSP = tagODBIFSBSLUSP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBSLUPM {
    pub slave_num: ::std::os::raw::c_short,
    pub axis_num: [::std::os::raw::c_short; 8usize],
    pub axis_name: [[::std::os::raw::c_char; 4usize]; 8usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBSLUPM() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBSLUPM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBSLUPM>(),
        50usize,
        concat!("Size of: ", stringify!(tagODBIFSBSLUPM))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBSLUPM>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBSLUPM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUPM),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUPM),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSLUPM),
            "::",
            stringify!(axis_name)
        )
    );
}
pub type ODBIFSBSLUPM = tagODBIFSBSLUPM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBSPAMP {
    pub slave_num: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 8usize],
    pub series: [::std::os::raw::c_char; 12usize],
    pub pwr: [::std::os::raw::c_char; 8usize],
    pub as_spdl_num: ::std::os::raw::c_short,
    pub as_spdl_name: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBSPAMP() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBSPAMP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBSPAMP>(),
        36usize,
        concat!("Size of: ", stringify!(tagODBIFSBSPAMP))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBSPAMP>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBSPAMP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSPAMP),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSPAMP),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSPAMP),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSPAMP),
            "::",
            stringify!(pwr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_spdl_num) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSPAMP),
            "::",
            stringify!(as_spdl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_spdl_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSPAMP),
            "::",
            stringify!(as_spdl_name)
        )
    );
}
pub type ODBIFSBSPAMP = tagODBIFSBSPAMP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBPLSMDL {
    pub slave_num: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 8usize],
    pub type_: [::std::os::raw::c_char; 8usize],
    pub pcb_id: ::std::os::raw::c_ushort,
    pub info: [::std::os::raw::c_char; 24usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBPLSMDL() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBPLSMDL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBPLSMDL>(),
        44usize,
        concat!("Size of: ", stringify!(tagODBIFSBPLSMDL))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBPLSMDL>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBPLSMDL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBPLSMDL),
            "::",
            stringify!(slave_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBPLSMDL),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBPLSMDL),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pcb_id) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBPLSMDL),
            "::",
            stringify!(pcb_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBPLSMDL),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBIFSBPLSMDL = tagODBIFSBPLSMDL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIODBIFSBAXIS {
    pub axis_num: ::std::os::raw::c_short,
    pub axis_name: [::std::os::raw::c_char; 4usize],
    pub line: ::std::os::raw::c_short,
    pub amp_name: [::std::os::raw::c_char; 8usize],
    pub pm: [::std::os::raw::c_short; 8usize],
    pub cs: ::std::os::raw::c_short,
    pub tndm: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_tagIODBIFSBAXIS() {
    const UNINIT: ::std::mem::MaybeUninit<tagIODBIFSBAXIS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagIODBIFSBAXIS>(),
        36usize,
        concat!("Size of: ", stringify!(tagIODBIFSBAXIS))
    );
    assert_eq!(
        ::std::mem::align_of::<tagIODBIFSBAXIS>(),
        2usize,
        concat!("Alignment of ", stringify!(tagIODBIFSBAXIS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(axis_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(amp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(pm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tndm) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(tagIODBIFSBAXIS),
            "::",
            stringify!(tndm)
        )
    );
}
pub type IODBIFSBAXIS = tagIODBIFSBAXIS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBMNTSV {
    pub axis_num: ::std::os::raw::c_short,
    pub axis_name: [::std::os::raw::c_char; 4usize],
    pub line: ::std::os::raw::c_short,
    pub amp_name: [::std::os::raw::c_char; 8usize],
    pub amp_series: [::std::os::raw::c_char; 12usize],
    pub amp_cur: [::std::os::raw::c_char; 8usize],
    pub amp_edt: [::std::os::raw::c_char; 8usize],
    pub amp_axis_num: ::std::os::raw::c_short,
    pub amp_spec_num: [::std::os::raw::c_char; 23usize],
    pub amp_serial_num: [::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBMNTSV() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBMNTSV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBMNTSV>(),
        82usize,
        concat!("Size of: ", stringify!(tagODBIFSBMNTSV))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBMNTSV>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBMNTSV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(axis_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_series) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_cur) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_edt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_edt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_axis_num) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_spec_num) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_spec_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_serial_num) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSV),
            "::",
            stringify!(amp_serial_num)
        )
    );
}
pub type ODBIFSBMNTSV = tagODBIFSBMNTSV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBMNTSP {
    pub spdl_num: ::std::os::raw::c_short,
    pub spdl_name: [::std::os::raw::c_char; 4usize],
    pub line: ::std::os::raw::c_short,
    pub amp_name: [::std::os::raw::c_char; 8usize],
    pub amp_series: [::std::os::raw::c_char; 12usize],
    pub amp_pwr: [::std::os::raw::c_char; 8usize],
    pub amp_edt: [::std::os::raw::c_char; 8usize],
    pub amp_spdl_num: ::std::os::raw::c_short,
    pub amp_spec_num: [::std::os::raw::c_char; 23usize],
    pub amp_serial_num: [::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBMNTSP() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBMNTSP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBMNTSP>(),
        82usize,
        concat!("Size of: ", stringify!(tagODBIFSBMNTSP))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBMNTSP>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBMNTSP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spdl_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(spdl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spdl_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(spdl_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_series) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_pwr) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_pwr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_edt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_edt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_spdl_num) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_spdl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_spec_num) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_spec_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amp_serial_num) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBMNTSP),
            "::",
            stringify!(amp_serial_num)
        )
    );
}
pub type ODBIFSBMNTSP = tagODBIFSBMNTSP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBSYSALM {
    pub num_sys_alm: ::std::os::raw::c_long,
    pub error_line: ::std::os::raw::c_short,
    pub error_slvnum1: ::std::os::raw::c_short,
    pub error_slvnum2: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
    pub alarm_cause: [::std::os::raw::c_char; 100usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBSYSALM() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBSYSALM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBSYSALM>(),
        128usize,
        concat!("Size of: ", stringify!(tagODBIFSBSYSALM))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBSYSALM>(),
        8usize,
        concat!("Alignment of ", stringify!(tagODBIFSBSYSALM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sys_alm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(num_sys_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(error_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_slvnum1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(error_slvnum1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_slvnum2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(error_slvnum2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm_cause) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBSYSALM),
            "::",
            stringify!(alarm_cause)
        )
    );
}
pub type ODBIFSBSYSALM = tagODBIFSBSYSALM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBFSSBUNT {
    pub slv_unt_num: ::std::os::raw::c_short,
    pub fssb_unt_num: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBFSSBUNT() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBFSSBUNT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBFSSBUNT>(),
        8usize,
        concat!("Size of: ", stringify!(tagODBIFSBFSSBUNT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBFSSBUNT>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBFSSBUNT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_unt_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBFSSBUNT),
            "::",
            stringify!(slv_unt_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fssb_unt_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBFSSBUNT),
            "::",
            stringify!(fssb_unt_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBFSSBUNT),
            "::",
            stringify!(name)
        )
    );
}
pub type ODBIFSBFSSBUNT = tagODBIFSBFSSBUNT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBCOMSTATDTL {
    pub error_inf: ::std::os::raw::c_long,
    pub jitter_inf: ::std::os::raw::c_long,
    pub n_warning: ::std::os::raw::c_char,
    pub j_warning: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBCOMSTATDTL() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBCOMSTATDTL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBCOMSTATDTL>(),
        24usize,
        concat!("Size of: ", stringify!(tagODBIFSBCOMSTATDTL))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBCOMSTATDTL>(),
        8usize,
        concat!("Alignment of ", stringify!(tagODBIFSBCOMSTATDTL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_inf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBCOMSTATDTL),
            "::",
            stringify!(error_inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitter_inf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBCOMSTATDTL),
            "::",
            stringify!(jitter_inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_warning) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBCOMSTATDTL),
            "::",
            stringify!(n_warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j_warning) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBCOMSTATDTL),
            "::",
            stringify!(j_warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBCOMSTATDTL),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBIFSBCOMSTATDTL = tagODBIFSBCOMSTATDTL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBWARNINGMSG {
    pub line: ::std::os::raw::c_short,
    pub slv_src: ::std::os::raw::c_short,
    pub slv_dst: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub wm_typ: [::std::os::raw::c_char; 32usize],
    pub wm_pnt: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_tagODBIFSBWARNINGMSG() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBWARNINGMSG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBWARNINGMSG>(),
        72usize,
        concat!("Size of: ", stringify!(tagODBIFSBWARNINGMSG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBWARNINGMSG>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBWARNINGMSG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNINGMSG),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_src) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNINGMSG),
            "::",
            stringify!(slv_src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNINGMSG),
            "::",
            stringify!(slv_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNINGMSG),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_typ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNINGMSG),
            "::",
            stringify!(wm_typ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_pnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNINGMSG),
            "::",
            stringify!(wm_pnt)
        )
    );
}
pub type ODBIFSBWARNINGMSG = tagODBIFSBWARNINGMSG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagODBIFSBWARNHSTMSG {
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
    pub msg_dat: ODBIFSBWARNINGMSG,
}
#[test]
fn bindgen_test_layout_tagODBIFSBWARNHSTMSG() {
    const UNINIT: ::std::mem::MaybeUninit<tagODBIFSBWARNHSTMSG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagODBIFSBWARNHSTMSG>(),
        80usize,
        concat!("Size of: ", stringify!(tagODBIFSBWARNHSTMSG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagODBIFSBWARNHSTMSG>(),
        2usize,
        concat!("Alignment of ", stringify!(tagODBIFSBWARNHSTMSG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_dat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagODBIFSBWARNHSTMSG),
            "::",
            stringify!(msg_dat)
        )
    );
}
pub type ODBIFSBWARNHSTMSG = tagODBIFSBWARNHSTMSG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmsrhstinf {
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub minute: ::std::os::raw::c_char,
    pub second: ::std::os::raw::c_char,
    pub msu_num: ::std::os::raw::c_char,
    pub path_num: ::std::os::raw::c_char,
    pub pmc_num: ::std::os::raw::c_char,
    pub nonsave: ::std::os::raw::c_ushort,
    pub save_trigger: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odbmsrhstinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbmsrhstinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmsrhstinf>(),
        16usize,
        concat!("Size of: ", stringify!(odbmsrhstinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmsrhstinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbmsrhstinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msu_num) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(msu_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(path_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_num) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(pmc_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonsave) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(nonsave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_trigger) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(save_trigger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrhstinf),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBMSRHSTINF = odbmsrhstinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_ODBMSUXTERM {
    pub kind: ::std::os::raw::c_char,
    pub ch: ::std::os::raw::c_char,
    pub atrb: ::std::os::raw::c_char,
    pub dec: ::std::os::raw::c_char,
    pub data: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_tag_ODBMSUXTERM() {
    const UNINIT: ::std::mem::MaybeUninit<tag_ODBMSUXTERM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_ODBMSUXTERM>(),
        16usize,
        concat!("Size of: ", stringify!(tag_ODBMSUXTERM))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_ODBMSUXTERM>(),
        8usize,
        concat!("Alignment of ", stringify!(tag_ODBMSUXTERM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUXTERM),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUXTERM),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atrb) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUXTERM),
            "::",
            stringify!(atrb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUXTERM),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUXTERM),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBMSUXTERM = tag_ODBMSUXTERM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_ODBMSUYTERM {
    pub data: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_tag_ODBMSUYTERM() {
    const UNINIT: ::std::mem::MaybeUninit<tag_ODBMSUYTERM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_ODBMSUYTERM>(),
        4usize,
        concat!("Size of: ", stringify!(tag_ODBMSUYTERM))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_ODBMSUYTERM>(),
        2usize,
        concat!("Alignment of ", stringify!(tag_ODBMSUYTERM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUYTERM),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUYTERM),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBMSUYTERM = tag_ODBMSUYTERM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_ODBMSUINF {
    pub pmc_no: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 3usize],
    pub x_top_adrs: ::std::os::raw::c_long,
    pub y_top_adrs: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_tag_ODBMSUINF() {
    const UNINIT: ::std::mem::MaybeUninit<tag_ODBMSUINF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_ODBMSUINF>(),
        24usize,
        concat!("Size of: ", stringify!(tag_ODBMSUINF))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_ODBMSUINF>(),
        8usize,
        concat!("Alignment of ", stringify!(tag_ODBMSUINF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUINF),
            "::",
            stringify!(pmc_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUINF),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_top_adrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUINF),
            "::",
            stringify!(x_top_adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_top_adrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBMSUINF),
            "::",
            stringify!(y_top_adrs)
        )
    );
}
pub type ODBMSUINF = tag_ODBMSUINF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmsudat {
    pub inf: ODBMSUINF,
    pub x_term: [ODBMSUXTERM; 16usize],
    pub y_term: [ODBMSUYTERM; 16usize],
}
#[test]
fn bindgen_test_layout_odbmsudat() {
    const UNINIT: ::std::mem::MaybeUninit<odbmsudat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmsudat>(),
        344usize,
        concat!("Size of: ", stringify!(odbmsudat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmsudat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmsudat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsudat),
            "::",
            stringify!(inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_term) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsudat),
            "::",
            stringify!(x_term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_term) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsudat),
            "::",
            stringify!(y_term)
        )
    );
}
pub type ODBMSUDAT = odbmsudat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_ODBEXPMCSGNLINF {
    pub pmc_no: ::std::os::raw::c_char,
    pub kind: ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
    pub top_adrs: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_tag_ODBEXPMCSGNLINF() {
    const UNINIT: ::std::mem::MaybeUninit<tag_ODBEXPMCSGNLINF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_ODBEXPMCSGNLINF>(),
        16usize,
        concat!("Size of: ", stringify!(tag_ODBEXPMCSGNLINF))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_ODBEXPMCSGNLINF>(),
        8usize,
        concat!("Alignment of ", stringify!(tag_ODBEXPMCSGNLINF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLINF),
            "::",
            stringify!(pmc_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLINF),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLINF),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLINF),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_adrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLINF),
            "::",
            stringify!(top_adrs)
        )
    );
}
pub type ODBEXPMCSGNLINF = tag_ODBEXPMCSGNLINF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_ODBEXPMCSGNLTERM {
    pub data: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tag_ODBEXPMCSGNLTERM() {
    const UNINIT: ::std::mem::MaybeUninit<tag_ODBEXPMCSGNLTERM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_ODBEXPMCSGNLTERM>(),
        2usize,
        concat!("Size of: ", stringify!(tag_ODBEXPMCSGNLTERM))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_ODBEXPMCSGNLTERM>(),
        1usize,
        concat!("Alignment of ", stringify!(tag_ODBEXPMCSGNLTERM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLTERM),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_ODBEXPMCSGNLTERM),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBEXPMCSGNLTERM = tag_ODBEXPMCSGNLTERM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbexpmcsgnl {
    pub inf: [ODBEXPMCSGNLINF; 2usize],
    pub exsgnlterm: [[ODBEXPMCSGNLTERM; 32usize]; 2usize],
}
#[test]
fn bindgen_test_layout_odbexpmcsgnl() {
    const UNINIT: ::std::mem::MaybeUninit<odbexpmcsgnl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbexpmcsgnl>(),
        160usize,
        concat!("Size of: ", stringify!(odbexpmcsgnl))
    );
    assert_eq!(
        ::std::mem::align_of::<odbexpmcsgnl>(),
        8usize,
        concat!("Alignment of ", stringify!(odbexpmcsgnl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexpmcsgnl),
            "::",
            stringify!(inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exsgnlterm) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexpmcsgnl),
            "::",
            stringify!(exsgnlterm)
        )
    );
}
pub type ODBEXPMCSGNL = odbexpmcsgnl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmsrpmcsgnl {
    pub adrs: ::std::os::raw::c_long,
    pub pmc_no: ::std::os::raw::c_char,
    pub kind: ::std::os::raw::c_char,
    pub data: ::std::os::raw::c_char,
    pub mask: ::std::os::raw::c_char,
    pub enbl: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odbmsrpmcsgnl() {
    const UNINIT: ::std::mem::MaybeUninit<odbmsrpmcsgnl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmsrpmcsgnl>(),
        16usize,
        concat!("Size of: ", stringify!(odbmsrpmcsgnl))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmsrpmcsgnl>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmsrpmcsgnl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(pmc_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enbl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(enbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrpmcsgnl),
            "::",
            stringify!(dummy)
        )
    );
}
pub type ODBMSRPMCSGNL = odbmsrpmcsgnl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmsrncdat {
    pub sv_num: ::std::os::raw::c_short,
    pub sp_num: ::std::os::raw::c_short,
    pub mcn: [ODBAXDT; 32usize],
    pub abs: [ODBAXDT; 32usize],
    pub spdl: [ODBAXDT; 8usize],
    pub actf: ODBAXDT,
    pub ex_prg_name: [::std::os::raw::c_char; 248usize],
    pub ex_blk: ::std::os::raw::c_long,
    pub aut: ::std::os::raw::c_short,
    pub tmmode: ::std::os::raw::c_short,
    pub m_mdl: [ODBCMD; 5usize],
    pub s_mdl: ODBCMD,
    pub t_mdl: ODBCMD,
    pub b_mdl: ODBCMD,
}
#[test]
fn bindgen_test_layout_odbmsrncdat() {
    const UNINIT: ::std::mem::MaybeUninit<odbmsrncdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmsrncdat>(),
        2216usize,
        concat!("Size of: ", stringify!(odbmsrncdat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmsrncdat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmsrncdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(sv_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(sp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(mcn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spdl) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(spdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actf) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(actf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ex_prg_name) as usize - ptr as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(ex_prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ex_blk) as usize - ptr as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(ex_blk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aut) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(aut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmmode) as usize - ptr as usize },
        2018usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(tmmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mdl) as usize - ptr as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(m_mdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_mdl) as usize - ptr as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(s_mdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_mdl) as usize - ptr as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(t_mdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mdl) as usize - ptr as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmsrncdat),
            "::",
            stringify!(b_mdl)
        )
    );
}
pub type ODBMSRNCDAT = odbmsrncdat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpowccyc {
    pub cycletime: ::std::os::raw::c_ulong,
    pub powc_axis: ::std::os::raw::c_ulong,
    pub powc_spindle: ::std::os::raw::c_ulong,
    pub powc_outer: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbpowccyc() {
    const UNINIT: ::std::mem::MaybeUninit<odbpowccyc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpowccyc>(),
        32usize,
        concat!("Size of: ", stringify!(odbpowccyc))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpowccyc>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpowccyc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycletime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowccyc),
            "::",
            stringify!(cycletime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powc_axis) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowccyc),
            "::",
            stringify!(powc_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powc_spindle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowccyc),
            "::",
            stringify!(powc_spindle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powc_outer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowccyc),
            "::",
            stringify!(powc_outer)
        )
    );
}
pub type ODBPOWCCYC = odbpowccyc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpowcouter {
    pub ave_pow: [::std::os::raw::c_ulong; 8usize],
    pub ref_ofs: ::std::os::raw::c_ushort,
    pub ref_adrs: ::std::os::raw::c_char,
    pub ref_path: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbpowcouter() {
    const UNINIT: ::std::mem::MaybeUninit<odbpowcouter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpowcouter>(),
        72usize,
        concat!("Size of: ", stringify!(odbpowcouter))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpowcouter>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpowcouter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ave_pow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowcouter),
            "::",
            stringify!(ave_pow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_ofs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowcouter),
            "::",
            stringify!(ref_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_adrs) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowcouter),
            "::",
            stringify!(ref_adrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_path) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowcouter),
            "::",
            stringify!(ref_path)
        )
    );
}
pub type ODBPOWCOUTER = odbpowcouter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpowchis {
    pub get_time: ::std::os::raw::c_ulong,
    pub powc_axis: ::std::os::raw::c_ulong,
    pub powc_spindle: ::std::os::raw::c_ulong,
    pub powc_outer: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbpowchis() {
    const UNINIT: ::std::mem::MaybeUninit<odbpowchis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpowchis>(),
        32usize,
        concat!("Size of: ", stringify!(odbpowchis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpowchis>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpowchis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowchis),
            "::",
            stringify!(get_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powc_axis) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowchis),
            "::",
            stringify!(powc_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powc_spindle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowchis),
            "::",
            stringify!(powc_spindle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powc_outer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowchis),
            "::",
            stringify!(powc_outer)
        )
    );
}
pub type ODBPOWCHIS = odbpowchis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpowchisall {
    pub powchis: [ODBPOWCHIS; 30usize],
}
#[test]
fn bindgen_test_layout_odbpowchisall() {
    const UNINIT: ::std::mem::MaybeUninit<odbpowchisall> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpowchisall>(),
        960usize,
        concat!("Size of: ", stringify!(odbpowchisall))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpowchisall>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpowchisall))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powchis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpowchisall),
            "::",
            stringify!(powchis)
        )
    );
}
pub type ODBPOWCHISALL = odbpowchisall;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpwcm {
    pub consump: ::std::os::raw::c_long,
    pub regen: ::std::os::raw::c_long,
    pub net: ::std::os::raw::c_long,
    pub present: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbpwcm() {
    const UNINIT: ::std::mem::MaybeUninit<odbpwcm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpwcm>(),
        32usize,
        concat!("Size of: ", stringify!(odbpwcm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpwcm>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpwcm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consump) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcm),
            "::",
            stringify!(consump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcm),
            "::",
            stringify!(regen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).net) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcm),
            "::",
            stringify!(net)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).present) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcm),
            "::",
            stringify!(present)
        )
    );
}
pub type ODBPWCM = odbpwcm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpwcmdat {
    pub time: ::std::os::raw::c_ulong,
    pub axis_num: ::std::os::raw::c_short,
    pub spindle_num: ::std::os::raw::c_short,
    pub all: ODBPWCM,
    pub axis: [ODBPWCM; 32usize],
    pub spindle: [ODBPWCM; 8usize],
}
#[test]
fn bindgen_test_layout_odbpwcmdat() {
    const UNINIT: ::std::mem::MaybeUninit<odbpwcmdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpwcmdat>(),
        1328usize,
        concat!("Size of: ", stringify!(odbpwcmdat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpwcmdat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpwcmdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcmdat),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcmdat),
            "::",
            stringify!(axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spindle_num) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcmdat),
            "::",
            stringify!(spindle_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcmdat),
            "::",
            stringify!(all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcmdat),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spindle) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpwcmdat),
            "::",
            stringify!(spindle)
        )
    );
}
pub type ODBPWCMDAT = odbpwcmdat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posval {
    pub data: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_posval() {
    const UNINIT: ::std::mem::MaybeUninit<posval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posval>(),
        16usize,
        concat!("Size of: ", stringify!(posval))
    );
    assert_eq!(
        ::std::mem::align_of::<posval>(),
        8usize,
        concat!("Alignment of ", stringify!(posval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posval),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(posval),
            "::",
            stringify!(dec)
        )
    );
}
pub type POSVAL = posval;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbgrppos {
    pub abs: POSVAL,
    pub mcn: POSVAL,
    pub feed_type: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbgrppos() {
    const UNINIT: ::std::mem::MaybeUninit<odbgrppos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbgrppos>(),
        40usize,
        concat!("Size of: ", stringify!(odbgrppos))
    );
    assert_eq!(
        ::std::mem::align_of::<odbgrppos>(),
        8usize,
        concat!("Alignment of ", stringify!(odbgrppos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgrppos),
            "::",
            stringify!(abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgrppos),
            "::",
            stringify!(mcn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgrppos),
            "::",
            stringify!(feed_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgrppos),
            "::",
            stringify!(reserved)
        )
    );
}
pub type ODBGRPPOS = odbgrppos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbgrpaxis {
    pub path_num: ::std::os::raw::c_short,
    pub draw_num: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbgrpaxis() {
    const UNINIT: ::std::mem::MaybeUninit<odbgrpaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbgrpaxis>(),
        4usize,
        concat!("Size of: ", stringify!(odbgrpaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<odbgrpaxis>(),
        2usize,
        concat!("Alignment of ", stringify!(odbgrpaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgrpaxis),
            "::",
            stringify!(path_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbgrpaxis),
            "::",
            stringify!(draw_num)
        )
    );
}
pub type ODBGRPAXIS = odbgrpaxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbwact {
    pub data: [::std::os::raw::c_long; 6usize],
}
#[test]
fn bindgen_test_layout_odbwact() {
    const UNINIT: ::std::mem::MaybeUninit<odbwact> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbwact>(),
        48usize,
        concat!("Size of: ", stringify!(odbwact))
    );
    assert_eq!(
        ::std::mem::align_of::<odbwact>(),
        8usize,
        concat!("Alignment of ", stringify!(odbwact))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbwact),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBWACT = odbwact;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbpmc {
    pub type_a: ::std::os::raw::c_short,
    pub type_d: ::std::os::raw::c_short,
    pub datano_s: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub u: iodbpmc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbpmc__bindgen_ty_1 {
    pub cdata: [::std::os::raw::c_char; 5usize],
    pub idata: [::std::os::raw::c_short; 5usize],
    pub ldata: [::std::os::raw::c_long; 5usize],
    pub fdata: [f32; 5usize],
    pub dfdata: [f64; 5usize],
}
#[test]
fn bindgen_test_layout_iodbpmc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpmc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpmc__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(iodbpmc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpmc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpmc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc__bindgen_ty_1),
            "::",
            stringify!(fdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc__bindgen_ty_1),
            "::",
            stringify!(dfdata)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpmc() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpmc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpmc>(),
        48usize,
        concat!("Size of: ", stringify!(iodbpmc))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpmc>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpmc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc),
            "::",
            stringify!(type_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_d) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc),
            "::",
            stringify!(type_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmc),
            "::",
            stringify!(u)
        )
    );
}
pub type IODBPMC = iodbpmc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrwpmc {
    pub type_rw: ::std::os::raw::c_short,
    pub type_a: ::std::os::raw::c_short,
    pub type_d: ::std::os::raw::c_short,
    pub datano_s: ::std::os::raw::c_ushort,
    pub length: ::std::os::raw::c_short,
    pub conv: ::std::os::raw::c_short,
    pub err_code: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_iodbrwpmc() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrwpmc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrwpmc>(),
        24usize,
        concat!("Size of: ", stringify!(iodbrwpmc))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrwpmc>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrwpmc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_rw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(type_rw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_a) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(type_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_d) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(type_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conv) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(conv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_code) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(err_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrwpmc),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBRWPMC = iodbrwpmc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcinf {
    pub datano: ::std::os::raw::c_short,
    pub info: [odbpmcinf__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcinf__bindgen_ty_1 {
    pub pmc_adr: ::std::os::raw::c_char,
    pub adr_attr: ::std::os::raw::c_char,
    pub top_num: ::std::os::raw::c_ushort,
    pub last_num: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbpmcinf__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcinf__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcinf__bindgen_ty_1>(),
        6usize,
        concat!("Size of: ", stringify!(odbpmcinf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcinf__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpmcinf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcinf__bindgen_ty_1),
            "::",
            stringify!(pmc_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_attr) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcinf__bindgen_ty_1),
            "::",
            stringify!(adr_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcinf__bindgen_ty_1),
            "::",
            stringify!(top_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcinf__bindgen_ty_1),
            "::",
            stringify!(last_num)
        )
    );
}
#[test]
fn bindgen_test_layout_odbpmcinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcinf>(),
        386usize,
        concat!("Size of: ", stringify!(odbpmcinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpmcinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcinf),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcinf),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBPMCINF = odbpmcinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpmccntl {
    pub datano_s: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub info: [iodbpmccntl__bindgen_ty_1; 100usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpmccntl__bindgen_ty_1 {
    pub tbl_prm: ::std::os::raw::c_char,
    pub data_type: ::std::os::raw::c_char,
    pub data_size: ::std::os::raw::c_ushort,
    pub data_dsp: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbpmccntl__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpmccntl__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpmccntl__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(iodbpmccntl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpmccntl__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbpmccntl__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tbl_prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl__bindgen_ty_1),
            "::",
            stringify!(tbl_prm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl__bindgen_ty_1),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl__bindgen_ty_1),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_dsp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl__bindgen_ty_1),
            "::",
            stringify!(data_dsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpmccntl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpmccntl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpmccntl>(),
        806usize,
        concat!("Size of: ", stringify!(iodbpmccntl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpmccntl>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbpmccntl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmccntl),
            "::",
            stringify!(info)
        )
    );
}
pub type IODBPMCCNTL = iodbpmccntl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcalm {
    pub almmsg: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_odbpmcalm() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcalm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcalm>(),
        128usize,
        concat!("Size of: ", stringify!(odbpmcalm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcalm>(),
        1usize,
        concat!("Alignment of ", stringify!(odbpmcalm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).almmsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcalm),
            "::",
            stringify!(almmsg)
        )
    );
}
pub type ODBPMCALM = odbpmcalm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcerr {
    pub err_no: ::std::os::raw::c_short,
    pub err_dtno: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpmcerr() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcerr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcerr>(),
        4usize,
        concat!("Size of: ", stringify!(odbpmcerr))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcerr>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpmcerr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcerr),
            "::",
            stringify!(err_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_dtno) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcerr),
            "::",
            stringify!(err_dtno)
        )
    );
}
pub type ODBPMCERR = odbpmcerr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmctitle {
    pub mtb: [::std::os::raw::c_char; 48usize],
    pub machine: [::std::os::raw::c_char; 48usize],
    pub type_: [::std::os::raw::c_char; 48usize],
    pub prgno: [::std::os::raw::c_char; 8usize],
    pub prgvers: [::std::os::raw::c_char; 4usize],
    pub prgdraw: [::std::os::raw::c_char; 48usize],
    pub date: [::std::os::raw::c_char; 32usize],
    pub design: [::std::os::raw::c_char; 48usize],
    pub written: [::std::os::raw::c_char; 48usize],
    pub remarks: [::std::os::raw::c_char; 48usize],
}
#[test]
fn bindgen_test_layout_odbpmctitle() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmctitle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmctitle>(),
        380usize,
        concat!("Size of: ", stringify!(odbpmctitle))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmctitle>(),
        1usize,
        concat!("Alignment of ", stringify!(odbpmctitle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(mtb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgno) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(prgno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgvers) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(prgvers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgdraw) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(prgdraw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).design) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(design)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).written) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(written)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remarks) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle),
            "::",
            stringify!(remarks)
        )
    );
}
pub type ODBPMCTITLE = odbpmctitle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmctitle2 {
    pub mtb: [::std::os::raw::c_char; 48usize],
    pub machine: [::std::os::raw::c_char; 48usize],
    pub type_: [::std::os::raw::c_char; 48usize],
    pub prgno: [::std::os::raw::c_char; 16usize],
    pub prgvers: [::std::os::raw::c_char; 16usize],
    pub prgdraw: [::std::os::raw::c_char; 48usize],
    pub date: [::std::os::raw::c_char; 32usize],
    pub design: [::std::os::raw::c_char; 48usize],
    pub written: [::std::os::raw::c_char; 48usize],
    pub remarks: [::std::os::raw::c_char; 48usize],
}
#[test]
fn bindgen_test_layout_odbpmctitle2() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmctitle2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmctitle2>(),
        400usize,
        concat!("Size of: ", stringify!(odbpmctitle2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmctitle2>(),
        1usize,
        concat!("Alignment of ", stringify!(odbpmctitle2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(mtb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgno) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(prgno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgvers) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(prgvers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prgdraw) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(prgdraw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).design) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(design)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).written) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(written)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remarks) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmctitle2),
            "::",
            stringify!(remarks)
        )
    );
}
pub type ODBPMCTITLE2 = odbpmctitle2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpmcext {
    pub type_a: ::std::os::raw::c_short,
    pub type_d: ::std::os::raw::c_short,
    pub datano_s: ::std::os::raw::c_short,
    pub datano_e: ::std::os::raw::c_short,
    pub err_code: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_iodbpmcext() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpmcext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpmcext>(),
        24usize,
        concat!("Size of: ", stringify!(iodbpmcext))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpmcext>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpmcext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(type_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_d) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(type_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_s) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(datano_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano_e) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(datano_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(err_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpmcext),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBPMCEXT = iodbpmcext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcadr {
    pub pmc_adr: ::std::os::raw::c_ushort,
    pub adr_attr: ::std::os::raw::c_ushort,
    pub adr: ::std::os::raw::c_ulong,
    pub top: ::std::os::raw::c_ulong,
    pub num: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbpmcadr() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcadr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcadr>(),
        32usize,
        concat!("Size of: ", stringify!(odbpmcadr))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcadr>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmcadr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadr),
            "::",
            stringify!(pmc_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_attr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadr),
            "::",
            stringify!(adr_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadr),
            "::",
            stringify!(adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadr),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadr),
            "::",
            stringify!(num)
        )
    );
}
pub type ODBPMCADR = odbpmcadr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ODBPMCLADMEMTYPE {
    pub SystemType: ::std::os::raw::c_ulong,
    pub SystemAttribute: ::std::os::raw::c_ulong,
    pub TargetType: ::std::os::raw::c_ulong,
    pub TargetAttribute: ::std::os::raw::c_ulong,
    pub SystemTypeStr: [::std::os::raw::c_char; 32usize],
    pub TargetTypeStr: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_ODBPMCLADMEMTYPE() {
    const UNINIT: ::std::mem::MaybeUninit<ODBPMCLADMEMTYPE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ODBPMCLADMEMTYPE>(),
        96usize,
        concat!("Size of: ", stringify!(ODBPMCLADMEMTYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<ODBPMCLADMEMTYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(ODBPMCLADMEMTYPE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SystemType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBPMCLADMEMTYPE),
            "::",
            stringify!(SystemType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SystemAttribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBPMCLADMEMTYPE),
            "::",
            stringify!(SystemAttribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TargetType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBPMCLADMEMTYPE),
            "::",
            stringify!(TargetType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TargetAttribute) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBPMCLADMEMTYPE),
            "::",
            stringify!(TargetAttribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SystemTypeStr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBPMCLADMEMTYPE),
            "::",
            stringify!(SystemTypeStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TargetTypeStr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ODBPMCLADMEMTYPE),
            "::",
            stringify!(TargetTypeStr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcadrinfo {
    pub sPmcUnit: ::std::os::raw::c_short,
    pub sAdrType: ::std::os::raw::c_short,
    pub iAdrNum: ::std::os::raw::c_long,
    pub sBitPos: ::std::os::raw::c_short,
    pub sDataType: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpmcadrinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcadrinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcadrinfo>(),
        24usize,
        concat!("Size of: ", stringify!(odbpmcadrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcadrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmcadrinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sPmcUnit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadrinfo),
            "::",
            stringify!(sPmcUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sAdrType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadrinfo),
            "::",
            stringify!(sAdrType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iAdrNum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadrinfo),
            "::",
            stringify!(iAdrNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sBitPos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadrinfo),
            "::",
            stringify!(sBitPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sDataType) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcadrinfo),
            "::",
            stringify!(sDataType)
        )
    );
}
pub type ODBPMCADRINFO = odbpmcadrinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprfinfo {
    pub series: ::std::os::raw::c_ushort,
    pub vers1: ::std::os::raw::c_ushort,
    pub vers2: ::std::os::raw::c_ushort,
    pub profi: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_odbprfinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbprfinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprfinfo>(),
        8usize,
        concat!("Size of: ", stringify!(odbprfinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprfinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(odbprfinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfinfo),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vers1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfinfo),
            "::",
            stringify!(vers1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vers2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfinfo),
            "::",
            stringify!(vers2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profi) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfinfo),
            "::",
            stringify!(profi)
        )
    );
}
pub type ODBPRFINFO = odbprfinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbprfcnf {
    pub master_ser: [::std::os::raw::c_char; 5usize],
    pub master_ver: [::std::os::raw::c_char; 3usize],
    pub slave_ser: [::std::os::raw::c_char; 5usize],
    pub slave_ver: [::std::os::raw::c_char; 3usize],
    pub cntl_ser: [::std::os::raw::c_char; 5usize],
    pub cntl_ver: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odbprfcnf() {
    const UNINIT: ::std::mem::MaybeUninit<odbprfcnf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbprfcnf>(),
        24usize,
        concat!("Size of: ", stringify!(odbprfcnf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbprfcnf>(),
        1usize,
        concat!("Alignment of ", stringify!(odbprfcnf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_ser) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfcnf),
            "::",
            stringify!(master_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_ver) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfcnf),
            "::",
            stringify!(master_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_ser) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfcnf),
            "::",
            stringify!(slave_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_ver) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfcnf),
            "::",
            stringify!(slave_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cntl_ser) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfcnf),
            "::",
            stringify!(cntl_ser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cntl_ver) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(odbprfcnf),
            "::",
            stringify!(cntl_ver)
        )
    );
}
pub type ODBPRFCNF = odbprfcnf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbbusprm {
    pub fdl_add: ::std::os::raw::c_char,
    pub baudrate: ::std::os::raw::c_char,
    pub tsl: ::std::os::raw::c_ushort,
    pub min_tsdr: ::std::os::raw::c_ushort,
    pub max_tsdr: ::std::os::raw::c_ushort,
    pub tqui: ::std::os::raw::c_uchar,
    pub tset: ::std::os::raw::c_uchar,
    pub ttr: ::std::os::raw::c_long,
    pub gap: ::std::os::raw::c_char,
    pub hsa: ::std::os::raw::c_char,
    pub max_retry: ::std::os::raw::c_char,
    pub bp_flag: ::std::os::raw::c_uchar,
    pub min_slv_int: ::std::os::raw::c_ushort,
    pub poll_tout: ::std::os::raw::c_ushort,
    pub data_cntl: ::std::os::raw::c_ushort,
    pub reserve1: [::std::os::raw::c_char; 6usize],
    pub cls2_name: [::std::os::raw::c_char; 32usize],
    pub user_dlen: ::std::os::raw::c_short,
    pub user_data: [::std::os::raw::c_char; 62usize],
    pub reserve2: [::std::os::raw::c_char; 96usize],
}
#[test]
fn bindgen_test_layout_iodbbusprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbbusprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbbusprm>(),
        232usize,
        concat!("Size of: ", stringify!(iodbbusprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbbusprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbbusprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdl_add) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(fdl_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baudrate) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(baudrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(tsl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tsdr) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(max_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(tqui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tset) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(tset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(ttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsa) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(hsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_retry) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(max_retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp_flag) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(bp_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_slv_int) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(min_slv_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll_tout) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(poll_tout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_cntl) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(data_cntl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls2_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(cls2_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_dlen) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(user_dlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbbusprm),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type IODBBUSPRM = iodbbusprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbslvprm {
    pub dis_enb: ::std::os::raw::c_short,
    pub ident_no: ::std::os::raw::c_ushort,
    pub slv_flag: ::std::os::raw::c_uchar,
    pub slv_type: ::std::os::raw::c_uchar,
    pub reserve1: [::std::os::raw::c_char; 12usize],
    pub slv_stat: ::std::os::raw::c_uchar,
    pub wd_fact1: ::std::os::raw::c_uchar,
    pub wd_fact2: ::std::os::raw::c_uchar,
    pub min_tsdr: ::std::os::raw::c_uchar,
    pub reserve2: ::std::os::raw::c_char,
    pub grp_ident: ::std::os::raw::c_uchar,
    pub user_plen: ::std::os::raw::c_short,
    pub user_pdata: [::std::os::raw::c_char; 32usize],
    pub cnfg_dlen: ::std::os::raw::c_short,
    pub cnfg_data: [::std::os::raw::c_char; 126usize],
    pub slv_ulen: ::std::os::raw::c_short,
    pub slv_udata: [::std::os::raw::c_char; 30usize],
    pub reserve3: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_iodbslvprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbslvprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbslvprm>(),
        226usize,
        concat!("Size of: ", stringify!(iodbslvprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbslvprm>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbslvprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dis_enb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(dis_enb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(ident_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_flag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(slv_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_type) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(slv_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_stat) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(slv_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact1) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(wd_fact1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(wd_fact2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_ident) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(grp_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_plen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(user_plen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_pdata) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(user_pdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnfg_dlen) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(cnfg_dlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnfg_data) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(cnfg_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ulen) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(slv_ulen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_udata) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(slv_udata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve3) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm),
            "::",
            stringify!(reserve3)
        )
    );
}
pub type IODBSLVPRM = iodbslvprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbslvprm2 {
    pub dis_enb: ::std::os::raw::c_short,
    pub ident_no: ::std::os::raw::c_ushort,
    pub slv_flag: ::std::os::raw::c_uchar,
    pub slv_type: ::std::os::raw::c_uchar,
    pub reserve1: [::std::os::raw::c_char; 12usize],
    pub slv_stat: ::std::os::raw::c_uchar,
    pub wd_fact1: ::std::os::raw::c_uchar,
    pub wd_fact2: ::std::os::raw::c_uchar,
    pub min_tsdr: ::std::os::raw::c_uchar,
    pub reserve2: ::std::os::raw::c_char,
    pub grp_ident: ::std::os::raw::c_uchar,
    pub user_plen: ::std::os::raw::c_short,
    pub user_pdata: [::std::os::raw::c_char; 206usize],
    pub cnfg_dlen: ::std::os::raw::c_short,
    pub cnfg_data: [::std::os::raw::c_char; 126usize],
    pub slv_ulen: ::std::os::raw::c_short,
    pub slv_udata: [::std::os::raw::c_char; 30usize],
    pub reserve3: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_iodbslvprm2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbslvprm2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbslvprm2>(),
        400usize,
        concat!("Size of: ", stringify!(iodbslvprm2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbslvprm2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbslvprm2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dis_enb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(dis_enb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(ident_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_flag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(slv_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_type) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(slv_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_stat) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(slv_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact1) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(wd_fact1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(wd_fact2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_ident) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(grp_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_plen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(user_plen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_pdata) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(user_pdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnfg_dlen) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(cnfg_dlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnfg_data) as usize - ptr as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(cnfg_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ulen) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(slv_ulen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_udata) as usize - ptr as usize },
        362usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(slv_udata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve3) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvprm2),
            "::",
            stringify!(reserve3)
        )
    );
}
pub type IODBSLVPRM2 = iodbslvprm2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbprfadr {
    pub di_size: ::std::os::raw::c_char,
    pub di_type: ::std::os::raw::c_char,
    pub di_addr: ::std::os::raw::c_ushort,
    pub reserve1: ::std::os::raw::c_short,
    pub do_size: ::std::os::raw::c_char,
    pub do_type: ::std::os::raw::c_char,
    pub do_addr: ::std::os::raw::c_ushort,
    pub reserve2: ::std::os::raw::c_short,
    pub dgn_size: ::std::os::raw::c_char,
    pub dgn_type: ::std::os::raw::c_char,
    pub dgn_addr: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_iodbprfadr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbprfadr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbprfadr>(),
        16usize,
        concat!("Size of: ", stringify!(iodbprfadr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbprfadr>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbprfadr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(di_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(di_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(do_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(do_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(dgn_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_type) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(dgn_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_addr) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbprfadr),
            "::",
            stringify!(dgn_addr)
        )
    );
}
pub type IODBPRFADR = iodbprfadr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbslvadr {
    pub slave_no: ::std::os::raw::c_char,
    pub di_size: ::std::os::raw::c_char,
    pub di_type: ::std::os::raw::c_char,
    pub di_addr: ::std::os::raw::c_ushort,
    pub do_size: ::std::os::raw::c_char,
    pub do_type: ::std::os::raw::c_char,
    pub do_addr: ::std::os::raw::c_ushort,
    pub reserve: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout_iodbslvadr() {
    const UNINIT: ::std::mem::MaybeUninit<iodbslvadr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbslvadr>(),
        18usize,
        concat!("Size of: ", stringify!(iodbslvadr))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbslvadr>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbslvadr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(di_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(di_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(do_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(do_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbslvadr),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBSLVADR = iodbslvadr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbslvst {
    pub cnfg_stat: ::std::os::raw::c_uchar,
    pub prm_stat: ::std::os::raw::c_uchar,
    pub wdg_stat: ::std::os::raw::c_char,
    pub live_stat: ::std::os::raw::c_uchar,
    pub ident_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbslvst() {
    const UNINIT: ::std::mem::MaybeUninit<odbslvst> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbslvst>(),
        6usize,
        concat!("Size of: ", stringify!(odbslvst))
    );
    assert_eq!(
        ::std::mem::align_of::<odbslvst>(),
        2usize,
        concat!("Alignment of ", stringify!(odbslvst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnfg_stat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbslvst),
            "::",
            stringify!(cnfg_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_stat) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbslvst),
            "::",
            stringify!(prm_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wdg_stat) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbslvst),
            "::",
            stringify!(wdg_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).live_stat) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbslvst),
            "::",
            stringify!(live_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbslvst),
            "::",
            stringify!(ident_no)
        )
    );
}
pub type ODBSLVST = odbslvst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODBSLVID {
    pub dis_enb: ::std::os::raw::c_short,
    pub slave_no: ::std::os::raw::c_short,
    pub nsl: ::std::os::raw::c_short,
    pub dgn_size: ::std::os::raw::c_uchar,
    pub dgn_type: ::std::os::raw::c_char,
    pub dgn_addr: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_IODBSLVID() {
    const UNINIT: ::std::mem::MaybeUninit<IODBSLVID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IODBSLVID>(),
        10usize,
        concat!("Size of: ", stringify!(IODBSLVID))
    );
    assert_eq!(
        ::std::mem::align_of::<IODBSLVID>(),
        2usize,
        concat!("Alignment of ", stringify!(IODBSLVID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dis_enb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVID),
            "::",
            stringify!(dis_enb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVID),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsl) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVID),
            "::",
            stringify!(nsl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVID),
            "::",
            stringify!(dgn_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVID),
            "::",
            stringify!(dgn_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVID),
            "::",
            stringify!(dgn_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODBSLVPRM3 {
    pub ident_no: ::std::os::raw::c_ushort,
    pub slv_flag: ::std::os::raw::c_uchar,
    pub slv_type: ::std::os::raw::c_uchar,
    pub reserve1: [::std::os::raw::c_char; 12usize],
    pub slv_stat: ::std::os::raw::c_uchar,
    pub wd_fact1: ::std::os::raw::c_uchar,
    pub wd_fact2: ::std::os::raw::c_uchar,
    pub min_tsdr: ::std::os::raw::c_uchar,
    pub reserve2: ::std::os::raw::c_char,
    pub grp_ident: ::std::os::raw::c_uchar,
    pub user_plen: ::std::os::raw::c_short,
    pub user_pdata: [::std::os::raw::c_char; 206usize],
    pub slv_ulen: ::std::os::raw::c_short,
    pub slv_udata: [::std::os::raw::c_char; 30usize],
}
#[test]
fn bindgen_test_layout_IODBSLVPRM3() {
    const UNINIT: ::std::mem::MaybeUninit<IODBSLVPRM3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IODBSLVPRM3>(),
        262usize,
        concat!("Size of: ", stringify!(IODBSLVPRM3))
    );
    assert_eq!(
        ::std::mem::align_of::<IODBSLVPRM3>(),
        2usize,
        concat!("Alignment of ", stringify!(IODBSLVPRM3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(ident_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(slv_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_type) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(slv_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_stat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(slv_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact1) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(wd_fact1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact2) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(wd_fact2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_ident) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(grp_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_plen) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(user_plen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_pdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(user_pdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ulen) as usize - ptr as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(slv_ulen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_udata) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBSLVPRM3),
            "::",
            stringify!(slv_udata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODBDIDO {
    pub slave_no: ::std::os::raw::c_short,
    pub slot_no: ::std::os::raw::c_short,
    pub di_size: ::std::os::raw::c_uchar,
    pub di_type: ::std::os::raw::c_char,
    pub di_addr: ::std::os::raw::c_ushort,
    pub do_size: ::std::os::raw::c_uchar,
    pub do_type: ::std::os::raw::c_char,
    pub do_addr: ::std::os::raw::c_ushort,
    pub shift: ::std::os::raw::c_short,
    pub module_dlen: ::std::os::raw::c_uchar,
    pub module_data: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_IODBDIDO() {
    const UNINIT: ::std::mem::MaybeUninit<IODBDIDO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IODBDIDO>(),
        144usize,
        concat!("Size of: ", stringify!(IODBDIDO))
    );
    assert_eq!(
        ::std::mem::align_of::<IODBDIDO>(),
        2usize,
        concat!("Alignment of ", stringify!(IODBDIDO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(slot_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_type) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(di_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_addr) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(di_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_type) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(do_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_addr) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(do_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_dlen) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(module_dlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBDIDO),
            "::",
            stringify!(module_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODBINDEADR {
    pub dummy: ::std::os::raw::c_uchar,
    pub indi_type: ::std::os::raw::c_char,
    pub indi_addr: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_IODBINDEADR() {
    const UNINIT: ::std::mem::MaybeUninit<IODBINDEADR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IODBINDEADR>(),
        4usize,
        concat!("Size of: ", stringify!(IODBINDEADR))
    );
    assert_eq!(
        ::std::mem::align_of::<IODBINDEADR>(),
        2usize,
        concat!("Alignment of ", stringify!(IODBINDEADR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBINDEADR),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indi_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBINDEADR),
            "::",
            stringify!(indi_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indi_addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IODBINDEADR),
            "::",
            stringify!(indi_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtransinfo {
    pub mas_buff_size: ::std::os::raw::c_long,
    pub trans_start_reqflag: ::std::os::raw::c_short,
    pub trans_end_reqflag: ::std::os::raw::c_short,
    pub trans_start_respflag: ::std::os::raw::c_short,
    pub trans_end_respflag: ::std::os::raw::c_short,
    pub all_transfer_size: ::std::os::raw::c_long,
    pub data_id: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub data_write_pt: ::std::os::raw::c_long,
    pub data_read_pt: ::std::os::raw::c_long,
    pub accumulation_counter: ::std::os::raw::c_long,
    pub forwarding_status: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtransinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbtransinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtransinfo>(),
        64usize,
        concat!("Size of: ", stringify!(odbtransinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtransinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtransinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mas_buff_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(mas_buff_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_start_reqflag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(trans_start_reqflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_end_reqflag) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(trans_end_reqflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_start_respflag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(trans_start_respflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_end_respflag) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(trans_end_respflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_transfer_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(all_transfer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(data_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_write_pt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(data_write_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_read_pt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(data_read_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accumulation_counter) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(accumulation_counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forwarding_status) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtransinfo),
            "::",
            stringify!(forwarding_status)
        )
    );
}
pub type ODBTRANSINFO = odbtransinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tcpprm {
    pub OwnIPAddress: [::std::os::raw::c_char; 16usize],
    pub SubNetMask: [::std::os::raw::c_char; 16usize],
    pub RouterIPAddress: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__tcpprm() {
    const UNINIT: ::std::mem::MaybeUninit<_tcpprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_tcpprm>(),
        48usize,
        concat!("Size of: ", stringify!(_tcpprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_tcpprm>(),
        1usize,
        concat!("Alignment of ", stringify!(_tcpprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIPAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_tcpprm),
            "::",
            stringify!(OwnIPAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_tcpprm),
            "::",
            stringify!(SubNetMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIPAddress) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_tcpprm),
            "::",
            stringify!(RouterIPAddress)
        )
    );
}
pub type TCPPRM = _tcpprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hostprm {
    pub DataServerPort: ::std::os::raw::c_ushort,
    pub DataServerIPAddress: [::std::os::raw::c_char; 16usize],
    pub DataServerUserName: [::std::os::raw::c_char; 32usize],
    pub DataServerPassword: [::std::os::raw::c_char; 32usize],
    pub DataServerLoginDirectory: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout__hostprm() {
    const UNINIT: ::std::mem::MaybeUninit<_hostprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_hostprm>(),
        210usize,
        concat!("Size of: ", stringify!(_hostprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_hostprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_hostprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataServerPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hostprm),
            "::",
            stringify!(DataServerPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataServerIPAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_hostprm),
            "::",
            stringify!(DataServerIPAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataServerUserName) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_hostprm),
            "::",
            stringify!(DataServerUserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataServerPassword) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_hostprm),
            "::",
            stringify!(DataServerPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataServerLoginDirectory) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_hostprm),
            "::",
            stringify!(DataServerLoginDirectory)
        )
    );
}
pub type HOSTPRM = _hostprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftpprm {
    pub FTPServerUserName: [::std::os::raw::c_char; 32usize],
    pub FTPServerPassword: [::std::os::raw::c_char; 32usize],
    pub FTPServerLoginDirectory: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout__ftpprm() {
    const UNINIT: ::std::mem::MaybeUninit<_ftpprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftpprm>(),
        192usize,
        concat!("Size of: ", stringify!(_ftpprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftpprm>(),
        1usize,
        concat!("Alignment of ", stringify!(_ftpprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FTPServerUserName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftpprm),
            "::",
            stringify!(FTPServerUserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FTPServerPassword) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftpprm),
            "::",
            stringify!(FTPServerPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FTPServerLoginDirectory) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftpprm),
            "::",
            stringify!(FTPServerLoginDirectory)
        )
    );
}
pub type FTPPRM = _ftpprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _etbprm {
    pub OwnMACAddress: [::std::os::raw::c_char; 13usize],
    pub MaximumChannel: ::std::os::raw::c_short,
    pub HDDExistence: ::std::os::raw::c_short,
    pub NumberOfScreens: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__etbprm() {
    const UNINIT: ::std::mem::MaybeUninit<_etbprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_etbprm>(),
        20usize,
        concat!("Size of: ", stringify!(_etbprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_etbprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_etbprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMACAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_etbprm),
            "::",
            stringify!(OwnMACAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaximumChannel) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_etbprm),
            "::",
            stringify!(MaximumChannel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HDDExistence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_etbprm),
            "::",
            stringify!(HDDExistence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfScreens) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_etbprm),
            "::",
            stringify!(NumberOfScreens)
        )
    );
}
pub type ETBPRM = _etbprm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _iodbetp {
    pub ParameterType: ::std::os::raw::c_short,
    pub prm: _iodbetp__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _iodbetp__bindgen_ty_1 {
    pub tcp: TCPPRM,
    pub host: HOSTPRM,
    pub ftp: FTPPRM,
    pub etb: ETBPRM,
}
#[test]
fn bindgen_test_layout__iodbetp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_iodbetp__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iodbetp__bindgen_ty_1>(),
        210usize,
        concat!("Size of: ", stringify!(_iodbetp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_iodbetp__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_iodbetp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iodbetp__bindgen_ty_1),
            "::",
            stringify!(tcp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iodbetp__bindgen_ty_1),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iodbetp__bindgen_ty_1),
            "::",
            stringify!(ftp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iodbetp__bindgen_ty_1),
            "::",
            stringify!(etb)
        )
    );
}
#[test]
fn bindgen_test_layout__iodbetp() {
    const UNINIT: ::std::mem::MaybeUninit<_iodbetp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iodbetp>(),
        212usize,
        concat!("Size of: ", stringify!(_iodbetp))
    );
    assert_eq!(
        ::std::mem::align_of::<_iodbetp>(),
        2usize,
        concat!("Alignment of ", stringify!(_iodbetp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ParameterType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iodbetp),
            "::",
            stringify!(ParameterType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_iodbetp),
            "::",
            stringify!(prm)
        )
    );
}
pub type IODBETP = _iodbetp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbetmsg {
    pub title: [::std::os::raw::c_char; 33usize],
    pub message: [[::std::os::raw::c_char; 39usize]; 10usize],
}
#[test]
fn bindgen_test_layout__odbetmsg() {
    const UNINIT: ::std::mem::MaybeUninit<_odbetmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbetmsg>(),
        423usize,
        concat!("Size of: ", stringify!(_odbetmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbetmsg>(),
        1usize,
        concat!("Alignment of ", stringify!(_odbetmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbetmsg),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbetmsg),
            "::",
            stringify!(message)
        )
    );
}
pub type ODBETMSG = _odbetmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbhddinf {
    pub file_num: ::std::os::raw::c_long,
    pub remainder_l: ::std::os::raw::c_long,
    pub remainder_h: ::std::os::raw::c_long,
    pub current_dir: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout__odbhddinf() {
    const UNINIT: ::std::mem::MaybeUninit<_odbhddinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbhddinf>(),
        56usize,
        concat!("Size of: ", stringify!(_odbhddinf))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbhddinf>(),
        8usize,
        concat!("Alignment of ", stringify!(_odbhddinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhddinf),
            "::",
            stringify!(file_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remainder_l) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhddinf),
            "::",
            stringify!(remainder_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remainder_h) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhddinf),
            "::",
            stringify!(remainder_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_dir) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhddinf),
            "::",
            stringify!(current_dir)
        )
    );
}
pub type ODBHDDINF = _odbhddinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbhdddir {
    pub file_name: [::std::os::raw::c_char; 64usize],
    pub comment: [::std::os::raw::c_char; 80usize],
    pub attribute: ::std::os::raw::c_short,
    pub reserved: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_long,
    pub date: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__odbhdddir() {
    const UNINIT: ::std::mem::MaybeUninit<_odbhdddir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbhdddir>(),
        176usize,
        concat!("Size of: ", stringify!(_odbhdddir))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbhdddir>(),
        8usize,
        concat!("Alignment of ", stringify!(_odbhdddir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhdddir),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhdddir),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhdddir),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhdddir),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhdddir),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhdddir),
            "::",
            stringify!(date)
        )
    );
}
pub type ODBHDDDIR = _odbhdddir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbhostdir {
    pub host_file: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout__odbhostdir() {
    const UNINIT: ::std::mem::MaybeUninit<_odbhostdir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbhostdir>(),
        128usize,
        concat!("Size of: ", stringify!(_odbhostdir))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbhostdir>(),
        1usize,
        concat!("Alignment of ", stringify!(_odbhostdir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbhostdir),
            "::",
            stringify!(host_file)
        )
    );
}
pub type ODBHOSTDIR = _odbhostdir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dsmntinfo {
    pub empty_cnt: ::std::os::raw::c_ushort,
    pub total_size: ::std::os::raw::c_ulong,
    pub ReadPtr: ::std::os::raw::c_ushort,
    pub WritePtr: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__dsmntinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_dsmntinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dsmntinfo>(),
        24usize,
        concat!("Size of: ", stringify!(_dsmntinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_dsmntinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_dsmntinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty_cnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dsmntinfo),
            "::",
            stringify!(empty_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dsmntinfo),
            "::",
            stringify!(total_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPtr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dsmntinfo),
            "::",
            stringify!(ReadPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePtr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_dsmntinfo),
            "::",
            stringify!(WritePtr)
        )
    );
}
pub type DSMNTINFO = _dsmntinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _common_prm {
    pub OwnMacAddress: [::std::os::raw::c_char; 13usize],
    pub OwnIpAddress: [::std::os::raw::c_char; 40usize],
    pub SubNetmask: [::std::os::raw::c_char; 16usize],
    pub RouterIpAddress: [::std::os::raw::c_char; 40usize],
    pub DnsServer1IpAddress: [::std::os::raw::c_char; 40usize],
    pub DnsServer2IpAddress: [::std::os::raw::c_char; 40usize],
    pub OwnHostName: [::std::os::raw::c_char; 32usize],
    pub OwnDomain: [::std::os::raw::c_char; 63usize],
}
#[test]
fn bindgen_test_layout__common_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_common_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_common_prm>(),
        284usize,
        concat!("Size of: ", stringify!(_common_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_common_prm>(),
        1usize,
        concat!("Alignment of ", stringify!(_common_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(OwnMacAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(RouterIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer1IpAddress) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(DnsServer1IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer2IpAddress) as usize - ptr as usize },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(DnsServer2IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnHostName) as usize - ptr as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(OwnHostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnDomain) as usize - ptr as usize },
        221usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm),
            "::",
            stringify!(OwnDomain)
        )
    );
}
pub type COMMON_PRM = _common_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _focas2_prm {
    pub TcpPort: ::std::os::raw::c_ulong,
    pub UdpPort: ::std::os::raw::c_ulong,
    pub TimeInterval: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__focas2_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_focas2_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_focas2_prm>(),
        24usize,
        concat!("Size of: ", stringify!(_focas2_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_focas2_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_focas2_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_focas2_prm),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPort) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_focas2_prm),
            "::",
            stringify!(UdpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeInterval) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_focas2_prm),
            "::",
            stringify!(TimeInterval)
        )
    );
}
pub type FOCAS2_PRM = _focas2_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftp_client_prm {
    pub HostName: [::std::os::raw::c_char; 64usize],
    pub ControlPort: ::std::os::raw::c_ulong,
    pub Dummy: ::std::os::raw::c_ulong,
    pub UserName: [::std::os::raw::c_char; 32usize],
    pub Password: [::std::os::raw::c_char; 32usize],
    pub LoginDirectory: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout__ftp_client_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_ftp_client_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftp_client_prm>(),
        272usize,
        concat!("Size of: ", stringify!(_ftp_client_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftp_client_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_ftp_client_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlPort) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm),
            "::",
            stringify!(ControlPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dummy) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm),
            "::",
            stringify!(Dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserName) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Password) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoginDirectory) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm),
            "::",
            stringify!(LoginDirectory)
        )
    );
}
pub type FTP_CLIENT_PRM = _ftp_client_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftp_server_prm {
    pub UserName: [::std::os::raw::c_char; 32usize],
    pub Password: [::std::os::raw::c_char; 32usize],
    pub LoginDirectory: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout__ftp_server_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_ftp_server_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftp_server_prm>(),
        192usize,
        concat!("Size of: ", stringify!(_ftp_server_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftp_server_prm>(),
        1usize,
        concat!("Alignment of ", stringify!(_ftp_server_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_server_prm),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Password) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_server_prm),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoginDirectory) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_server_prm),
            "::",
            stringify!(LoginDirectory)
        )
    );
}
pub type FTP_SERVER_PRM = _ftp_server_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftptrans_prm {
    pub opposite: [FTP_CLIENT_PRM; 3usize],
}
#[test]
fn bindgen_test_layout__ftptrans_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_ftptrans_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftptrans_prm>(),
        816usize,
        concat!("Size of: ", stringify!(_ftptrans_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftptrans_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_ftptrans_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftptrans_prm),
            "::",
            stringify!(opposite)
        )
    );
}
pub type FTPTRANS_PRM = _ftptrans_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dtsvr_prm {
    pub opposite: [FTP_CLIENT_PRM; 3usize],
    pub own: FTP_SERVER_PRM,
}
#[test]
fn bindgen_test_layout__dtsvr_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_dtsvr_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dtsvr_prm>(),
        1008usize,
        concat!("Size of: ", stringify!(_dtsvr_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_dtsvr_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_dtsvr_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dtsvr_prm),
            "::",
            stringify!(opposite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).own) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_dtsvr_prm),
            "::",
            stringify!(own)
        )
    );
}
pub type DTSVR_PRM = _dtsvr_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rmtdiag_client_prm {
    pub HostName: [::std::os::raw::c_char; 64usize],
    pub Port: ::std::os::raw::c_ulong,
    pub InquiryName: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__rmtdiag_client_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_rmtdiag_client_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_rmtdiag_client_prm>(),
        136usize,
        concat!("Size of: ", stringify!(_rmtdiag_client_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_rmtdiag_client_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_rmtdiag_client_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_client_prm),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_client_prm),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InquiryName) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_client_prm),
            "::",
            stringify!(InquiryName)
        )
    );
}
pub type RMTDIAG_CLIENT_PRM = _rmtdiag_client_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rmtdiag_prm {
    pub MtbInformation: [::std::os::raw::c_char; 17usize],
    pub MachineInformation: [::std::os::raw::c_char; 17usize],
    pub opposite: [RMTDIAG_CLIENT_PRM; 3usize],
}
#[test]
fn bindgen_test_layout__rmtdiag_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_rmtdiag_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_rmtdiag_prm>(),
        448usize,
        concat!("Size of: ", stringify!(_rmtdiag_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_rmtdiag_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_rmtdiag_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MtbInformation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_prm),
            "::",
            stringify!(MtbInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MachineInformation) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_prm),
            "::",
            stringify!(MachineInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_prm),
            "::",
            stringify!(opposite)
        )
    );
}
pub type RMTDIAG_PRM = _rmtdiag_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _factolink_client_prm {
    pub HostName: [::std::os::raw::c_char; 64usize],
    pub Port: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__factolink_client_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_factolink_client_prm> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_factolink_client_prm>(),
        72usize,
        concat!("Size of: ", stringify!(_factolink_client_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_factolink_client_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_factolink_client_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_factolink_client_prm),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_factolink_client_prm),
            "::",
            stringify!(Port)
        )
    );
}
pub type FACTOLINK_CLIENT_PRM = _factolink_client_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _factolink_prm {
    pub opposite: [FACTOLINK_CLIENT_PRM; 3usize],
}
#[test]
fn bindgen_test_layout__factolink_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_factolink_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_factolink_prm>(),
        216usize,
        concat!("Size of: ", stringify!(_factolink_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_factolink_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_factolink_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_factolink_prm),
            "::",
            stringify!(opposite)
        )
    );
}
pub type FACTO_PRM = _factolink_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _maintain_ping_prm {
    pub HostName: [::std::os::raw::c_char; 64usize],
    pub Count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__maintain_ping_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_maintain_ping_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_maintain_ping_prm>(),
        66usize,
        concat!("Size of: ", stringify!(_maintain_ping_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_maintain_ping_prm>(),
        2usize,
        concat!("Alignment of ", stringify!(_maintain_ping_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_maintain_ping_prm),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_maintain_ping_prm),
            "::",
            stringify!(Count)
        )
    );
}
pub type PING_PRM = _maintain_ping_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _maintain_prm {
    pub opposite: PING_PRM,
}
#[test]
fn bindgen_test_layout__maintain_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_maintain_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_maintain_prm>(),
        66usize,
        concat!("Size of: ", stringify!(_maintain_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_maintain_prm>(),
        2usize,
        concat!("Alignment of ", stringify!(_maintain_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_maintain_prm),
            "::",
            stringify!(opposite)
        )
    );
}
pub type MAINTAIN_PRM = _maintain_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _netsrv_prm {
    pub HostName: [::std::os::raw::c_char; 64usize],
    pub Port: ::std::os::raw::c_ulong,
    pub TimeInterval: ::std::os::raw::c_ulong,
    pub UdpPeriod: ::std::os::raw::c_ulong,
    pub MachineNumber: [::std::os::raw::c_char; 25usize],
    pub dummy1: [::std::os::raw::c_char; 7usize],
    pub AcceptanceReply: [::std::os::raw::c_char; 25usize],
    pub dummy2: [::std::os::raw::c_char; 7usize],
    pub ErrorReply: [::std::os::raw::c_char; 25usize],
    pub dummy3: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout__netsrv_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_netsrv_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_netsrv_prm>(),
        184usize,
        concat!("Size of: ", stringify!(_netsrv_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_netsrv_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_netsrv_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeInterval) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(TimeInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPeriod) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(UdpPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MachineNumber) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(MachineNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcceptanceReply) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(AcceptanceReply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorReply) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(ErrorReply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm),
            "::",
            stringify!(dummy3)
        )
    );
}
pub type NETSRV_PRM = _netsrv_prm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _unsolicmsg_prm {
    pub HostName: [::std::os::raw::c_char; 64usize],
    pub Port: ::std::os::raw::c_ulong,
    pub RetryCount: ::std::os::raw::c_ushort,
    pub Timeout: ::std::os::raw::c_ushort,
    pub AliveTime: ::std::os::raw::c_ushort,
    pub dummy1: [::std::os::raw::c_char; 8usize],
    pub Control: UNSOLICMSG_TYPE_PRM,
    pub TransmissionNumber: ::std::os::raw::c_ushort,
    pub dummy2: [::std::os::raw::c_char; 14usize],
    pub Transmission: [UNSOLICMSG_TYPE_PRM; 3usize],
}
#[test]
fn bindgen_test_layout__unsolicmsg_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_unsolicmsg_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_unsolicmsg_prm>(),
        232usize,
        concat!("Size of: ", stringify!(_unsolicmsg_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_unsolicmsg_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_unsolicmsg_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetryCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(RetryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(Timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveTime) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(AliveTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Control) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(Control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransmissionNumber) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(TransmissionNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Transmission) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm),
            "::",
            stringify!(Transmission)
        )
    );
}
pub type UNSOLICMSG_PRM = _unsolicmsg_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pmc_addr {
    pub Path: ::std::os::raw::c_ushort,
    pub Kind: ::std::os::raw::c_short,
    pub Address: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__pmc_addr() {
    const UNINIT: ::std::mem::MaybeUninit<_pmc_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pmc_addr>(),
        16usize,
        concat!("Size of: ", stringify!(_pmc_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pmc_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pmc_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pmc_addr),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pmc_addr),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pmc_addr),
            "::",
            stringify!(Address)
        )
    );
}
pub type PMC_ADDR = _pmc_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbsvr_area_prm {
    pub DatSize: ::std::os::raw::c_ulong,
    pub DatModAddr: ::std::os::raw::c_ulong,
    pub DatPmcAddr: PMC_ADDR,
}
#[test]
fn bindgen_test_layout__mbsvr_area_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_mbsvr_area_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_mbsvr_area_prm>(),
        32usize,
        concat!("Size of: ", stringify!(_mbsvr_area_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_mbsvr_area_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_mbsvr_area_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DatSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm),
            "::",
            stringify!(DatSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DatModAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm),
            "::",
            stringify!(DatModAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DatPmcAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm),
            "::",
            stringify!(DatPmcAddr)
        )
    );
}
pub type MBSVR_AREA_PRM = _mbsvr_area_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbsvr_prm {
    pub TcpPort: ::std::os::raw::c_ulong,
    pub Option1: ::std::os::raw::c_ushort,
    pub Option2: ::std::os::raw::c_ushort,
    pub StsPmcAddr: PMC_ADDR,
    pub AreaPrm: [MBSVR_AREA_PRM; 3usize],
}
#[test]
fn bindgen_test_layout__mbsvr_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_mbsvr_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_mbsvr_prm>(),
        128usize,
        concat!("Size of: ", stringify!(_mbsvr_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_mbsvr_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_mbsvr_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StsPmcAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm),
            "::",
            stringify!(StsPmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AreaPrm) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm),
            "::",
            stringify!(AreaPrm)
        )
    );
}
pub type MBSVR_PRM = _mbsvr_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _user_account_prm {
    pub UserName: [::std::os::raw::c_char; 32usize],
    pub Password: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout__user_account_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_user_account_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_user_account_prm>(),
        64usize,
        concat!("Size of: ", stringify!(_user_account_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_user_account_prm>(),
        1usize,
        concat!("Alignment of ", stringify!(_user_account_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_user_account_prm),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Password) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_user_account_prm),
            "::",
            stringify!(Password)
        )
    );
}
pub type USER_ACCOUNT_PRM = _user_account_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _httpsvr_prm {
    pub TcpPort: ::std::os::raw::c_ulong,
    pub Timeout: ::std::os::raw::c_ulong,
    pub UserAccount: [USER_ACCOUNT_PRM; 2usize],
}
#[test]
fn bindgen_test_layout__httpsvr_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_httpsvr_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_httpsvr_prm>(),
        144usize,
        concat!("Size of: ", stringify!(_httpsvr_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_httpsvr_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_httpsvr_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_httpsvr_prm),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_httpsvr_prm),
            "::",
            stringify!(Timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserAccount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_httpsvr_prm),
            "::",
            stringify!(UserAccount)
        )
    );
}
pub type HTTPSVR_PRM = _httpsvr_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stsntf_prm {
    pub PopSvrPort: ::std::os::raw::c_ulong,
    pub SmtpSvrPort: ::std::os::raw::c_ulong,
    pub UserAccount: [USER_ACCOUNT_PRM; 1usize],
}
#[test]
fn bindgen_test_layout__stsntf_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_stsntf_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_stsntf_prm>(),
        80usize,
        concat!("Size of: ", stringify!(_stsntf_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_stsntf_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_stsntf_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopSvrPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stsntf_prm),
            "::",
            stringify!(PopSvrPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SmtpSvrPort) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stsntf_prm),
            "::",
            stringify!(SmtpSvrPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserAccount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stsntf_prm),
            "::",
            stringify!(UserAccount)
        )
    );
}
pub type STSNTF_PRM = _stsntf_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _common_prm_flg {
    pub OwnIpAddress: ::std::os::raw::c_char,
    pub SubNetmask: ::std::os::raw::c_char,
    pub RouterIpAddress: ::std::os::raw::c_char,
    pub DnsServer1IpAddress: ::std::os::raw::c_char,
    pub DnsServer2IpAddress: ::std::os::raw::c_char,
    pub OwnHostName: ::std::os::raw::c_char,
    pub OwnDomain: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__common_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_common_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_common_prm_flg>(),
        7usize,
        concat!("Size of: ", stringify!(_common_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_common_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_common_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(RouterIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer1IpAddress) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(DnsServer1IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer2IpAddress) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(DnsServer2IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnHostName) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(OwnHostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnDomain) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_common_prm_flg),
            "::",
            stringify!(OwnDomain)
        )
    );
}
pub type COMMON_PRM_FLG = _common_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _focas2_prm_flg {
    pub TcpPort: ::std::os::raw::c_char,
    pub UdpPort: ::std::os::raw::c_char,
    pub TimeInterval: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__focas2_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_focas2_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_focas2_prm_flg>(),
        3usize,
        concat!("Size of: ", stringify!(_focas2_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_focas2_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_focas2_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_focas2_prm_flg),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPort) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_focas2_prm_flg),
            "::",
            stringify!(UdpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeInterval) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_focas2_prm_flg),
            "::",
            stringify!(TimeInterval)
        )
    );
}
pub type FOCAS2_PRM_FLG = _focas2_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftp_client_prm_flg {
    pub HostName: ::std::os::raw::c_char,
    pub ControlPort: ::std::os::raw::c_char,
    pub Dummy: ::std::os::raw::c_char,
    pub UserName: ::std::os::raw::c_char,
    pub Password: ::std::os::raw::c_char,
    pub LoginDirectory: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ftp_client_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_ftp_client_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftp_client_prm_flg>(),
        6usize,
        concat!("Size of: ", stringify!(_ftp_client_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftp_client_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_ftp_client_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm_flg),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlPort) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm_flg),
            "::",
            stringify!(ControlPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm_flg),
            "::",
            stringify!(Dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserName) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm_flg),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Password) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm_flg),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoginDirectory) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_client_prm_flg),
            "::",
            stringify!(LoginDirectory)
        )
    );
}
pub type FTP_CLIENT_PRM_FLG = _ftp_client_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftp_server_prm_flg {
    pub UserName: ::std::os::raw::c_char,
    pub Password: ::std::os::raw::c_char,
    pub LoginDirectory: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ftp_server_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_ftp_server_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftp_server_prm_flg>(),
        3usize,
        concat!("Size of: ", stringify!(_ftp_server_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftp_server_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_ftp_server_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_server_prm_flg),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Password) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_server_prm_flg),
            "::",
            stringify!(Password)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoginDirectory) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftp_server_prm_flg),
            "::",
            stringify!(LoginDirectory)
        )
    );
}
pub type FTP_SERVER_PRM_FLG = _ftp_server_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftptrans_prm_flg {
    pub opposite: [FTP_CLIENT_PRM_FLG; 3usize],
}
#[test]
fn bindgen_test_layout__ftptrans_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_ftptrans_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftptrans_prm_flg>(),
        18usize,
        concat!("Size of: ", stringify!(_ftptrans_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftptrans_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_ftptrans_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftptrans_prm_flg),
            "::",
            stringify!(opposite)
        )
    );
}
pub type FTPTRANS_PRM_FLG = _ftptrans_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dtsvr_prm_flg {
    pub opposite: [FTP_CLIENT_PRM_FLG; 3usize],
    pub own: FTP_SERVER_PRM_FLG,
}
#[test]
fn bindgen_test_layout__dtsvr_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_dtsvr_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dtsvr_prm_flg>(),
        21usize,
        concat!("Size of: ", stringify!(_dtsvr_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_dtsvr_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_dtsvr_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dtsvr_prm_flg),
            "::",
            stringify!(opposite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).own) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_dtsvr_prm_flg),
            "::",
            stringify!(own)
        )
    );
}
pub type DTSVR_PRM_FLG = _dtsvr_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rmtdiag_client_prm_flg {
    pub HostName: ::std::os::raw::c_char,
    pub Port: ::std::os::raw::c_char,
    pub InquiryName: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__rmtdiag_client_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_rmtdiag_client_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_rmtdiag_client_prm_flg>(),
        3usize,
        concat!("Size of: ", stringify!(_rmtdiag_client_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_rmtdiag_client_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_rmtdiag_client_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_client_prm_flg),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_client_prm_flg),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InquiryName) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_client_prm_flg),
            "::",
            stringify!(InquiryName)
        )
    );
}
pub type RMTDIAG_CLIENT_PRM_FLG = _rmtdiag_client_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rmtdiag_prm_flg {
    pub MtbInformation: ::std::os::raw::c_char,
    pub MachineInformation: ::std::os::raw::c_char,
    pub opposite: [RMTDIAG_CLIENT_PRM_FLG; 3usize],
}
#[test]
fn bindgen_test_layout__rmtdiag_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_rmtdiag_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_rmtdiag_prm_flg>(),
        11usize,
        concat!("Size of: ", stringify!(_rmtdiag_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_rmtdiag_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_rmtdiag_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MtbInformation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_prm_flg),
            "::",
            stringify!(MtbInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MachineInformation) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_prm_flg),
            "::",
            stringify!(MachineInformation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_rmtdiag_prm_flg),
            "::",
            stringify!(opposite)
        )
    );
}
pub type RMTDIAG_PRM_FLG = _rmtdiag_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _facto_client_prm_flg {
    pub HostName: ::std::os::raw::c_char,
    pub Port: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__facto_client_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_facto_client_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_facto_client_prm_flg>(),
        2usize,
        concat!("Size of: ", stringify!(_facto_client_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_facto_client_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_facto_client_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_facto_client_prm_flg),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_facto_client_prm_flg),
            "::",
            stringify!(Port)
        )
    );
}
pub type FACTO_CLIENT_PRM_FLG = _facto_client_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _facto_prm_flg {
    pub opposite: [FACTO_CLIENT_PRM_FLG; 3usize],
}
#[test]
fn bindgen_test_layout__facto_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_facto_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_facto_prm_flg>(),
        6usize,
        concat!("Size of: ", stringify!(_facto_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_facto_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_facto_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_facto_prm_flg),
            "::",
            stringify!(opposite)
        )
    );
}
pub type FACTO_PRM_FLG = _facto_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ping_prm_flg {
    pub HostName: ::std::os::raw::c_char,
    pub Count: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ping_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_ping_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ping_prm_flg>(),
        2usize,
        concat!("Size of: ", stringify!(_ping_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_ping_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_ping_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ping_prm_flg),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_ping_prm_flg),
            "::",
            stringify!(Count)
        )
    );
}
pub type PING_PRM_FLG = _ping_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _maintain_prm_flg {
    pub opposite: PING_PRM_FLG,
}
#[test]
fn bindgen_test_layout__maintain_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_maintain_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_maintain_prm_flg>(),
        2usize,
        concat!("Size of: ", stringify!(_maintain_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_maintain_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_maintain_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opposite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_maintain_prm_flg),
            "::",
            stringify!(opposite)
        )
    );
}
pub type MAINTAIN_PRM_FLG = _maintain_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _netsrv_prm_flg {
    pub HostName: ::std::os::raw::c_char,
    pub Port: ::std::os::raw::c_char,
    pub TimeInterval: ::std::os::raw::c_char,
    pub UdpPeriod: ::std::os::raw::c_char,
    pub MachineNumber: ::std::os::raw::c_char,
    pub AcceptanceReply: ::std::os::raw::c_char,
    pub ErrorReply: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__netsrv_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_netsrv_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_netsrv_prm_flg>(),
        7usize,
        concat!("Size of: ", stringify!(_netsrv_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_netsrv_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_netsrv_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeInterval) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(TimeInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPeriod) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(UdpPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MachineNumber) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(MachineNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcceptanceReply) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(AcceptanceReply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorReply) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_netsrv_prm_flg),
            "::",
            stringify!(ErrorReply)
        )
    );
}
pub type NETSRV_PRM_FLG = _netsrv_prm_flg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _unsolicmsg_type_prm_flg {
    pub Type: ::std::os::raw::c_char,
    pub dummy1: [::std::os::raw::c_char; 3usize],
    pub Prm: _unsolicmsg_type_prm_flg__bindgen_ty_1,
    pub dummy2: [::std::os::raw::c_char; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _unsolicmsg_type_prm_flg__bindgen_ty_1 {
    pub Pmc: _unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1,
    pub Macro: _unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1 {
    pub PathKindAddress: ::std::os::raw::c_char,
    pub Size: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PathKindAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(PathKindAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2 {
    pub PathNo: ::std::os::raw::c_char,
    pub Number: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PathNo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(PathNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Number)
        )
    );
}
#[test]
fn bindgen_test_layout__unsolicmsg_type_prm_flg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_unsolicmsg_type_prm_flg__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_unsolicmsg_type_prm_flg__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_unsolicmsg_type_prm_flg__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1),
            "::",
            stringify!(Pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Macro) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg__bindgen_ty_1),
            "::",
            stringify!(Macro)
        )
    );
}
#[test]
fn bindgen_test_layout__unsolicmsg_type_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_unsolicmsg_type_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_unsolicmsg_type_prm_flg>(),
        8usize,
        concat!("Size of: ", stringify!(_unsolicmsg_type_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_unsolicmsg_type_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_unsolicmsg_type_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Prm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg),
            "::",
            stringify!(Prm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_type_prm_flg),
            "::",
            stringify!(dummy2)
        )
    );
}
pub type UNSOLICMSG_TYPE_PRM_FLG = _unsolicmsg_type_prm_flg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _unsolicmsg_prm_flg {
    pub HostName: ::std::os::raw::c_char,
    pub Port: ::std::os::raw::c_char,
    pub RetryCount: ::std::os::raw::c_char,
    pub Timeout: ::std::os::raw::c_char,
    pub AliveTime: ::std::os::raw::c_char,
    pub dummy1: [::std::os::raw::c_char; 3usize],
    pub Control: UNSOLICMSG_TYPE_PRM_FLG,
    pub TransmissionNumber: ::std::os::raw::c_char,
    pub dummy2: [::std::os::raw::c_char; 3usize],
    pub Transmission: [UNSOLICMSG_TYPE_PRM_FLG; 3usize],
}
#[test]
fn bindgen_test_layout__unsolicmsg_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_unsolicmsg_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_unsolicmsg_prm_flg>(),
        44usize,
        concat!("Size of: ", stringify!(_unsolicmsg_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_unsolicmsg_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_unsolicmsg_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HostName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(HostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Port) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetryCount) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(RetryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(Timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveTime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(AliveTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Control) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(Control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransmissionNumber) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(TransmissionNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Transmission) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_unsolicmsg_prm_flg),
            "::",
            stringify!(Transmission)
        )
    );
}
pub type UNSOLICMSG_PRM_FLG = _unsolicmsg_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbsvr_area_prm_flg {
    pub DatSize: ::std::os::raw::c_char,
    pub DatModAddr: ::std::os::raw::c_char,
    pub DatPmcAddr: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__mbsvr_area_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_mbsvr_area_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_mbsvr_area_prm_flg>(),
        4usize,
        concat!("Size of: ", stringify!(_mbsvr_area_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_mbsvr_area_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_mbsvr_area_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DatSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm_flg),
            "::",
            stringify!(DatSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DatModAddr) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm_flg),
            "::",
            stringify!(DatModAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DatPmcAddr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm_flg),
            "::",
            stringify!(DatPmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_area_prm_flg),
            "::",
            stringify!(dummy)
        )
    );
}
pub type MBSVR_AREA_PRM_FLG = _mbsvr_area_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbsvr_prm_flg {
    pub TcpPort: ::std::os::raw::c_char,
    pub Option1: ::std::os::raw::c_char,
    pub Option2: ::std::os::raw::c_char,
    pub StsPmcAddr: ::std::os::raw::c_char,
    pub AreaPrm: [MBSVR_AREA_PRM_FLG; 3usize],
}
#[test]
fn bindgen_test_layout__mbsvr_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_mbsvr_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_mbsvr_prm_flg>(),
        16usize,
        concat!("Size of: ", stringify!(_mbsvr_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_mbsvr_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_mbsvr_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm_flg),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm_flg),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm_flg),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StsPmcAddr) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm_flg),
            "::",
            stringify!(StsPmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AreaPrm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_prm_flg),
            "::",
            stringify!(AreaPrm)
        )
    );
}
pub type MBSVR_PRM_FLG = _mbsvr_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _user_account_prm_flg {
    pub UserName: ::std::os::raw::c_char,
    pub Password: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__user_account_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_user_account_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_user_account_prm_flg>(),
        2usize,
        concat!("Size of: ", stringify!(_user_account_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_user_account_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_user_account_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_user_account_prm_flg),
            "::",
            stringify!(UserName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Password) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_user_account_prm_flg),
            "::",
            stringify!(Password)
        )
    );
}
pub type USER_ACCOUNT_PRM_FLG = _user_account_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _httpsvr_prm_flg {
    pub TcpPort: ::std::os::raw::c_char,
    pub Timeout: ::std::os::raw::c_char,
    pub UserAccount: [USER_ACCOUNT_PRM_FLG; 2usize],
}
#[test]
fn bindgen_test_layout__httpsvr_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_httpsvr_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_httpsvr_prm_flg>(),
        6usize,
        concat!("Size of: ", stringify!(_httpsvr_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_httpsvr_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_httpsvr_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_httpsvr_prm_flg),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_httpsvr_prm_flg),
            "::",
            stringify!(Timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserAccount) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_httpsvr_prm_flg),
            "::",
            stringify!(UserAccount)
        )
    );
}
pub type HTTPSVR_PRM_FLG = _httpsvr_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stsntf_prm_flg {
    pub PopSvrPort: ::std::os::raw::c_char,
    pub SmtpSvrPort: ::std::os::raw::c_char,
    pub UserAccount: [USER_ACCOUNT_PRM_FLG; 1usize],
}
#[test]
fn bindgen_test_layout__stsntf_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_stsntf_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_stsntf_prm_flg>(),
        4usize,
        concat!("Size of: ", stringify!(_stsntf_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_stsntf_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_stsntf_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopSvrPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stsntf_prm_flg),
            "::",
            stringify!(PopSvrPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SmtpSvrPort) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_stsntf_prm_flg),
            "::",
            stringify!(SmtpSvrPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserAccount) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_stsntf_prm_flg),
            "::",
            stringify!(UserAccount)
        )
    );
}
pub type STSNTF_PRM_FLG = _stsntf_prm_flg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_ethprm_flag {
    pub flg: _in_ethprm_flag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _in_ethprm_flag__bindgen_ty_1 {
    pub common: COMMON_PRM_FLG,
    pub focas2: FOCAS2_PRM_FLG,
    pub ftpTrans: FTPTRANS_PRM_FLG,
    pub dataServer: DTSVR_PRM_FLG,
    pub remoteDiag: RMTDIAG_PRM_FLG,
    pub factolink: FACTO_PRM_FLG,
    pub maintain: MAINTAIN_PRM_FLG,
    pub netservice: NETSRV_PRM_FLG,
    pub unsolicmsg: UNSOLICMSG_PRM_FLG,
    pub mbsvr: MBSVR_PRM_FLG,
    pub httpsvr: HTTPSVR_PRM_FLG,
    pub stsntf: STSNTF_PRM_FLG,
}
#[test]
fn bindgen_test_layout__in_ethprm_flag__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_in_ethprm_flag__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_ethprm_flag__bindgen_ty_1>(),
        44usize,
        concat!("Size of: ", stringify!(_in_ethprm_flag__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_ethprm_flag__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_ethprm_flag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).focas2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(focas2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftpTrans) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(ftpTrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataServer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(dataServer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoteDiag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(remoteDiag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).factolink) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(factolink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maintain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(maintain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netservice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(netservice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unsolicmsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(unsolicmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbsvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(mbsvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).httpsvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(httpsvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stsntf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag__bindgen_ty_1),
            "::",
            stringify!(stsntf)
        )
    );
}
#[test]
fn bindgen_test_layout__in_ethprm_flag() {
    const UNINIT: ::std::mem::MaybeUninit<_in_ethprm_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_ethprm_flag>(),
        44usize,
        concat!("Size of: ", stringify!(_in_ethprm_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_ethprm_flag>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_ethprm_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm_flag),
            "::",
            stringify!(flg)
        )
    );
}
pub type IN_ETHPRMFLAG = _in_ethprm_flag;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_ethprm {
    pub reserve01: ::std::os::raw::c_short,
    pub reserve02: ::std::os::raw::c_short,
    pub reserve03: ::std::os::raw::c_short,
    pub reserve04: ::std::os::raw::c_short,
    pub reserve05: ::std::os::raw::c_short,
    pub reserve06: ::std::os::raw::c_short,
    pub prm: _in_ethprm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _in_ethprm__bindgen_ty_1 {
    pub common: COMMON_PRM,
    pub focas2: FOCAS2_PRM,
    pub ftpTrans: FTPTRANS_PRM,
    pub dataServer: DTSVR_PRM,
    pub remoteDiag: RMTDIAG_PRM,
    pub factolink: FACTO_PRM,
    pub maintain: MAINTAIN_PRM,
    pub netservice: NETSRV_PRM,
    pub unsolicmsg: UNSOLICMSG_PRM,
    pub mbsvr: MBSVR_PRM,
    pub httpsvr: HTTPSVR_PRM,
    pub stsntf: STSNTF_PRM,
}
#[test]
fn bindgen_test_layout__in_ethprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_in_ethprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_ethprm__bindgen_ty_1>(),
        1008usize,
        concat!("Size of: ", stringify!(_in_ethprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_ethprm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_in_ethprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).focas2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(focas2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftpTrans) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(ftpTrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataServer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(dataServer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoteDiag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(remoteDiag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).factolink) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(factolink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maintain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(maintain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netservice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(netservice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unsolicmsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(unsolicmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbsvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(mbsvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).httpsvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(httpsvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stsntf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm__bindgen_ty_1),
            "::",
            stringify!(stsntf)
        )
    );
}
#[test]
fn bindgen_test_layout__in_ethprm() {
    const UNINIT: ::std::mem::MaybeUninit<_in_ethprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_ethprm>(),
        1024usize,
        concat!("Size of: ", stringify!(_in_ethprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_ethprm>(),
        8usize,
        concat!("Alignment of ", stringify!(_in_ethprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve01) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(reserve01)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve02) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(reserve02)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve03) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(reserve03)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve04) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(reserve04)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve05) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(reserve05)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve06) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(reserve06)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_ethprm),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_ETHPRM = _in_ethprm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _out_ethprm {
    pub Option: ::std::os::raw::c_ushort,
    pub Type: ::std::os::raw::c_short,
    pub Dhcp: ::std::os::raw::c_short,
    pub ValidDevice: ::std::os::raw::c_short,
    pub DtsvrChannel: ::std::os::raw::c_short,
    pub Storage: ::std::os::raw::c_short,
    pub prm: _out_ethprm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _out_ethprm__bindgen_ty_1 {
    pub common: COMMON_PRM,
    pub focas2: FOCAS2_PRM,
    pub ftpTrans: FTPTRANS_PRM,
    pub dataServer: DTSVR_PRM,
    pub remoteDiag: RMTDIAG_PRM,
    pub factolink: FACTO_PRM,
    pub maintain: MAINTAIN_PRM,
    pub netservice: NETSRV_PRM,
    pub unsolicmsg: UNSOLICMSG_PRM,
    pub mbsvr: MBSVR_PRM,
    pub httpsvr: HTTPSVR_PRM,
    pub stsntf: STSNTF_PRM,
}
#[test]
fn bindgen_test_layout__out_ethprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethprm__bindgen_ty_1>(),
        1008usize,
        concat!("Size of: ", stringify!(_out_ethprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethprm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_ethprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).focas2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(focas2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftpTrans) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(ftpTrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataServer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(dataServer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remoteDiag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(remoteDiag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).factolink) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(factolink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maintain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(maintain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netservice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(netservice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unsolicmsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(unsolicmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbsvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(mbsvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).httpsvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(httpsvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stsntf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm__bindgen_ty_1),
            "::",
            stringify!(stsntf)
        )
    );
}
#[test]
fn bindgen_test_layout__out_ethprm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethprm>(),
        1024usize,
        concat!("Size of: ", stringify!(_out_ethprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethprm>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_ethprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(Option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dhcp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(Dhcp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ValidDevice) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(ValidDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DtsvrChannel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(DtsvrChannel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Storage) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(Storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethprm),
            "::",
            stringify!(prm)
        )
    );
}
pub type OUT_ETHPRM = _out_ethprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethdsmode {
    pub DsMode: [::std::os::raw::c_short; 10usize],
}
#[test]
fn bindgen_test_layout__out_ethdsmode() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethdsmode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethdsmode>(),
        20usize,
        concat!("Size of: ", stringify!(_out_ethdsmode))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethdsmode>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethdsmode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DsMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethdsmode),
            "::",
            stringify!(DsMode)
        )
    );
}
pub type OUT_ETHDSMODE = _out_ethdsmode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethping1shot {
    pub MsgId: ::std::os::raw::c_ushort,
    pub IpAddress: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__out_ethping1shot() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethping1shot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethping1shot>(),
        66usize,
        concat!("Size of: ", stringify!(_out_ethping1shot))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethping1shot>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethping1shot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethping1shot),
            "::",
            stringify!(MsgId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethping1shot),
            "::",
            stringify!(IpAddress)
        )
    );
}
pub type OUT_ETHPING1SHOT = _out_ethping1shot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethping {
    pub Device: ::std::os::raw::c_short,
    pub Count: ::std::os::raw::c_short,
    pub reply: [OUT_ETHPING1SHOT; 10usize],
}
#[test]
fn bindgen_test_layout__out_ethping() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethping> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethping>(),
        664usize,
        concat!("Size of: ", stringify!(_out_ethping))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethping>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethping),
            "::",
            stringify!(Device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethping),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reply) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethping),
            "::",
            stringify!(reply)
        )
    );
}
pub type OUT_ETHPING = _out_ethping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _emblsi {
    pub Collision: ::std::os::raw::c_ushort,
    pub CarrierSenseLost: ::std::os::raw::c_ushort,
    pub DelayOver: ::std::os::raw::c_ushort,
    pub Underrun: ::std::os::raw::c_ushort,
    pub SendParityError: ::std::os::raw::c_ushort,
    pub AlignmentError: ::std::os::raw::c_ushort,
    pub CrcError: ::std::os::raw::c_ushort,
    pub Overrun: ::std::os::raw::c_ushort,
    pub FrameLengthViolation: ::std::os::raw::c_ushort,
    pub RecvParityError: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__emblsi() {
    const UNINIT: ::std::mem::MaybeUninit<_emblsi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_emblsi>(),
        20usize,
        concat!("Size of: ", stringify!(_emblsi))
    );
    assert_eq!(
        ::std::mem::align_of::<_emblsi>(),
        2usize,
        concat!("Alignment of ", stringify!(_emblsi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Collision) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(Collision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CarrierSenseLost) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(CarrierSenseLost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DelayOver) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(DelayOver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Underrun) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(Underrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendParityError) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(SendParityError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AlignmentError) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(AlignmentError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CrcError) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(CrcError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Overrun) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(Overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameLengthViolation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(FrameLengthViolation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvParityError) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_emblsi),
            "::",
            stringify!(RecvParityError)
        )
    );
}
pub type EMBLSI = _emblsi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _boardlsi {
    pub SendRetryOver: ::std::os::raw::c_ushort,
    pub Collision: ::std::os::raw::c_ushort,
    pub CarrierSenseLost: ::std::os::raw::c_ushort,
    pub NoCarrier: ::std::os::raw::c_ushort,
    pub InvalidFrameLength: ::std::os::raw::c_ushort,
    pub CrcError: ::std::os::raw::c_ushort,
    pub ShortFrame: ::std::os::raw::c_ushort,
    pub LongFrame: ::std::os::raw::c_ushort,
    pub OddFrame: ::std::os::raw::c_ushort,
    pub Overflow: ::std::os::raw::c_ushort,
    pub PhyLsiError: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__boardlsi() {
    const UNINIT: ::std::mem::MaybeUninit<_boardlsi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_boardlsi>(),
        22usize,
        concat!("Size of: ", stringify!(_boardlsi))
    );
    assert_eq!(
        ::std::mem::align_of::<_boardlsi>(),
        2usize,
        concat!("Alignment of ", stringify!(_boardlsi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendRetryOver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(SendRetryOver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Collision) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(Collision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CarrierSenseLost) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(CarrierSenseLost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NoCarrier) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(NoCarrier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InvalidFrameLength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(InvalidFrameLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CrcError) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(CrcError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortFrame) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(ShortFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongFrame) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(LongFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OddFrame) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(OddFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Overflow) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(Overflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhyLsiError) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_boardlsi),
            "::",
            stringify!(PhyLsiError)
        )
    );
}
pub type BOARDLSI = _boardlsi;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _out_ethlsi {
    pub Type: ::std::os::raw::c_short,
    pub Baudrate: ::std::os::raw::c_short,
    pub RecvPacketCount: ::std::os::raw::c_ushort,
    pub RecvBroadcastCount: ::std::os::raw::c_ushort,
    pub SendPacketCount: ::std::os::raw::c_ushort,
    pub lst: _out_ethlsi__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _out_ethlsi__bindgen_ty_1 {
    pub emb: EMBLSI,
    pub board: BOARDLSI,
}
#[test]
fn bindgen_test_layout__out_ethlsi__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethlsi__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethlsi__bindgen_ty_1>(),
        22usize,
        concat!("Size of: ", stringify!(_out_ethlsi__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethlsi__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethlsi__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi__bindgen_ty_1),
            "::",
            stringify!(emb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).board) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi__bindgen_ty_1),
            "::",
            stringify!(board)
        )
    );
}
#[test]
fn bindgen_test_layout__out_ethlsi() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethlsi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethlsi>(),
        32usize,
        concat!("Size of: ", stringify!(_out_ethlsi))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethlsi>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethlsi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Baudrate) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi),
            "::",
            stringify!(Baudrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvPacketCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi),
            "::",
            stringify!(RecvPacketCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvBroadcastCount) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi),
            "::",
            stringify!(RecvBroadcastCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendPacketCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi),
            "::",
            stringify!(SendPacketCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lst) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlsi),
            "::",
            stringify!(lst)
        )
    );
}
pub type OUT_ETHLSI = _out_ethlsi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tsk_sts {
    pub StsId: ::std::os::raw::c_ushort,
    pub Status: [::std::os::raw::c_char; 30usize],
}
#[test]
fn bindgen_test_layout__tsk_sts() {
    const UNINIT: ::std::mem::MaybeUninit<_tsk_sts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_tsk_sts>(),
        32usize,
        concat!("Size of: ", stringify!(_tsk_sts))
    );
    assert_eq!(
        ::std::mem::align_of::<_tsk_sts>(),
        2usize,
        concat!("Alignment of ", stringify!(_tsk_sts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StsId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_tsk_sts),
            "::",
            stringify!(StsId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_tsk_sts),
            "::",
            stringify!(Status)
        )
    );
}
pub type TSK_STS = _tsk_sts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethtask {
    pub Type: ::std::os::raw::c_short,
    pub Count: ::std::os::raw::c_short,
    pub pad: [::std::os::raw::c_char; 12usize],
    pub task: [TSK_STS; 32usize],
}
#[test]
fn bindgen_test_layout__out_ethtask() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethtask> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethtask>(),
        1040usize,
        concat!("Size of: ", stringify!(_out_ethtask))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethtask>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethtask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtask),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtask),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtask),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtask),
            "::",
            stringify!(task)
        )
    );
}
pub type OUT_ETHTASK = _out_ethtask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethlog1shot {
    pub Type: ::std::os::raw::c_short,
    pub MsgId: ::std::os::raw::c_ushort,
    pub Year: ::std::os::raw::c_uchar,
    pub Month: ::std::os::raw::c_uchar,
    pub Day: ::std::os::raw::c_uchar,
    pub Hour: ::std::os::raw::c_uchar,
    pub Minute: ::std::os::raw::c_uchar,
    pub Second: ::std::os::raw::c_uchar,
    pub reserve: [::std::os::raw::c_char; 2usize],
    pub Text: [::std::os::raw::c_char; 84usize],
}
#[test]
fn bindgen_test_layout__out_ethlog1shot() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethlog1shot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethlog1shot>(),
        96usize,
        concat!("Size of: ", stringify!(_out_ethlog1shot))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethlog1shot>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethlog1shot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgId) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(MsgId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Month) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hour) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Second) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog1shot),
            "::",
            stringify!(Text)
        )
    );
}
pub type OUT_ETHLOG1SHOT = _out_ethlog1shot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethlog {
    pub Count: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_char; 14usize],
    pub logData: [OUT_ETHLOG1SHOT; 15usize],
}
#[test]
fn bindgen_test_layout__out_ethlog() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethlog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethlog>(),
        1456usize,
        concat!("Size of: ", stringify!(_out_ethlog))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethlog>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethlog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethlog),
            "::",
            stringify!(logData)
        )
    );
}
pub type OUT_ETHLOG = _out_ethlog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethtype {
    pub Kind: ::std::os::raw::c_short,
    pub FunctionEmb: ::std::os::raw::c_short,
    pub FunctionBoard: ::std::os::raw::c_short,
    pub FunctionEmbCe: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__out_ethtype() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethtype> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethtype>(),
        8usize,
        concat!("Size of: ", stringify!(_out_ethtype))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethtype>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ethtype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmb) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype),
            "::",
            stringify!(FunctionEmb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionBoard) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype),
            "::",
            stringify!(FunctionBoard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbCe) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype),
            "::",
            stringify!(FunctionEmbCe)
        )
    );
}
pub type OUT_ETHTYPE = _out_ethtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethtype2 {
    pub Kind: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_short,
    pub FunctionEmb: ::std::os::raw::c_ulong,
    pub FunctionEmbPcm: ::std::os::raw::c_ulong,
    pub FunctionBoard: ::std::os::raw::c_ulong,
    pub FunctionEmbCe: ::std::os::raw::c_ulong,
    pub FunctionEmbCePcm: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_ethtype2() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethtype2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethtype2>(),
        48usize,
        concat!("Size of: ", stringify!(_out_ethtype2))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethtype2>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_ethtype2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(FunctionEmb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbPcm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(FunctionEmbPcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionBoard) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(FunctionBoard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbCe) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(FunctionEmbCe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbCePcm) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype2),
            "::",
            stringify!(FunctionEmbCePcm)
        )
    );
}
pub type OUT_ETHTYPE2 = _out_ethtype2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ethtype3 {
    pub Kind: ::std::os::raw::c_ulong,
    pub KindFLnet: ::std::os::raw::c_ushort,
    pub Pad: ::std::os::raw::c_short,
    pub FunctionEmb: ::std::os::raw::c_ulong,
    pub FunctionEmbPcm: ::std::os::raw::c_ulong,
    pub FunctionBoard: ::std::os::raw::c_ulong,
    pub FunctionEmbCe: ::std::os::raw::c_ulong,
    pub FunctionEmbCePcm: ::std::os::raw::c_ulong,
    pub FunctionReserve: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_ethtype3() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ethtype3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ethtype3>(),
        64usize,
        concat!("Size of: ", stringify!(_out_ethtype3))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ethtype3>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_ethtype3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KindFLnet) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(KindFLnet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pad) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(Pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(FunctionEmb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbPcm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(FunctionEmbPcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionBoard) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(FunctionBoard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbCe) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(FunctionEmbCe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEmbCePcm) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(FunctionEmbCePcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionReserve) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ethtype3),
            "::",
            stringify!(FunctionReserve)
        )
    );
}
pub type OUT_ETHTYPE3 = _out_ethtype3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dsstate {
    pub DtsvrChannel: ::std::os::raw::c_short,
    pub pad: ::std::os::raw::c_short,
    pub Mode: ::std::os::raw::c_short,
    pub EmptyCount: ::std::os::raw::c_ushort,
    pub TotalSize: ::std::os::raw::c_ulong,
    pub WritePtr: ::std::os::raw::c_ushort,
    pub ReadPtr: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_dsstate() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dsstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dsstate>(),
        24usize,
        concat!("Size of: ", stringify!(_out_dsstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dsstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_dsstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DtsvrChannel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(DtsvrChannel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EmptyCount) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(EmptyCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(TotalSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WritePtr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(WritePtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadPtr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dsstate),
            "::",
            stringify!(ReadPtr)
        )
    );
}
pub type OUT_DSSTATE = _out_dsstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_unsolicstate {
    pub IpAddress: [::std::os::raw::c_char; 64usize],
    pub status: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_unsolicstate() {
    const UNINIT: ::std::mem::MaybeUninit<_out_unsolicstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_unsolicstate>(),
        66usize,
        concat!("Size of: ", stringify!(_out_unsolicstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_unsolicstate>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_unsolicstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_unsolicstate),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_unsolicstate),
            "::",
            stringify!(status)
        )
    );
}
pub type OUT_UNSOLICSTATE = _out_unsolicstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _clnt_info {
    pub IpAddress: [::std::os::raw::c_char; 64usize],
    pub SocketId: ::std::os::raw::c_long,
    pub ConnectTime: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__clnt_info() {
    const UNINIT: ::std::mem::MaybeUninit<_clnt_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_clnt_info>(),
        80usize,
        concat!("Size of: ", stringify!(_clnt_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_clnt_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_clnt_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_clnt_info),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SocketId) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_clnt_info),
            "::",
            stringify!(SocketId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectTime) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_clnt_info),
            "::",
            stringify!(ConnectTime)
        )
    );
}
pub type CLNT_INFO = _clnt_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_fsinfo {
    pub Number: ::std::os::raw::c_short,
    pub pad: [::std::os::raw::c_uchar; 2usize],
    pub clntinfo: [CLNT_INFO; 10usize],
}
#[test]
fn bindgen_test_layout__out_fsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_fsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_fsinfo>(),
        808usize,
        concat!("Size of: ", stringify!(_out_fsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_fsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_fsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fsinfo),
            "::",
            stringify!(Number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fsinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clntinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fsinfo),
            "::",
            stringify!(clntinfo)
        )
    );
}
pub type OUT_FSINFO = _out_fsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbsvr_clnt_info {
    pub IpAddress: [::std::os::raw::c_char; 64usize],
    pub ConnectTime: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__mbsvr_clnt_info() {
    const UNINIT: ::std::mem::MaybeUninit<_mbsvr_clnt_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_mbsvr_clnt_info>(),
        72usize,
        concat!("Size of: ", stringify!(_mbsvr_clnt_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_mbsvr_clnt_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_mbsvr_clnt_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_clnt_info),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectTime) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbsvr_clnt_info),
            "::",
            stringify!(ConnectTime)
        )
    );
}
pub type MBSVR_CLNT_INFO = _mbsvr_clnt_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_mbsvrinfo {
    pub Number: ::std::os::raw::c_short,
    pub pad: [::std::os::raw::c_uchar; 2usize],
    pub clntinfo: [MBSVR_CLNT_INFO; 10usize],
}
#[test]
fn bindgen_test_layout__out_mbsvrinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_mbsvrinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_mbsvrinfo>(),
        728usize,
        concat!("Size of: ", stringify!(_out_mbsvrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_mbsvrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_mbsvrinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_mbsvrinfo),
            "::",
            stringify!(Number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_mbsvrinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clntinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_mbsvrinfo),
            "::",
            stringify!(clntinfo)
        )
    );
}
pub type OUT_MBSVRINFO = _out_mbsvrinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_fl_devtype {
    pub Kind1: ::std::os::raw::c_ushort,
    pub pad1: [::std::os::raw::c_uchar; 2usize],
    pub FunctionFLnet1: ::std::os::raw::c_ulong,
    pub Kind2: ::std::os::raw::c_ushort,
    pub pad2: [::std::os::raw::c_uchar; 2usize],
    pub FunctionFLnet2: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_fl_devtype() {
    const UNINIT: ::std::mem::MaybeUninit<_out_fl_devtype> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_fl_devtype>(),
        32usize,
        concat!("Size of: ", stringify!(_out_fl_devtype))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_fl_devtype>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_fl_devtype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fl_devtype),
            "::",
            stringify!(Kind1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fl_devtype),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionFLnet1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fl_devtype),
            "::",
            stringify!(FunctionFLnet1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fl_devtype),
            "::",
            stringify!(Kind2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fl_devtype),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionFLnet2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_fl_devtype),
            "::",
            stringify!(FunctionFLnet2)
        )
    );
}
pub type FL_DEVTYPE = _out_fl_devtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_pnc_devtype {
    pub Kind: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_uchar; 2usize],
    pub FunctionPnc: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_pnc_devtype() {
    const UNINIT: ::std::mem::MaybeUninit<_out_pnc_devtype> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_pnc_devtype>(),
        16usize,
        concat!("Size of: ", stringify!(_out_pnc_devtype))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_pnc_devtype>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_pnc_devtype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_devtype),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_devtype),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionPnc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_devtype),
            "::",
            stringify!(FunctionPnc)
        )
    );
}
pub type PNC_DEVTYPE = _out_pnc_devtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _out_netdevprm {
    pub prm: _out_netdevprm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _out_netdevprm__bindgen_ty_1 {
    pub Fldevtype: FL_DEVTYPE,
    pub Pncdevtype: PNC_DEVTYPE,
}
#[test]
fn bindgen_test_layout__out_netdevprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_out_netdevprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_netdevprm__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(_out_netdevprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_netdevprm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_netdevprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fldevtype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_netdevprm__bindgen_ty_1),
            "::",
            stringify!(Fldevtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pncdevtype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_netdevprm__bindgen_ty_1),
            "::",
            stringify!(Pncdevtype)
        )
    );
}
#[test]
fn bindgen_test_layout__out_netdevprm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_netdevprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_netdevprm>(),
        32usize,
        concat!("Size of: ", stringify!(_out_netdevprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_netdevprm>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_netdevprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_netdevprm),
            "::",
            stringify!(prm)
        )
    );
}
pub type OUT_NETDEVPRM = _out_netdevprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eip_common_prm {
    pub TcpPort: ::std::os::raw::c_ushort,
    pub UdpPort: ::std::os::raw::c_ushort,
    pub DiDataOnAbnormal: ::std::os::raw::c_char,
    pub Option1: ::std::os::raw::c_uchar,
    pub pad: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__eip_common_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_common_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_common_prm>(),
        8usize,
        concat!("Size of: ", stringify!(_eip_common_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_common_prm>(),
        2usize,
        concat!("Alignment of ", stringify!(_eip_common_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_common_prm),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPort) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_common_prm),
            "::",
            stringify!(UdpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_common_prm),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_common_prm),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_common_prm),
            "::",
            stringify!(pad)
        )
    );
}
pub type EIP_COMMON_PRM = _eip_common_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eipa_basic_prm {
    pub Common: EIP_COMMON_PRM,
    pub Option2: ::std::os::raw::c_uchar,
    pub AllocMax: ::std::os::raw::c_uchar,
    pub ConnectMax: ::std::os::raw::c_ushort,
    pub RPI_Min: ::std::os::raw::c_ushort,
    pub RPI_Max: ::std::os::raw::c_ushort,
    pub Status: _eipa_basic_prm__bindgen_ty_1,
    pub StatusSize: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eipa_basic_prm__bindgen_ty_1 {
    pub Path: ::std::os::raw::c_ushort,
    pub Addr: ::std::os::raw::c_short,
    pub No: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eipa_basic_prm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_eipa_basic_prm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eipa_basic_prm__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_eipa_basic_prm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_eipa_basic_prm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_eipa_basic_prm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm__bindgen_ty_1),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm__bindgen_ty_1),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).No) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm__bindgen_ty_1),
            "::",
            stringify!(No)
        )
    );
}
#[test]
fn bindgen_test_layout__eipa_basic_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eipa_basic_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eipa_basic_prm>(),
        40usize,
        concat!("Size of: ", stringify!(_eipa_basic_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eipa_basic_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_eipa_basic_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocMax) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(AllocMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectMax) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(ConnectMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPI_Min) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(RPI_Min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPI_Max) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(RPI_Max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_basic_prm),
            "::",
            stringify!(StatusSize)
        )
    );
}
pub type EIPA_BASIC_PRM = _eipa_basic_prm;
pub type OUT_EIPA_BASIC_PRM = EIPA_BASIC_PRM;
pub type IN_EIPA_BASIC_PRM = EIPA_BASIC_PRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eip_common_prm_flg {
    pub TcpPort: ::std::os::raw::c_char,
    pub UdpPort: ::std::os::raw::c_char,
    pub DiDataOnAbnormal: ::std::os::raw::c_char,
    pub Option1: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__in_eip_common_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eip_common_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eip_common_prm_flg>(),
        8usize,
        concat!("Size of: ", stringify!(_in_eip_common_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eip_common_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_eip_common_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TcpPort) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eip_common_prm_flg),
            "::",
            stringify!(TcpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UdpPort) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eip_common_prm_flg),
            "::",
            stringify!(UdpPort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eip_common_prm_flg),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eip_common_prm_flg),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eip_common_prm_flg),
            "::",
            stringify!(pad)
        )
    );
}
pub type IN_EIP_COMMON_PRM_FLG = _in_eip_common_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eipa_basic_prm_flg {
    pub Common: IN_EIP_COMMON_PRM_FLG,
    pub Option2: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 5usize],
    pub Status: ::std::os::raw::c_char,
    pub StatusSize: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__in_eipa_basic_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eipa_basic_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eipa_basic_prm_flg>(),
        16usize,
        concat!("Size of: ", stringify!(_in_eipa_basic_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eipa_basic_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_eipa_basic_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_basic_prm_flg),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_basic_prm_flg),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_basic_prm_flg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_basic_prm_flg),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_basic_prm_flg),
            "::",
            stringify!(StatusSize)
        )
    );
}
pub type IN_EIPA_BASIC_PRM_FLG = _in_eipa_basic_prm_flg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _eip_type_prm {
    pub Type: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_char; 2usize],
    pub prm: _eip_type_prm__bindgen_ty_1,
    pub TagName: [::std::os::raw::c_char; 28usize],
    pub pad2: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _eip_type_prm__bindgen_ty_1 {
    pub pmc: _eip_type_prm__bindgen_ty_1__bindgen_ty_1,
    pub macro_: _eip_type_prm__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eip_type_prm__bindgen_ty_1__bindgen_ty_1 {
    pub Path: ::std::os::raw::c_ushort,
    pub Addr: ::std::os::raw::c_short,
    pub No: ::std::os::raw::c_ulong,
    pub Size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eip_type_prm__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_type_prm__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_type_prm__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_type_prm__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).No) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(No)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eip_type_prm__bindgen_ty_1__bindgen_ty_2 {
    pub Path: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_char; 2usize],
    pub No: ::std::os::raw::c_ulong,
    pub Num: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eip_type_prm__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_type_prm__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_type_prm__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_type_prm__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).No) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(No)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Num)
        )
    );
}
#[test]
fn bindgen_test_layout__eip_type_prm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_type_prm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_type_prm__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_eip_type_prm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_type_prm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_eip_type_prm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).macro_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm__bindgen_ty_1),
            "::",
            stringify!(macro_)
        )
    );
}
#[test]
fn bindgen_test_layout__eip_type_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_type_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_type_prm>(),
        64usize,
        concat!("Size of: ", stringify!(_eip_type_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_type_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_eip_type_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm),
            "::",
            stringify!(prm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TagName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm),
            "::",
            stringify!(TagName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm),
            "::",
            stringify!(pad2)
        )
    );
}
pub type EIP_TYPE_PRM = _eip_type_prm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _eipa_alloc_prm {
    pub State: ::std::os::raw::c_char,
    pub Option: ::std::os::raw::c_uchar,
    pub pad: [::std::os::raw::c_char; 2usize],
    pub DI: EIP_TYPE_PRM,
    pub DO: EIP_TYPE_PRM,
}
#[test]
fn bindgen_test_layout__eipa_alloc_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eipa_alloc_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eipa_alloc_prm>(),
        136usize,
        concat!("Size of: ", stringify!(_eipa_alloc_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eipa_alloc_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_eipa_alloc_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_alloc_prm),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_alloc_prm),
            "::",
            stringify!(Option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_alloc_prm),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DI) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_alloc_prm),
            "::",
            stringify!(DI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DO) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_eipa_alloc_prm),
            "::",
            stringify!(DO)
        )
    );
}
pub type EIPA_ALLOC_PRM = _eipa_alloc_prm;
pub type OUT_EIPA_ALLOC_PRM = EIPA_ALLOC_PRM;
pub type IN_EIPA_ALLOC_PRM = EIPA_ALLOC_PRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eip_type_prm_flg {
    pub Type: ::std::os::raw::c_char,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub Address: ::std::os::raw::c_char,
    pub Size: ::std::os::raw::c_char,
    pub TagName: ::std::os::raw::c_char,
    pub pad2: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__eip_type_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_type_prm_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_type_prm_flg>(),
        8usize,
        concat!("Size of: ", stringify!(_eip_type_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_type_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_eip_type_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm_flg),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm_flg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Address) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm_flg),
            "::",
            stringify!(Address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm_flg),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TagName) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm_flg),
            "::",
            stringify!(TagName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_type_prm_flg),
            "::",
            stringify!(pad2)
        )
    );
}
pub type IN_EIP_TYPE_PRM_FLG = _eip_type_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eipa_alloc_prm_flg {
    pub State: ::std::os::raw::c_char,
    pub Option: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 2usize],
    pub DI: IN_EIP_TYPE_PRM_FLG,
    pub DO: IN_EIP_TYPE_PRM_FLG,
}
#[test]
fn bindgen_test_layout__in_eipa_alloc_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eipa_alloc_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eipa_alloc_prm_flg>(),
        20usize,
        concat!("Size of: ", stringify!(_in_eipa_alloc_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eipa_alloc_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_eipa_alloc_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_alloc_prm_flg),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_alloc_prm_flg),
            "::",
            stringify!(Option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_alloc_prm_flg),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DI) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_alloc_prm_flg),
            "::",
            stringify!(DI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DO) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eipa_alloc_prm_flg),
            "::",
            stringify!(DO)
        )
    );
}
pub type IN_EIPA_ALLOC_PRM_FLG = _in_eipa_alloc_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eip_msnsinfo {
    pub ModuleStatus: ::std::os::raw::c_char,
    pub NetworkStatus: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_eip_msnsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eip_msnsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eip_msnsinfo>(),
        4usize,
        concat!("Size of: ", stringify!(_out_eip_msnsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eip_msnsinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(_out_eip_msnsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModuleStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_msnsinfo),
            "::",
            stringify!(ModuleStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NetworkStatus) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_msnsinfo),
            "::",
            stringify!(NetworkStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_msnsinfo),
            "::",
            stringify!(pad)
        )
    );
}
pub type OUT_EIP_MSNSINFO = _out_eip_msnsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eip_deviceinfo {
    pub VendorId: ::std::os::raw::c_ushort,
    pub DeviceType: ::std::os::raw::c_ushort,
    pub ProductCode: ::std::os::raw::c_ushort,
    pub MajorRevision: ::std::os::raw::c_uchar,
    pub MinorRevision: ::std::os::raw::c_uchar,
    pub SerialNo: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_eip_deviceinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eip_deviceinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eip_deviceinfo>(),
        16usize,
        concat!("Size of: ", stringify!(_out_eip_deviceinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eip_deviceinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_eip_deviceinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_deviceinfo),
            "::",
            stringify!(VendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_deviceinfo),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_deviceinfo),
            "::",
            stringify!(ProductCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorRevision) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_deviceinfo),
            "::",
            stringify!(MajorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorRevision) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_deviceinfo),
            "::",
            stringify!(MinorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SerialNo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_deviceinfo),
            "::",
            stringify!(SerialNo)
        )
    );
}
pub type OUT_EIP_DEVICEINFO = _out_eip_deviceinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eipa_scndata {
    pub ConnectionId: ::std::os::raw::c_long,
    pub ConnectTime: ::std::os::raw::c_ulong,
    pub IpAddress: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__out_eipa_scndata() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eipa_scndata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eipa_scndata>(),
        56usize,
        concat!("Size of: ", stringify!(_out_eipa_scndata))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eipa_scndata>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_eipa_scndata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectionId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eipa_scndata),
            "::",
            stringify!(ConnectionId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eipa_scndata),
            "::",
            stringify!(ConnectTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eipa_scndata),
            "::",
            stringify!(IpAddress)
        )
    );
}
pub type OUT_EIPA_SCNDATA = _out_eipa_scndata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eip_listdetail {
    pub IpAddress: [::std::os::raw::c_char; 40usize],
    pub ConnectTime: ::std::os::raw::c_ulong,
    pub ApplicationType: ::std::os::raw::c_char,
    pub pad1: ::std::os::raw::c_char,
    pub O2T_RPI: ::std::os::raw::c_ushort,
    pub T2O_RPI: ::std::os::raw::c_ushort,
    pub O2T_API: ::std::os::raw::c_ushort,
    pub T2O_API: ::std::os::raw::c_ushort,
    pub RecvPacket: ::std::os::raw::c_ushort,
    pub SendPacket: ::std::os::raw::c_ushort,
    pub LostPacket: ::std::os::raw::c_ushort,
    pub AllocationId: ::std::os::raw::c_short,
    pub pad2: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_eip_listdetail() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eip_listdetail> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eip_listdetail>(),
        72usize,
        concat!("Size of: ", stringify!(_out_eip_listdetail))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eip_listdetail>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_eip_listdetail))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectTime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(ConnectTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ApplicationType) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(ApplicationType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).O2T_RPI) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(O2T_RPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T2O_RPI) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(T2O_RPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).O2T_API) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(O2T_API)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T2O_API) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(T2O_API)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvPacket) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(RecvPacket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendPacket) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(SendPacket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LostPacket) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(LostPacket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocationId) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(AllocationId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eip_listdetail),
            "::",
            stringify!(pad2)
        )
    );
}
pub type OUT_EIP_LISTDETAIL = _out_eip_listdetail;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eip_unuse_addr {
    pub Param1: ::std::os::raw::c_ushort,
    pub Param2: ::std::os::raw::c_short,
    pub Param3: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eip_unuse_addr() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_unuse_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_unuse_addr>(),
        16usize,
        concat!("Size of: ", stringify!(_eip_unuse_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_unuse_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(_eip_unuse_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Param1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_unuse_addr),
            "::",
            stringify!(Param1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Param2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_unuse_addr),
            "::",
            stringify!(Param2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Param3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_unuse_addr),
            "::",
            stringify!(Param3)
        )
    );
}
pub type EIP_UNUSE_ADDR = _eip_unuse_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eip_pmc_addr {
    pub Path: ::std::os::raw::c_ushort,
    pub Addr: ::std::os::raw::c_short,
    pub No: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eip_pmc_addr() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_pmc_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_pmc_addr>(),
        16usize,
        concat!("Size of: ", stringify!(_eip_pmc_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_pmc_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(_eip_pmc_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_pmc_addr),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_pmc_addr),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).No) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_pmc_addr),
            "::",
            stringify!(No)
        )
    );
}
pub type EIP_PMC_ADDR = _eip_pmc_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _eip_multi_addr {
    pub Prm: _eip_multi_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _eip_multi_addr__bindgen_ty_1 {
    pub Unuse: EIP_UNUSE_ADDR,
    pub Pmc: EIP_PMC_ADDR,
}
#[test]
fn bindgen_test_layout__eip_multi_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_multi_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_multi_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_eip_multi_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_multi_addr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_eip_multi_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Unuse) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_multi_addr__bindgen_ty_1),
            "::",
            stringify!(Unuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_multi_addr__bindgen_ty_1),
            "::",
            stringify!(Pmc)
        )
    );
}
#[test]
fn bindgen_test_layout__eip_multi_addr() {
    const UNINIT: ::std::mem::MaybeUninit<_eip_multi_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eip_multi_addr>(),
        16usize,
        concat!("Size of: ", stringify!(_eip_multi_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<_eip_multi_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(_eip_multi_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eip_multi_addr),
            "::",
            stringify!(Prm)
        )
    );
}
pub type EIP_MULTI_ADDR = _eip_multi_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eips_basic_prm {
    pub Common: EIP_COMMON_PRM,
    pub Network: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_uchar; 2usize],
    pub Option2: ::std::os::raw::c_uchar,
    pub AllocMax: ::std::os::raw::c_uchar,
    pub ConnectMax: ::std::os::raw::c_ushort,
    pub RPI_Min: ::std::os::raw::c_ushort,
    pub RPI_Max: ::std::os::raw::c_ushort,
    pub StatusAddr: EIP_PMC_ADDR,
    pub StatusSize: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eips_basic_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eips_basic_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eips_basic_prm>(),
        48usize,
        concat!("Size of: ", stringify!(_eips_basic_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eips_basic_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_eips_basic_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocMax) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(AllocMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectMax) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(ConnectMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPI_Min) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(RPI_Min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPI_Max) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(RPI_Max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusAddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(StatusAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_basic_prm),
            "::",
            stringify!(StatusSize)
        )
    );
}
pub type EIPS_BASIC_PRM = _eips_basic_prm;
pub type IN_EIPS_BASIC_PRM = EIPS_BASIC_PRM;
pub type OUT_EIPS_BASIC_PRM = EIPS_BASIC_PRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eips_state_prm {
    pub State: [::std::os::raw::c_uchar; 32usize],
    pub reserve: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout__out_eips_state_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eips_state_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eips_state_prm>(),
        64usize,
        concat!("Size of: ", stringify!(_out_eips_state_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eips_state_prm>(),
        1usize,
        concat!("Alignment of ", stringify!(_out_eips_state_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_state_prm),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_state_prm),
            "::",
            stringify!(reserve)
        )
    );
}
pub type OUT_EIPS_STATE_PRM = _out_eips_state_prm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _eips_conn_prm {
    pub AssemblyInstance: ::std::os::raw::c_ulong,
    pub Type: ::std::os::raw::c_ushort,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub Addr: EIP_MULTI_ADDR,
    pub Size: ::std::os::raw::c_ulong,
    pub RPI: ::std::os::raw::c_ulong,
    pub TransportType: ::std::os::raw::c_ushort,
    pub HeaderFormat: ::std::os::raw::c_ushort,
    pub Priority: ::std::os::raw::c_ushort,
    pub pad2: [::std::os::raw::c_char; 2usize],
    pub reserve: [::std::os::raw::c_char; 28usize],
    pub pad3: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__eips_conn_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eips_conn_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eips_conn_prm>(),
        88usize,
        concat!("Size of: ", stringify!(_eips_conn_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eips_conn_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_eips_conn_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssemblyInstance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(AssemblyInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPI) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(RPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransportType) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(TransportType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HeaderFormat) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(HeaderFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Priority) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_conn_prm),
            "::",
            stringify!(pad3)
        )
    );
}
pub type EIPS_CONN_PRM = _eips_conn_prm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _eips_electronic_key {
    pub VendorID: ::std::os::raw::c_ushort,
    pub DeviceType: ::std::os::raw::c_ushort,
    pub ProductCode: ::std::os::raw::c_ushort,
    pub MajorRevision: ::std::os::raw::c_uchar,
    pub MinorRevision: ::std::os::raw::c_uchar,
    pub Compatibility: ::std::os::raw::c_uchar,
    pub pad: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout__eips_electronic_key() {
    const UNINIT: ::std::mem::MaybeUninit<_eips_electronic_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eips_electronic_key>(),
        12usize,
        concat!("Size of: ", stringify!(_eips_electronic_key))
    );
    assert_eq!(
        ::std::mem::align_of::<_eips_electronic_key>(),
        2usize,
        concat!("Alignment of ", stringify!(_eips_electronic_key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(ProductCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorRevision) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(MajorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorRevision) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(MinorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Compatibility) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(Compatibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_electronic_key),
            "::",
            stringify!(pad)
        )
    );
}
pub type EIPS_ELECTRONIC_KEY = _eips_electronic_key;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _eips_alloc_prm {
    pub IpAddress: [::std::os::raw::c_char; 40usize],
    pub Option1: ::std::os::raw::c_uchar,
    pub Option2: ::std::os::raw::c_uchar,
    pub DataUnit: ::std::os::raw::c_uchar,
    pub Endian: ::std::os::raw::c_uchar,
    pub ConfigInstance: ::std::os::raw::c_ulong,
    pub ConnT2O: EIPS_CONN_PRM,
    pub ConnO2T: EIPS_CONN_PRM,
    pub reserve1: EIP_PMC_ADDR,
    pub reserve2: EIP_PMC_ADDR,
    pub ProductTrigger: ::std::os::raw::c_uchar,
    pub Timeout: ::std::os::raw::c_uchar,
    pub Reconnect: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_char,
    pub ElectronicKey: EIPS_ELECTRONIC_KEY,
    pub DataPerSec: ::std::os::raw::c_ulong,
    pub DataPerSecTotal: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__eips_alloc_prm() {
    const UNINIT: ::std::mem::MaybeUninit<_eips_alloc_prm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_eips_alloc_prm>(),
        296usize,
        concat!("Size of: ", stringify!(_eips_alloc_prm))
    );
    assert_eq!(
        ::std::mem::align_of::<_eips_alloc_prm>(),
        8usize,
        concat!("Alignment of ", stringify!(_eips_alloc_prm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataUnit) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(DataUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Endian) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(Endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigInstance) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(ConfigInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnT2O) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(ConnT2O)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnO2T) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(ConnO2T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductTrigger) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(ProductTrigger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(Timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reconnect) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(Reconnect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        267usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ElectronicKey) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(ElectronicKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataPerSec) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(DataPerSec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataPerSecTotal) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_eips_alloc_prm),
            "::",
            stringify!(DataPerSecTotal)
        )
    );
}
pub type EIPS_ALLOC_PRM = _eips_alloc_prm;
pub type IN_EIPS_ALLOC_PRM = EIPS_ALLOC_PRM;
pub type OUT_EIPS_ALLOC_PRM = EIPS_ALLOC_PRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eips_basic_prm_flg {
    pub Common: IN_EIP_COMMON_PRM_FLG,
    pub Option2: ::std::os::raw::c_char,
    pub StatusAddr: ::std::os::raw::c_char,
    pub StatusSize: ::std::os::raw::c_char,
    pub pad: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__in_eips_basic_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eips_basic_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eips_basic_prm_flg>(),
        12usize,
        concat!("Size of: ", stringify!(_in_eips_basic_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eips_basic_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_eips_basic_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic_prm_flg),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic_prm_flg),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusAddr) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic_prm_flg),
            "::",
            stringify!(StatusAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic_prm_flg),
            "::",
            stringify!(StatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic_prm_flg),
            "::",
            stringify!(pad)
        )
    );
}
pub type IN_EIPS_BASIC_PRM_FLG = _in_eips_basic_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eips_basic {
    pub flg: IN_EIPS_BASIC_PRM_FLG,
    pub prm: IN_EIPS_BASIC_PRM,
}
#[test]
fn bindgen_test_layout__in_eips_basic() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eips_basic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eips_basic>(),
        64usize,
        concat!("Size of: ", stringify!(_in_eips_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eips_basic>(),
        8usize,
        concat!("Alignment of ", stringify!(_in_eips_basic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic),
            "::",
            stringify!(flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_basic),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_EIPS_BASIC = _in_eips_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eips_conn_prm_flg {
    pub AssemblyInstance: ::std::os::raw::c_char,
    pub Type: ::std::os::raw::c_char,
    pub Addr: ::std::os::raw::c_char,
    pub Size: ::std::os::raw::c_char,
    pub RPI: ::std::os::raw::c_char,
    pub TransportType: ::std::os::raw::c_char,
    pub HeaderFormat: ::std::os::raw::c_char,
    pub Priority: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout__in_eips_conn_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eips_conn_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eips_conn_prm_flg>(),
        12usize,
        concat!("Size of: ", stringify!(_in_eips_conn_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eips_conn_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_eips_conn_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssemblyInstance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(AssemblyInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPI) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(RPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransportType) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(TransportType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HeaderFormat) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(HeaderFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Priority) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_conn_prm_flg),
            "::",
            stringify!(pad)
        )
    );
}
pub type IN_EIPS_CONN_PRM_FLG = _in_eips_conn_prm_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_eips_alloc_prm_flg {
    pub IpAddress: ::std::os::raw::c_char,
    pub Option1: ::std::os::raw::c_char,
    pub Option2: ::std::os::raw::c_char,
    pub DataUnit: ::std::os::raw::c_char,
    pub Endian: ::std::os::raw::c_char,
    pub ConfigInstance: ::std::os::raw::c_char,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub ConnT2O: IN_EIPS_CONN_PRM_FLG,
    pub ConnO2T: IN_EIPS_CONN_PRM_FLG,
    pub reserve1: ::std::os::raw::c_char,
    pub reserve2: ::std::os::raw::c_char,
    pub ProductTrigger: ::std::os::raw::c_char,
    pub Timeout: ::std::os::raw::c_char,
    pub Reconnect: ::std::os::raw::c_char,
    pub VendorID: ::std::os::raw::c_char,
    pub DeviceType: ::std::os::raw::c_char,
    pub ProductCode: ::std::os::raw::c_char,
    pub MajorRevision: ::std::os::raw::c_char,
    pub MinorRevision: ::std::os::raw::c_char,
    pub Compatibility: ::std::os::raw::c_char,
    pub pad2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__in_eips_alloc_prm_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eips_alloc_prm_flg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eips_alloc_prm_flg>(),
        44usize,
        concat!("Size of: ", stringify!(_in_eips_alloc_prm_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eips_alloc_prm_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_eips_alloc_prm_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(Option2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataUnit) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(DataUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Endian) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(Endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConfigInstance) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(ConfigInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnT2O) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(ConnT2O)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnO2T) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(ConnO2T)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductTrigger) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(ProductTrigger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(Timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reconnect) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(Reconnect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorID) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(ProductCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorRevision) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(MajorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorRevision) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(MinorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Compatibility) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(Compatibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc_prm_flg),
            "::",
            stringify!(pad2)
        )
    );
}
pub type IN_EIPS_ALLOC_PRM_FLG = _in_eips_alloc_prm_flg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_eips_alloc {
    pub flg: IN_EIPS_ALLOC_PRM_FLG,
    pub prm: IN_EIPS_ALLOC_PRM,
}
#[test]
fn bindgen_test_layout__in_eips_alloc() {
    const UNINIT: ::std::mem::MaybeUninit<_in_eips_alloc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_eips_alloc>(),
        344usize,
        concat!("Size of: ", stringify!(_in_eips_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_eips_alloc>(),
        8usize,
        concat!("Alignment of ", stringify!(_in_eips_alloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc),
            "::",
            stringify!(flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_eips_alloc),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_EIPS_ALLOC = _in_eips_alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eips_com_info {
    pub State: [::std::os::raw::c_uchar; 32usize],
    pub reserve: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout__out_eips_com_info() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eips_com_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eips_com_info>(),
        64usize,
        concat!("Size of: ", stringify!(_out_eips_com_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eips_com_info>(),
        1usize,
        concat!("Alignment of ", stringify!(_out_eips_com_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_com_info),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_com_info),
            "::",
            stringify!(reserve)
        )
    );
}
pub type OUT_EIPS_COM_INFO = _out_eips_com_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eips_detail_info {
    pub Result: ::std::os::raw::c_short,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub IpAddress: [::std::os::raw::c_char; 40usize],
    pub GeneralCode: ::std::os::raw::c_uchar,
    pub pad2: ::std::os::raw::c_char,
    pub ExtendedCode: ::std::os::raw::c_ushort,
    pub ConnectTime: ::std::os::raw::c_ulong,
    pub O2T_RPI: ::std::os::raw::c_ushort,
    pub T2O_RPI: ::std::os::raw::c_ushort,
    pub O2T_API: ::std::os::raw::c_ushort,
    pub T2O_API: ::std::os::raw::c_ushort,
    pub RecvPacket: ::std::os::raw::c_ushort,
    pub SendPacket: ::std::os::raw::c_ushort,
    pub LostPacket: ::std::os::raw::c_ushort,
    pub pad3: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_eips_detail_info() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eips_detail_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eips_detail_info>(),
        72usize,
        concat!("Size of: ", stringify!(_out_eips_detail_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eips_detail_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_eips_detail_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(Result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GeneralCode) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(GeneralCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExtendedCode) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(ExtendedCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectTime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(ConnectTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).O2T_RPI) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(O2T_RPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T2O_RPI) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(T2O_RPI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).O2T_API) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(O2T_API)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T2O_API) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(T2O_API)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvPacket) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(RecvPacket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendPacket) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(SendPacket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LostPacket) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(LostPacket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_detail_info),
            "::",
            stringify!(pad3)
        )
    );
}
pub type OUT_EIPS_DETAIL_INFO = _out_eips_detail_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_eips_identity_info {
    pub Result: ::std::os::raw::c_short,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub VendorId: ::std::os::raw::c_ushort,
    pub DeviceType: ::std::os::raw::c_ushort,
    pub ProductCode: ::std::os::raw::c_ushort,
    pub MajorRevision: ::std::os::raw::c_uchar,
    pub MinorRevision: ::std::os::raw::c_uchar,
    pub SerialNo: ::std::os::raw::c_ulong,
    pub ProductName: [::std::os::raw::c_char; 33usize],
    pub pad2: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout__out_eips_identity_info() {
    const UNINIT: ::std::mem::MaybeUninit<_out_eips_identity_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_eips_identity_info>(),
        64usize,
        concat!("Size of: ", stringify!(_out_eips_identity_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_eips_identity_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_eips_identity_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(Result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(VendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(ProductCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorRevision) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(MajorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorRevision) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(MinorRevision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SerialNo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(SerialNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(ProductName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_eips_identity_info),
            "::",
            stringify!(pad2)
        )
    );
}
pub type OUT_EIPS_IDENTITY_INFO = _out_eips_identity_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_adpsafe_mntinfo {
    pub SupervisorStatus: ::std::os::raw::c_ushort,
    pub SafetyNetworkNumber: [::std::os::raw::c_uchar; 6usize],
    pub SelfDiagnosisErrorA: ::std::os::raw::c_ushort,
    pub SelfDiagnosisErrorB: ::std::os::raw::c_ushort,
    pub SelfDiagnosisDetailA: ::std::os::raw::c_ushort,
    pub SelfDiagnosisDetailB: ::std::os::raw::c_ushort,
    pub SafetyParameterCrc: ::std::os::raw::c_ulong,
    pub ChangeDateYear: ::std::os::raw::c_ushort,
    pub ChangeDateMonth: ::std::os::raw::c_uchar,
    pub ChangeDateDay: ::std::os::raw::c_uchar,
    pub ChangeTimeHours: ::std::os::raw::c_ushort,
    pub ChangeTimeMinutes: ::std::os::raw::c_ushort,
    pub ChangeTimeSeconds: ::std::os::raw::c_ushort,
    pub Pad: ::std::os::raw::c_ushort,
    pub DiConnectionStatusA: ::std::os::raw::c_uchar,
    pub DiConnectionStatusB: ::std::os::raw::c_uchar,
    pub DoConnectionStatusA: ::std::os::raw::c_uchar,
    pub DoConnectionStatusB: ::std::os::raw::c_uchar,
    pub DiConnectionDataSizeA: ::std::os::raw::c_uchar,
    pub DiConnectionDataSizeB: ::std::os::raw::c_uchar,
    pub DoConnectionDataSizeA: ::std::os::raw::c_uchar,
    pub DoConnectionDataSizeB: ::std::os::raw::c_uchar,
    pub DiConnectionErrorA: ::std::os::raw::c_uchar,
    pub DiConnectionErrorB: ::std::os::raw::c_uchar,
    pub DoConnectionErrorA: ::std::os::raw::c_uchar,
    pub DoConnectionErrorB: ::std::os::raw::c_uchar,
    pub DiRecvPacketNumberA: ::std::os::raw::c_ushort,
    pub DiRecvPacketNumberB: ::std::os::raw::c_ushort,
    pub DoSendPacketNumberA: ::std::os::raw::c_ushort,
    pub DoSendPacketNumberB: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_adpsafe_mntinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_adpsafe_mntinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_adpsafe_mntinfo>(),
        56usize,
        concat!("Size of: ", stringify!(_out_adpsafe_mntinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_adpsafe_mntinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_adpsafe_mntinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SupervisorStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SupervisorStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SafetyNetworkNumber) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SafetyNetworkNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelfDiagnosisErrorA) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SelfDiagnosisErrorA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelfDiagnosisErrorB) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SelfDiagnosisErrorB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelfDiagnosisDetailA) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SelfDiagnosisDetailA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelfDiagnosisDetailB) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SelfDiagnosisDetailB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SafetyParameterCrc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(SafetyParameterCrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChangeDateYear) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(ChangeDateYear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChangeDateMonth) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(ChangeDateMonth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChangeDateDay) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(ChangeDateDay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChangeTimeHours) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(ChangeTimeHours)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChangeTimeMinutes) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(ChangeTimeMinutes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ChangeTimeSeconds) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(ChangeTimeSeconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pad) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(Pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiConnectionStatusA) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiConnectionStatusA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiConnectionStatusB) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiConnectionStatusB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoConnectionStatusA) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoConnectionStatusA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoConnectionStatusB) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoConnectionStatusB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiConnectionDataSizeA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiConnectionDataSizeA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiConnectionDataSizeB) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiConnectionDataSizeB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoConnectionDataSizeA) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoConnectionDataSizeA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoConnectionDataSizeB) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoConnectionDataSizeB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiConnectionErrorA) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiConnectionErrorA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiConnectionErrorB) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiConnectionErrorB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoConnectionErrorA) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoConnectionErrorA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoConnectionErrorB) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoConnectionErrorB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiRecvPacketNumberA) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiRecvPacketNumberA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiRecvPacketNumberB) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DiRecvPacketNumberB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSendPacketNumberA) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoSendPacketNumberA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSendPacketNumberB) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_adpsafe_mntinfo),
            "::",
            stringify!(DoSendPacketNumberB)
        )
    );
}
pub type OUT_ADPSAFE_MNTINFO = _out_adpsafe_mntinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MAS_USR {
    pub master_user_data_len: ::std::os::raw::c_ushort,
    pub master_user_data: [::std::os::raw::c_uchar; 62usize],
}
#[test]
fn bindgen_test_layout__T_MAS_USR() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MAS_USR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MAS_USR>(),
        64usize,
        concat!("Size of: ", stringify!(_T_MAS_USR))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MAS_USR>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_MAS_USR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_user_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAS_USR),
            "::",
            stringify!(master_user_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_user_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAS_USR),
            "::",
            stringify!(master_user_data)
        )
    );
}
pub type T_MAS_USR = _T_MAS_USR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_BUS_PARA {
    pub fdl_add: ::std::os::raw::c_uchar,
    pub baud_rate: ::std::os::raw::c_uchar,
    pub tsl: ::std::os::raw::c_ushort,
    pub min_tsdr: ::std::os::raw::c_ushort,
    pub max_tsdr: ::std::os::raw::c_ushort,
    pub tqui: ::std::os::raw::c_uchar,
    pub tset: ::std::os::raw::c_uchar,
    pub ttr: ::std::os::raw::c_ulong,
    pub g: ::std::os::raw::c_uchar,
    pub hsa: ::std::os::raw::c_uchar,
    pub max_retry_limit: ::std::os::raw::c_uchar,
    pub bp_flag: ::std::os::raw::c_uchar,
    pub min_slave_interval: ::std::os::raw::c_ushort,
    pub poll_timeout: ::std::os::raw::c_ushort,
    pub data_control_time: ::std::os::raw::c_ushort,
    pub reserved: [::std::os::raw::c_uchar; 6usize],
    pub master_class2_name: [::std::os::raw::c_char; 32usize],
    pub mas_usr: T_MAS_USR,
}
#[test]
fn bindgen_test_layout__T_BUS_PARA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_BUS_PARA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_BUS_PARA>(),
        136usize,
        concat!("Size of: ", stringify!(_T_BUS_PARA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_BUS_PARA>(),
        8usize,
        concat!("Alignment of ", stringify!(_T_BUS_PARA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdl_add) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(fdl_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baud_rate) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(baud_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(tsl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tsdr) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(max_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(tqui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tset) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(tset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(ttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsa) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(hsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_retry_limit) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(max_retry_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp_flag) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(bp_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_slave_interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(min_slave_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll_timeout) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(poll_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_control_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(data_control_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_class2_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(master_class2_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mas_usr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA),
            "::",
            stringify!(mas_usr)
        )
    );
}
pub type T_BUS_PARA = _T_BUS_PARA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MODE_ADDR_ALLOC {
    pub md_path: ::std::os::raw::c_uchar,
    pub md_kind: ::std::os::raw::c_uchar,
    pub md_top_address: ::std::os::raw::c_ushort,
    pub md_size: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_MODE_ADDR_ALLOC() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MODE_ADDR_ALLOC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MODE_ADDR_ALLOC>(),
        6usize,
        concat!("Size of: ", stringify!(_T_MODE_ADDR_ALLOC))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MODE_ADDR_ALLOC>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_MODE_ADDR_ALLOC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC),
            "::",
            stringify!(md_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_kind) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC),
            "::",
            stringify!(md_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_top_address) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC),
            "::",
            stringify!(md_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC),
            "::",
            stringify!(md_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_MODE_ADDR_ALLOC = _T_MODE_ADDR_ALLOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLAVE_IND_PARA {
    pub slv_idx: ::std::os::raw::c_uchar,
    pub slv_no: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_SLAVE_IND_PARA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLAVE_IND_PARA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLAVE_IND_PARA>(),
        2usize,
        concat!("Size of: ", stringify!(_T_SLAVE_IND_PARA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLAVE_IND_PARA>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLAVE_IND_PARA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_IND_PARA),
            "::",
            stringify!(slv_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_IND_PARA),
            "::",
            stringify!(slv_no)
        )
    );
}
pub type T_SLAVE_IND_PARA = _T_SLAVE_IND_PARA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLAVE_SUB_PARA {
    pub slv_ind_para: T_SLAVE_IND_PARA,
    pub slv_enable: ::std::os::raw::c_uchar,
    pub slt_num: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_SLAVE_SUB_PARA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLAVE_SUB_PARA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLAVE_SUB_PARA>(),
        4usize,
        concat!("Size of: ", stringify!(_T_SLAVE_SUB_PARA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLAVE_SUB_PARA>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLAVE_SUB_PARA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_SUB_PARA),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_enable) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_SUB_PARA),
            "::",
            stringify!(slv_enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_num) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_SUB_PARA),
            "::",
            stringify!(slt_num)
        )
    );
}
pub type T_SLAVE_SUB_PARA = _T_SLAVE_SUB_PARA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_USR_PRM_DATA {
    pub user_prm_data_len: ::std::os::raw::c_ushort,
    pub user_prm_data: [::std::os::raw::c_uchar; 201usize],
    pub pad: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_USR_PRM_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_USR_PRM_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_USR_PRM_DATA>(),
        204usize,
        concat!("Size of: ", stringify!(_T_USR_PRM_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_USR_PRM_DATA>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_USR_PRM_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_prm_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_USR_PRM_DATA),
            "::",
            stringify!(user_prm_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_prm_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_USR_PRM_DATA),
            "::",
            stringify!(user_prm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        203usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_USR_PRM_DATA),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_USR_PRM_DATA = _T_USR_PRM_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_PRM_DATA {
    pub station_status: ::std::os::raw::c_uchar,
    pub wd_fact_1: ::std::os::raw::c_uchar,
    pub wd_fact_2: ::std::os::raw::c_uchar,
    pub min_tsdr: ::std::os::raw::c_uchar,
    pub ident_number: ::std::os::raw::c_ushort,
    pub group_ident: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub usr_prm: T_USR_PRM_DATA,
}
#[test]
fn bindgen_test_layout__T_PRM_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_PRM_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_PRM_DATA>(),
        212usize,
        concat!("Size of: ", stringify!(_T_PRM_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_PRM_DATA>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_PRM_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).station_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(station_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact_1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(wd_fact_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact_2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(wd_fact_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(ident_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_ident) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(group_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usr_prm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA),
            "::",
            stringify!(usr_prm)
        )
    );
}
pub type T_PRM_DATA = _T_PRM_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_CFG_DATA {
    pub cfg_data_len: ::std::os::raw::c_ushort,
    pub cfg_data: [::std::os::raw::c_uchar; 128usize],
}
#[test]
fn bindgen_test_layout__T_CFG_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_CFG_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_CFG_DATA>(),
        130usize,
        concat!("Size of: ", stringify!(_T_CFG_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_CFG_DATA>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_CFG_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_CFG_DATA),
            "::",
            stringify!(cfg_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_CFG_DATA),
            "::",
            stringify!(cfg_data)
        )
    );
}
pub type T_CFG_DATA = _T_CFG_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLV_USR_DATA {
    pub slave_user_data_len: ::std::os::raw::c_ushort,
    pub slave_user_data: [::std::os::raw::c_uchar; 30usize],
}
#[test]
fn bindgen_test_layout__T_SLV_USR_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLV_USR_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLV_USR_DATA>(),
        32usize,
        concat!("Size of: ", stringify!(_T_SLV_USR_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLV_USR_DATA>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_SLV_USR_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_user_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLV_USR_DATA),
            "::",
            stringify!(slave_user_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_user_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLV_USR_DATA),
            "::",
            stringify!(slave_user_data)
        )
    );
}
pub type T_SLV_USR_DATA = _T_SLV_USR_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLAVE_PARA {
    pub slv_ind_para: T_SLAVE_IND_PARA,
    pub sl_flag: ::std::os::raw::c_uchar,
    pub slave_type: ::std::os::raw::c_uchar,
    pub reserved: [::std::os::raw::c_uchar; 12usize],
    pub prm_data: T_PRM_DATA,
    pub cfg_data: T_CFG_DATA,
    pub slv_usr: T_SLV_USR_DATA,
}
#[test]
fn bindgen_test_layout__T_SLAVE_PARA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLAVE_PARA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLAVE_PARA>(),
        390usize,
        concat!("Size of: ", stringify!(_T_SLAVE_PARA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLAVE_PARA>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_SLAVE_PARA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(sl_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_type) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(slave_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(prm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg_data) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(cfg_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_usr) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA),
            "::",
            stringify!(slv_usr)
        )
    );
}
pub type T_SLAVE_PARA = _T_SLAVE_PARA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_DGN_ADDR_ALLOC {
    pub slv_ind_para: T_SLAVE_IND_PARA,
    pub dgn_path: ::std::os::raw::c_uchar,
    pub dgn_kind: ::std::os::raw::c_uchar,
    pub dgn_top_address: ::std::os::raw::c_ushort,
    pub dgn_size: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_DGN_ADDR_ALLOC() {
    const UNINIT: ::std::mem::MaybeUninit<_T_DGN_ADDR_ALLOC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_DGN_ADDR_ALLOC>(),
        8usize,
        concat!("Size of: ", stringify!(_T_DGN_ADDR_ALLOC))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_DGN_ADDR_ALLOC>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_DGN_ADDR_ALLOC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_path) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC),
            "::",
            stringify!(dgn_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_kind) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC),
            "::",
            stringify!(dgn_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_top_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC),
            "::",
            stringify!(dgn_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC),
            "::",
            stringify!(dgn_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_DGN_ADDR_ALLOC = _T_DGN_ADDR_ALLOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLOT_IND_PARA {
    pub slv_no: ::std::os::raw::c_uchar,
    pub slt_no: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_SLOT_IND_PARA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLOT_IND_PARA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLOT_IND_PARA>(),
        2usize,
        concat!("Size of: ", stringify!(_T_SLOT_IND_PARA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLOT_IND_PARA>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLOT_IND_PARA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLOT_IND_PARA),
            "::",
            stringify!(slv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLOT_IND_PARA),
            "::",
            stringify!(slt_no)
        )
    );
}
pub type T_SLOT_IND_PARA = _T_SLOT_IND_PARA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MODULE_DATA {
    pub slt_ind_para: T_SLOT_IND_PARA,
    pub module_len: ::std::os::raw::c_ushort,
    pub module_data: [::std::os::raw::c_uchar; 128usize],
}
#[test]
fn bindgen_test_layout__T_MODULE_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MODULE_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MODULE_DATA>(),
        132usize,
        concat!("Size of: ", stringify!(_T_MODULE_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MODULE_DATA>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_MODULE_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODULE_DATA),
            "::",
            stringify!(slt_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODULE_DATA),
            "::",
            stringify!(module_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODULE_DATA),
            "::",
            stringify!(module_data)
        )
    );
}
pub type T_MODULE_DATA = _T_MODULE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_DIDO_ADDR_ALLOC {
    pub slt_ind_para: T_SLOT_IND_PARA,
    pub di_path: ::std::os::raw::c_uchar,
    pub do_path: ::std::os::raw::c_uchar,
    pub di_kind: ::std::os::raw::c_uchar,
    pub do_kind: ::std::os::raw::c_uchar,
    pub di_top_address: ::std::os::raw::c_ushort,
    pub do_top_address: ::std::os::raw::c_ushort,
    pub di_size: ::std::os::raw::c_uchar,
    pub do_size: ::std::os::raw::c_uchar,
    pub module_type: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_DIDO_ADDR_ALLOC() {
    const UNINIT: ::std::mem::MaybeUninit<_T_DIDO_ADDR_ALLOC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_DIDO_ADDR_ALLOC>(),
        14usize,
        concat!("Size of: ", stringify!(_T_DIDO_ADDR_ALLOC))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_DIDO_ADDR_ALLOC>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_DIDO_ADDR_ALLOC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(slt_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(do_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(module_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_DIDO_ADDR_ALLOC = _T_DIDO_ADDR_ALLOC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OUT_PBMPRM {
    pub prm: _OUT_PBMPRM__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OUT_PBMPRM__bindgen_ty_1 {
    pub bus_para: T_BUS_PARA,
    pub mode_addr_alloc: T_MODE_ADDR_ALLOC,
    pub slv_sub_para: T_SLAVE_SUB_PARA,
    pub slv_para: T_SLAVE_PARA,
    pub dgn_addr_alloc: T_DGN_ADDR_ALLOC,
    pub module_data: T_MODULE_DATA,
    pub dido_addr_alloc: T_DIDO_ADDR_ALLOC,
}
#[test]
fn bindgen_test_layout__OUT_PBMPRM__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMPRM__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMPRM__bindgen_ty_1>(),
        392usize,
        concat!("Size of: ", stringify!(_OUT_PBMPRM__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMPRM__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_OUT_PBMPRM__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(bus_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(mode_addr_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_sub_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(slv_sub_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(slv_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(dgn_addr_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(module_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dido_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(dido_addr_alloc)
        )
    );
}
#[test]
fn bindgen_test_layout__OUT_PBMPRM() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMPRM>(),
        392usize,
        concat!("Size of: ", stringify!(_OUT_PBMPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMPRM>(),
        8usize,
        concat!("Alignment of ", stringify!(_OUT_PBMPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMPRM),
            "::",
            stringify!(prm)
        )
    );
}
pub type OUT_PBMPRM = _OUT_PBMPRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MAS_USR_FLG {
    pub master_user_data_len: ::std::os::raw::c_char,
    pub master_user_data: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_MAS_USR_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MAS_USR_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MAS_USR_FLG>(),
        2usize,
        concat!("Size of: ", stringify!(_T_MAS_USR_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MAS_USR_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_MAS_USR_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_user_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAS_USR_FLG),
            "::",
            stringify!(master_user_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_user_data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAS_USR_FLG),
            "::",
            stringify!(master_user_data)
        )
    );
}
pub type T_MAS_USR_FLG = _T_MAS_USR_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_BUS_PARA_FLG {
    pub fdl_add: ::std::os::raw::c_char,
    pub baud_rate: ::std::os::raw::c_char,
    pub tsl: ::std::os::raw::c_char,
    pub min_tsdr: ::std::os::raw::c_char,
    pub max_tsdr: ::std::os::raw::c_char,
    pub tqui: ::std::os::raw::c_char,
    pub tset: ::std::os::raw::c_char,
    pub ttr: ::std::os::raw::c_char,
    pub g: ::std::os::raw::c_char,
    pub hsa: ::std::os::raw::c_char,
    pub max_retry_limit: ::std::os::raw::c_char,
    pub bp_flag: ::std::os::raw::c_char,
    pub min_slave_interval: ::std::os::raw::c_char,
    pub poll_timeout: ::std::os::raw::c_char,
    pub data_control_time: ::std::os::raw::c_char,
    pub pad1: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 6usize],
    pub master_class2_name_rsv: ::std::os::raw::c_char,
    pub pad2: ::std::os::raw::c_char,
    pub mas_usr: T_MAS_USR_FLG,
}
#[test]
fn bindgen_test_layout__T_BUS_PARA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_BUS_PARA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_BUS_PARA_FLG>(),
        26usize,
        concat!("Size of: ", stringify!(_T_BUS_PARA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_BUS_PARA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_BUS_PARA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdl_add) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(fdl_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baud_rate) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(baud_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(tsl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tsdr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(max_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tqui) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(tqui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tset) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(tset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttr) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(ttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsa) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(hsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_retry_limit) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(max_retry_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp_flag) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(bp_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_slave_interval) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(min_slave_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll_timeout) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(poll_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_control_time) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(data_control_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_class2_name_rsv) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(master_class2_name_rsv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mas_usr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_BUS_PARA_FLG),
            "::",
            stringify!(mas_usr)
        )
    );
}
pub type T_BUS_PARA_FLG = _T_BUS_PARA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MODE_ADDR_ALLOC_FLG {
    pub md_path: ::std::os::raw::c_char,
    pub md_kind: ::std::os::raw::c_char,
    pub md_top_address: ::std::os::raw::c_char,
    pub md_size: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_MODE_ADDR_ALLOC_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MODE_ADDR_ALLOC_FLG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MODE_ADDR_ALLOC_FLG>(),
        4usize,
        concat!("Size of: ", stringify!(_T_MODE_ADDR_ALLOC_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MODE_ADDR_ALLOC_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_MODE_ADDR_ALLOC_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC_FLG),
            "::",
            stringify!(md_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_kind) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC_FLG),
            "::",
            stringify!(md_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_top_address) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC_FLG),
            "::",
            stringify!(md_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODE_ADDR_ALLOC_FLG),
            "::",
            stringify!(md_size)
        )
    );
}
pub type T_MODE_ADDR_ALLOC_FLG = _T_MODE_ADDR_ALLOC_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLAVE_IND_PARA_FLG {
    pub slv_idx: ::std::os::raw::c_char,
    pub slv_no: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_SLAVE_IND_PARA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLAVE_IND_PARA_FLG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLAVE_IND_PARA_FLG>(),
        2usize,
        concat!("Size of: ", stringify!(_T_SLAVE_IND_PARA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLAVE_IND_PARA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLAVE_IND_PARA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_IND_PARA_FLG),
            "::",
            stringify!(slv_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_IND_PARA_FLG),
            "::",
            stringify!(slv_no)
        )
    );
}
pub type T_SLAVE_IND_PARA_FLG = _T_SLAVE_IND_PARA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLAVE_SUB_PARA_FLG {
    pub slv_ind_para: T_SLAVE_IND_PARA_FLG,
    pub slv_enable: ::std::os::raw::c_char,
    pub slt_num: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_SLAVE_SUB_PARA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLAVE_SUB_PARA_FLG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLAVE_SUB_PARA_FLG>(),
        4usize,
        concat!("Size of: ", stringify!(_T_SLAVE_SUB_PARA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLAVE_SUB_PARA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLAVE_SUB_PARA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_SUB_PARA_FLG),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_enable) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_SUB_PARA_FLG),
            "::",
            stringify!(slv_enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_num) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_SUB_PARA_FLG),
            "::",
            stringify!(slt_num)
        )
    );
}
pub type T_SLAVE_SUB_PARA_FLG = _T_SLAVE_SUB_PARA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_USR_PRM_DATA_FLG {
    pub user_prm_data_len: ::std::os::raw::c_char,
    pub user_prm_data: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_USR_PRM_DATA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_USR_PRM_DATA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_USR_PRM_DATA_FLG>(),
        2usize,
        concat!("Size of: ", stringify!(_T_USR_PRM_DATA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_USR_PRM_DATA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_USR_PRM_DATA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_prm_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_USR_PRM_DATA_FLG),
            "::",
            stringify!(user_prm_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_prm_data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_USR_PRM_DATA_FLG),
            "::",
            stringify!(user_prm_data)
        )
    );
}
pub type T_USR_PRM_DATA_FLG = _T_USR_PRM_DATA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_PRM_DATA_FLG {
    pub station_status: ::std::os::raw::c_char,
    pub wd_fact_1: ::std::os::raw::c_char,
    pub wd_fact_2: ::std::os::raw::c_char,
    pub min_tsdr: ::std::os::raw::c_char,
    pub ident_number: ::std::os::raw::c_char,
    pub group_ident: ::std::os::raw::c_char,
    pub usr_prm: T_USR_PRM_DATA_FLG,
}
#[test]
fn bindgen_test_layout__T_PRM_DATA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_PRM_DATA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_PRM_DATA_FLG>(),
        8usize,
        concat!("Size of: ", stringify!(_T_PRM_DATA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_PRM_DATA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_PRM_DATA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).station_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(station_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact_1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(wd_fact_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wd_fact_2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(wd_fact_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_tsdr) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(min_tsdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(ident_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_ident) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(group_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usr_prm) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_PRM_DATA_FLG),
            "::",
            stringify!(usr_prm)
        )
    );
}
pub type T_PRM_DATA_FLG = _T_PRM_DATA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_CFG_DATA_FLG {
    pub cfg_data_len: ::std::os::raw::c_char,
    pub cfg_data: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_CFG_DATA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_CFG_DATA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_CFG_DATA_FLG>(),
        2usize,
        concat!("Size of: ", stringify!(_T_CFG_DATA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_CFG_DATA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_CFG_DATA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_CFG_DATA_FLG),
            "::",
            stringify!(cfg_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg_data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_CFG_DATA_FLG),
            "::",
            stringify!(cfg_data)
        )
    );
}
pub type T_CFG_DATA_FLG = _T_CFG_DATA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLV_USR_DATA_FLAG {
    pub slave_user_data_len: ::std::os::raw::c_char,
    pub slave_user_data: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_SLV_USR_DATA_FLAG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLV_USR_DATA_FLAG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLV_USR_DATA_FLAG>(),
        2usize,
        concat!("Size of: ", stringify!(_T_SLV_USR_DATA_FLAG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLV_USR_DATA_FLAG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLV_USR_DATA_FLAG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_user_data_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLV_USR_DATA_FLAG),
            "::",
            stringify!(slave_user_data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_user_data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLV_USR_DATA_FLAG),
            "::",
            stringify!(slave_user_data)
        )
    );
}
pub type T_SLV_USR_DATA_FLG = _T_SLV_USR_DATA_FLAG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLAVE_PARA_FLG {
    pub slv_ind_para: T_SLAVE_IND_PARA_FLG,
    pub sl_flag: ::std::os::raw::c_char,
    pub slave_type: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 12usize],
    pub prm_data: T_PRM_DATA_FLG,
    pub cfg_data_rsv: T_CFG_DATA_FLG,
    pub slv_usr: T_SLV_USR_DATA_FLG,
}
#[test]
fn bindgen_test_layout__T_SLAVE_PARA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLAVE_PARA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLAVE_PARA_FLG>(),
        28usize,
        concat!("Size of: ", stringify!(_T_SLAVE_PARA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLAVE_PARA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLAVE_PARA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(sl_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_type) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(slave_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(prm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg_data_rsv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(cfg_data_rsv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_usr) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLAVE_PARA_FLG),
            "::",
            stringify!(slv_usr)
        )
    );
}
pub type T_SLAVE_PARA_FLG = _T_SLAVE_PARA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_DGN_ADDR_ALLOC_FLG {
    pub slv_ind_para: T_SLAVE_IND_PARA_FLG,
    pub dgn_path: ::std::os::raw::c_char,
    pub dgn_kind: ::std::os::raw::c_char,
    pub dgn_top_address: ::std::os::raw::c_char,
    pub dgn_size: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_DGN_ADDR_ALLOC_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_DGN_ADDR_ALLOC_FLG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_DGN_ADDR_ALLOC_FLG>(),
        6usize,
        concat!("Size of: ", stringify!(_T_DGN_ADDR_ALLOC_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_DGN_ADDR_ALLOC_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_DGN_ADDR_ALLOC_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC_FLG),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_path) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC_FLG),
            "::",
            stringify!(dgn_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_kind) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC_FLG),
            "::",
            stringify!(dgn_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_top_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC_FLG),
            "::",
            stringify!(dgn_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_size) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DGN_ADDR_ALLOC_FLG),
            "::",
            stringify!(dgn_size)
        )
    );
}
pub type T_DGN_ADDR_ALLOC_FLG = _T_DGN_ADDR_ALLOC_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLOT_IND_PARA_FLG {
    pub slv_no: ::std::os::raw::c_char,
    pub slt_no: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_SLOT_IND_PARA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLOT_IND_PARA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLOT_IND_PARA_FLG>(),
        2usize,
        concat!("Size of: ", stringify!(_T_SLOT_IND_PARA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLOT_IND_PARA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLOT_IND_PARA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLOT_IND_PARA_FLG),
            "::",
            stringify!(slv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLOT_IND_PARA_FLG),
            "::",
            stringify!(slt_no)
        )
    );
}
pub type T_SLOT_IND_PARA_FLG = _T_SLOT_IND_PARA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MODULE_DATA_FLG {
    pub slt_ind_para: T_SLOT_IND_PARA_FLG,
    pub module_len: ::std::os::raw::c_char,
    pub module_data: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_MODULE_DATA_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MODULE_DATA_FLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MODULE_DATA_FLG>(),
        4usize,
        concat!("Size of: ", stringify!(_T_MODULE_DATA_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MODULE_DATA_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_MODULE_DATA_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODULE_DATA_FLG),
            "::",
            stringify!(slt_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODULE_DATA_FLG),
            "::",
            stringify!(module_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MODULE_DATA_FLG),
            "::",
            stringify!(module_data)
        )
    );
}
pub type T_MODULE_DATA_FLG = _T_MODULE_DATA_FLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_DIDO_ADDR_ALLOC_FLG {
    pub slt_ind_para: T_SLOT_IND_PARA_FLG,
    pub di_path: ::std::os::raw::c_char,
    pub do_path: ::std::os::raw::c_char,
    pub di_kind: ::std::os::raw::c_char,
    pub do_kind: ::std::os::raw::c_char,
    pub di_top_address: ::std::os::raw::c_char,
    pub do_top_address: ::std::os::raw::c_char,
    pub di_size: ::std::os::raw::c_char,
    pub do_size: ::std::os::raw::c_char,
    pub module_type_rsv: ::std::os::raw::c_char,
    pub pad: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__T_DIDO_ADDR_ALLOC_FLG() {
    const UNINIT: ::std::mem::MaybeUninit<_T_DIDO_ADDR_ALLOC_FLG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_DIDO_ADDR_ALLOC_FLG>(),
        12usize,
        concat!("Size of: ", stringify!(_T_DIDO_ADDR_ALLOC_FLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_DIDO_ADDR_ALLOC_FLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_DIDO_ADDR_ALLOC_FLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(slt_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(do_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_type_rsv) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(module_type_rsv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DIDO_ADDR_ALLOC_FLG),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_DIDO_ADDR_ALLOC_FLG = _T_DIDO_ADDR_ALLOC_FLG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IN_PBMPRM {
    pub prm: _IN_PBMPRM__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IN_PBMPRM__bindgen_ty_1 {
    pub bus_para: T_BUS_PARA,
    pub mode_addr_alloc: T_MODE_ADDR_ALLOC,
    pub slv_sub_para: T_SLAVE_SUB_PARA,
    pub slv_para: T_SLAVE_PARA,
    pub dgn_addr_alloc: T_DGN_ADDR_ALLOC,
    pub module_data: T_MODULE_DATA,
    pub dido_addr_alloc: T_DIDO_ADDR_ALLOC,
}
#[test]
fn bindgen_test_layout__IN_PBMPRM__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBMPRM__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBMPRM__bindgen_ty_1>(),
        392usize,
        concat!("Size of: ", stringify!(_IN_PBMPRM__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBMPRM__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_IN_PBMPRM__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(bus_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(mode_addr_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_sub_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(slv_sub_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(slv_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(dgn_addr_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(module_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dido_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM__bindgen_ty_1),
            "::",
            stringify!(dido_addr_alloc)
        )
    );
}
#[test]
fn bindgen_test_layout__IN_PBMPRM() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBMPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBMPRM>(),
        392usize,
        concat!("Size of: ", stringify!(_IN_PBMPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBMPRM>(),
        8usize,
        concat!("Alignment of ", stringify!(_IN_PBMPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRM),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_PBMPRM = _IN_PBMPRM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IN_PBMPRMFLG {
    pub flg: _IN_PBMPRMFLG__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IN_PBMPRMFLG__bindgen_ty_1 {
    pub bus_para: T_BUS_PARA_FLG,
    pub mode_addr_alloc: T_MODE_ADDR_ALLOC_FLG,
    pub slv_sub_para: T_SLAVE_SUB_PARA_FLG,
    pub slv_para: T_SLAVE_PARA_FLG,
    pub dgn_addr_alloc: T_DGN_ADDR_ALLOC_FLG,
    pub module_data: T_MODULE_DATA_FLG,
    pub dido_addr_alloc: T_DIDO_ADDR_ALLOC_FLG,
}
#[test]
fn bindgen_test_layout__IN_PBMPRMFLG__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBMPRMFLG__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBMPRMFLG__bindgen_ty_1>(),
        28usize,
        concat!("Size of: ", stringify!(_IN_PBMPRMFLG__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBMPRMFLG__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_IN_PBMPRMFLG__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(bus_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(mode_addr_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_sub_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(slv_sub_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(slv_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(dgn_addr_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(module_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dido_addr_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG__bindgen_ty_1),
            "::",
            stringify!(dido_addr_alloc)
        )
    );
}
#[test]
fn bindgen_test_layout__IN_PBMPRMFLG() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBMPRMFLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBMPRMFLG>(),
        28usize,
        concat!("Size of: ", stringify!(_IN_PBMPRMFLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBMPRMFLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_IN_PBMPRMFLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBMPRMFLG),
            "::",
            stringify!(flg)
        )
    );
}
pub type IN_PBMPRMFLG = _IN_PBMPRMFLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLVSLT_IND {
    pub slv_no: ::std::os::raw::c_uchar,
    pub slt_no: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_SLVSLT_IND() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLVSLT_IND> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLVSLT_IND>(),
        2usize,
        concat!("Size of: ", stringify!(_T_SLVSLT_IND))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLVSLT_IND>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_SLVSLT_IND))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVSLT_IND),
            "::",
            stringify!(slv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVSLT_IND),
            "::",
            stringify!(slt_no)
        )
    );
}
pub type T_SLVSLT_IND = _T_SLVSLT_IND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_SLVTBL {
    pub slv_ind_para: T_SLAVE_IND_PARA,
    pub slv_enable: ::std::os::raw::c_uchar,
    pub slt_num: ::std::os::raw::c_uchar,
    pub dgn_path: ::std::os::raw::c_uchar,
    pub dgn_kind: ::std::os::raw::c_uchar,
    pub dgn_top_address: ::std::os::raw::c_ushort,
    pub dgn_size: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_SLVTBL() {
    const UNINIT: ::std::mem::MaybeUninit<_T_SLVTBL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_SLVTBL>(),
        10usize,
        concat!("Size of: ", stringify!(_T_SLVTBL))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_SLVTBL>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_SLVTBL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_ind_para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(slv_ind_para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_enable) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(slv_enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_num) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(slt_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(dgn_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_kind) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(dgn_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_top_address) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(dgn_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgn_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(dgn_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_SLVTBL),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_SLVTBL = _T_SLVTBL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_ALLSLVTBL {
    pub slv_tbl: [T_SLVTBL; 80usize],
}
#[test]
fn bindgen_test_layout__OUT_ALLSLVTBL() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_ALLSLVTBL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_ALLSLVTBL>(),
        800usize,
        concat!("Size of: ", stringify!(_OUT_ALLSLVTBL))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_ALLSLVTBL>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_ALLSLVTBL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_tbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_ALLSLVTBL),
            "::",
            stringify!(slv_tbl)
        )
    );
}
pub type OUT_ALLSLVTBL = _OUT_ALLSLVTBL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_MAXMODLENPRM {
    pub slv_no: ::std::os::raw::c_uchar,
    pub slt_no: ::std::os::raw::c_uchar,
    pub max_mod_len: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__T_MAXMODLENPRM() {
    const UNINIT: ::std::mem::MaybeUninit<_T_MAXMODLENPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_MAXMODLENPRM>(),
        4usize,
        concat!("Size of: ", stringify!(_T_MAXMODLENPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_MAXMODLENPRM>(),
        1usize,
        concat!("Alignment of ", stringify!(_T_MAXMODLENPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAXMODLENPRM),
            "::",
            stringify!(slv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAXMODLENPRM),
            "::",
            stringify!(slt_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mod_len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAXMODLENPRM),
            "::",
            stringify!(max_mod_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_MAXMODLENPRM),
            "::",
            stringify!(pad)
        )
    );
}
pub type T_MAXMODLENPRM = _T_MAXMODLENPRM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OUT_PBMSUBPRM {
    pub subprm: _OUT_PBMSUBPRM__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OUT_PBMSUBPRM__bindgen_ty_1 {
    pub max_slv_num: ::std::os::raw::c_uchar,
    pub max_slt_num: ::std::os::raw::c_uchar,
    pub enb_slv_num: ::std::os::raw::c_uchar,
    pub total_slts: ::std::os::raw::c_uchar,
    pub shift_mode_stat: ::std::os::raw::c_uchar,
    pub max_mod_len_prm: T_MAXMODLENPRM,
}
#[test]
fn bindgen_test_layout__OUT_PBMSUBPRM__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMSUBPRM__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMSUBPRM__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_OUT_PBMSUBPRM__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMSUBPRM__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_OUT_PBMSUBPRM__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_slv_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM__bindgen_ty_1),
            "::",
            stringify!(max_slv_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_slt_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM__bindgen_ty_1),
            "::",
            stringify!(max_slt_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enb_slv_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM__bindgen_ty_1),
            "::",
            stringify!(enb_slv_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_slts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM__bindgen_ty_1),
            "::",
            stringify!(total_slts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift_mode_stat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM__bindgen_ty_1),
            "::",
            stringify!(shift_mode_stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mod_len_prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM__bindgen_ty_1),
            "::",
            stringify!(max_mod_len_prm)
        )
    );
}
#[test]
fn bindgen_test_layout__OUT_PBMSUBPRM() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMSUBPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMSUBPRM>(),
        4usize,
        concat!("Size of: ", stringify!(_OUT_PBMSUBPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMSUBPRM>(),
        1usize,
        concat!("Alignment of ", stringify!(_OUT_PBMSUBPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subprm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSUBPRM),
            "::",
            stringify!(subprm)
        )
    );
}
pub type OUT_PBMSUBPRM = _OUT_PBMSUBPRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_ERR_CODE {
    pub param_err_code: [::std::os::raw::c_ushort; 4usize],
    pub inter_err_code: [::std::os::raw::c_ushort; 4usize],
}
#[test]
fn bindgen_test_layout__T_ERR_CODE() {
    const UNINIT: ::std::mem::MaybeUninit<_T_ERR_CODE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_ERR_CODE>(),
        16usize,
        concat!("Size of: ", stringify!(_T_ERR_CODE))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_ERR_CODE>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_ERR_CODE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_err_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_ERR_CODE),
            "::",
            stringify!(param_err_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inter_err_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_ERR_CODE),
            "::",
            stringify!(inter_err_code)
        )
    );
}
pub type T_ERR_CODE = _T_ERR_CODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_CHGMODERESULT {
    pub crnt_mode: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub result: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__OUT_CHGMODERESULT() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_CHGMODERESULT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_CHGMODERESULT>(),
        4usize,
        concat!("Size of: ", stringify!(_OUT_CHGMODERESULT))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_CHGMODERESULT>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_CHGMODERESULT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crnt_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_CHGMODERESULT),
            "::",
            stringify!(crnt_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_CHGMODERESULT),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_CHGMODERESULT),
            "::",
            stringify!(result)
        )
    );
}
pub type OUT_CHGMODERESULT = _OUT_CHGMODERESULT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _T_DATA_REF_TIM {
    pub total_ref_tim: ::std::os::raw::c_ushort,
    pub board_ref_tim: ::std::os::raw::c_ushort,
    pub cnc_ref_tim: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__T_DATA_REF_TIM() {
    const UNINIT: ::std::mem::MaybeUninit<_T_DATA_REF_TIM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_T_DATA_REF_TIM>(),
        6usize,
        concat!("Size of: ", stringify!(_T_DATA_REF_TIM))
    );
    assert_eq!(
        ::std::mem::align_of::<_T_DATA_REF_TIM>(),
        2usize,
        concat!("Alignment of ", stringify!(_T_DATA_REF_TIM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_ref_tim) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DATA_REF_TIM),
            "::",
            stringify!(total_ref_tim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).board_ref_tim) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DATA_REF_TIM),
            "::",
            stringify!(board_ref_tim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnc_ref_tim) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_T_DATA_REF_TIM),
            "::",
            stringify!(cnc_ref_tim)
        )
    );
}
pub type T_DATA_REF_TIM = _T_DATA_REF_TIM;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OUT_PBMCOMINFO {
    pub cominfo: _OUT_PBMCOMINFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OUT_PBMCOMINFO__bindgen_ty_1 {
    pub crnt_mode: ::std::os::raw::c_uchar,
    pub data_ref_tim: T_DATA_REF_TIM,
}
#[test]
fn bindgen_test_layout__OUT_PBMCOMINFO__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMCOMINFO__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMCOMINFO__bindgen_ty_1>(),
        6usize,
        concat!("Size of: ", stringify!(_OUT_PBMCOMINFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMCOMINFO__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBMCOMINFO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crnt_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMCOMINFO__bindgen_ty_1),
            "::",
            stringify!(crnt_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_ref_tim) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMCOMINFO__bindgen_ty_1),
            "::",
            stringify!(data_ref_tim)
        )
    );
}
#[test]
fn bindgen_test_layout__OUT_PBMCOMINFO() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMCOMINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMCOMINFO>(),
        6usize,
        concat!("Size of: ", stringify!(_OUT_PBMCOMINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMCOMINFO>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBMCOMINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cominfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMCOMINFO),
            "::",
            stringify!(cominfo)
        )
    );
}
pub type OUT_PBMCOMINFO = _OUT_PBMCOMINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_PBMNODEINFO {
    pub slv_no: ::std::os::raw::c_uchar,
    pub commstat: ::std::os::raw::c_uchar,
    pub status1: ::std::os::raw::c_uchar,
    pub status2: ::std::os::raw::c_uchar,
    pub status3: ::std::os::raw::c_uchar,
    pub master: ::std::os::raw::c_uchar,
    pub ident: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__OUT_PBMNODEINFO() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMNODEINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMNODEINFO>(),
        8usize,
        concat!("Size of: ", stringify!(_OUT_PBMNODEINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMNODEINFO>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBMNODEINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(slv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commstat) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(commstat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(status1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(status2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status3) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(status3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMNODEINFO),
            "::",
            stringify!(ident)
        )
    );
}
pub type OUT_PBMNODEINFO = _OUT_PBMNODEINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_PBMSLOTINFO {
    pub slv_no: ::std::os::raw::c_uchar,
    pub slt_no: ::std::os::raw::c_uchar,
    pub di_size: ::std::os::raw::c_uchar,
    pub do_size: ::std::os::raw::c_uchar,
    pub di_path: ::std::os::raw::c_uchar,
    pub do_path: ::std::os::raw::c_uchar,
    pub di_kind: ::std::os::raw::c_uchar,
    pub do_kind: ::std::os::raw::c_uchar,
    pub di_top_address: ::std::os::raw::c_ushort,
    pub do_top_address: ::std::os::raw::c_ushort,
    pub module_type: ::std::os::raw::c_uchar,
    pub commstat: ::std::os::raw::c_uchar,
    pub reserved: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__OUT_PBMSLOTINFO() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBMSLOTINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBMSLOTINFO>(),
        16usize,
        concat!("Size of: ", stringify!(_OUT_PBMSLOTINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBMSLOTINFO>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBMSLOTINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slv_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(slv_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slt_no) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(slt_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(do_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(module_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commstat) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(commstat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBMSLOTINFO),
            "::",
            stringify!(reserved)
        )
    );
}
pub type OUT_PBMSLOTINFO = _OUT_PBMSLOTINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_PBSPRM {
    pub slave_no: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub di_size: ::std::os::raw::c_uchar,
    pub do_size: ::std::os::raw::c_uchar,
    pub di_path: ::std::os::raw::c_uchar,
    pub do_path: ::std::os::raw::c_uchar,
    pub di_kind: ::std::os::raw::c_uchar,
    pub do_kind: ::std::os::raw::c_uchar,
    pub di_top_address: ::std::os::raw::c_ushort,
    pub do_top_address: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__OUT_PBSPRM() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBSPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBSPRM>(),
        12usize,
        concat!("Size of: ", stringify!(_OUT_PBSPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBSPRM>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBSPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM),
            "::",
            stringify!(do_top_address)
        )
    );
}
pub type OUT_PBSPRM = _OUT_PBSPRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IN_PBSPRMFLG {
    pub slave_no: ::std::os::raw::c_char,
    pub pad: ::std::os::raw::c_char,
    pub di_size: ::std::os::raw::c_char,
    pub do_size: ::std::os::raw::c_char,
    pub di_path: ::std::os::raw::c_char,
    pub do_path: ::std::os::raw::c_char,
    pub di_kind: ::std::os::raw::c_char,
    pub do_kind: ::std::os::raw::c_char,
    pub di_top_address: ::std::os::raw::c_char,
    pub do_top_address: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__IN_PBSPRMFLG() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBSPRMFLG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBSPRMFLG>(),
        10usize,
        concat!("Size of: ", stringify!(_IN_PBSPRMFLG))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBSPRMFLG>(),
        1usize,
        concat!("Alignment of ", stringify!(_IN_PBSPRMFLG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG),
            "::",
            stringify!(do_top_address)
        )
    );
}
pub type IN_PBSPRMFLG = _IN_PBSPRMFLG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IN_PBSPRM {
    pub slave_no: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub di_size: ::std::os::raw::c_uchar,
    pub do_size: ::std::os::raw::c_uchar,
    pub di_path: ::std::os::raw::c_uchar,
    pub do_path: ::std::os::raw::c_uchar,
    pub di_kind: ::std::os::raw::c_uchar,
    pub do_kind: ::std::os::raw::c_uchar,
    pub di_top_address: ::std::os::raw::c_ushort,
    pub do_top_address: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__IN_PBSPRM() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBSPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBSPRM>(),
        12usize,
        concat!("Size of: ", stringify!(_IN_PBSPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBSPRM>(),
        2usize,
        concat!("Alignment of ", stringify!(_IN_PBSPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM),
            "::",
            stringify!(do_top_address)
        )
    );
}
pub type IN_PBSPRM = _IN_PBSPRM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_PBSSTATUS {
    pub config_sts: ::std::os::raw::c_uchar,
    pub param_sts: ::std::os::raw::c_uchar,
    pub watchdog_sts: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub ident_no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__OUT_PBSSTATUS() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBSSTATUS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBSSTATUS>(),
        6usize,
        concat!("Size of: ", stringify!(_OUT_PBSSTATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBSSTATUS>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBSSTATUS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_sts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS),
            "::",
            stringify!(config_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_sts) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS),
            "::",
            stringify!(param_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).watchdog_sts) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS),
            "::",
            stringify!(watchdog_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS),
            "::",
            stringify!(ident_no)
        )
    );
}
pub type OUT_PBSSTATUS = _OUT_PBSSTATUS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_PBSPRM2 {
    pub slave_no: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub di_size: ::std::os::raw::c_uchar,
    pub do_size: ::std::os::raw::c_uchar,
    pub di_path: ::std::os::raw::c_uchar,
    pub do_path: ::std::os::raw::c_uchar,
    pub di_kind: ::std::os::raw::c_uchar,
    pub do_kind: ::std::os::raw::c_uchar,
    pub di_top_address: ::std::os::raw::c_ushort,
    pub do_top_address: ::std::os::raw::c_ushort,
    pub sts_path: ::std::os::raw::c_uchar,
    pub sts_kind: ::std::os::raw::c_uchar,
    pub sts_top_address: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__OUT_PBSPRM2() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBSPRM2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBSPRM2>(),
        16usize,
        concat!("Size of: ", stringify!(_OUT_PBSPRM2))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBSPRM2>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBSPRM2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(do_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_path) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(sts_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_kind) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(sts_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_top_address) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSPRM2),
            "::",
            stringify!(sts_top_address)
        )
    );
}
pub type OUT_PBSPRM2 = _OUT_PBSPRM2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IN_PBSPRMFLG2 {
    pub slave_no: ::std::os::raw::c_char,
    pub pad1: ::std::os::raw::c_char,
    pub di_size: ::std::os::raw::c_char,
    pub do_size: ::std::os::raw::c_char,
    pub di_path: ::std::os::raw::c_char,
    pub do_path: ::std::os::raw::c_char,
    pub di_kind: ::std::os::raw::c_char,
    pub do_kind: ::std::os::raw::c_char,
    pub di_top_address: ::std::os::raw::c_char,
    pub do_top_address: ::std::os::raw::c_char,
    pub sts_path: ::std::os::raw::c_char,
    pub sts_kind: ::std::os::raw::c_char,
    pub sts_top_address: ::std::os::raw::c_char,
    pub pad2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__IN_PBSPRMFLG2() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBSPRMFLG2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBSPRMFLG2>(),
        14usize,
        concat!("Size of: ", stringify!(_IN_PBSPRMFLG2))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBSPRMFLG2>(),
        1usize,
        concat!("Alignment of ", stringify!(_IN_PBSPRMFLG2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(do_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_path) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(sts_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_kind) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(sts_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_top_address) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(sts_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRMFLG2),
            "::",
            stringify!(pad2)
        )
    );
}
pub type IN_PBSPRMFLG2 = _IN_PBSPRMFLG2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IN_PBSPRM2 {
    pub slave_no: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub di_size: ::std::os::raw::c_uchar,
    pub do_size: ::std::os::raw::c_uchar,
    pub di_path: ::std::os::raw::c_uchar,
    pub do_path: ::std::os::raw::c_uchar,
    pub di_kind: ::std::os::raw::c_uchar,
    pub do_kind: ::std::os::raw::c_uchar,
    pub di_top_address: ::std::os::raw::c_ushort,
    pub do_top_address: ::std::os::raw::c_ushort,
    pub sts_path: ::std::os::raw::c_uchar,
    pub sts_kind: ::std::os::raw::c_uchar,
    pub sts_top_address: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__IN_PBSPRM2() {
    const UNINIT: ::std::mem::MaybeUninit<_IN_PBSPRM2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IN_PBSPRM2>(),
        16usize,
        concat!("Size of: ", stringify!(_IN_PBSPRM2))
    );
    assert_eq!(
        ::std::mem::align_of::<_IN_PBSPRM2>(),
        2usize,
        concat!("Alignment of ", stringify!(_IN_PBSPRM2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(slave_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(di_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(do_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(di_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_path) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(do_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_kind) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(di_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_kind) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(do_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(di_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top_address) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(do_top_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_path) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(sts_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_kind) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(sts_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts_top_address) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_IN_PBSPRM2),
            "::",
            stringify!(sts_top_address)
        )
    );
}
pub type IN_PBSPRM2 = _IN_PBSPRM2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUT_PBSSTATUS2 {
    pub config_sts: ::std::os::raw::c_uchar,
    pub param_sts: ::std::os::raw::c_uchar,
    pub watchdog_sts: ::std::os::raw::c_uchar,
    pub pad1: ::std::os::raw::c_uchar,
    pub ident_no: ::std::os::raw::c_ushort,
    pub sts: ::std::os::raw::c_uchar,
    pub pad2: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__OUT_PBSSTATUS2() {
    const UNINIT: ::std::mem::MaybeUninit<_OUT_PBSSTATUS2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OUT_PBSSTATUS2>(),
        8usize,
        concat!("Size of: ", stringify!(_OUT_PBSSTATUS2))
    );
    assert_eq!(
        ::std::mem::align_of::<_OUT_PBSSTATUS2>(),
        2usize,
        concat!("Alignment of ", stringify!(_OUT_PBSSTATUS2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_sts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(config_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_sts) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(param_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).watchdog_sts) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(watchdog_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(ident_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sts) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_OUT_PBSSTATUS2),
            "::",
            stringify!(pad2)
        )
    );
}
pub type OUT_PBSSTATUS2 = _OUT_PBSSTATUS2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbnode {
    pub node_no: ::std::os::raw::c_long,
    pub io_base: ::std::os::raw::c_long,
    pub status: ::std::os::raw::c_long,
    pub cnc_type: ::std::os::raw::c_long,
    pub node_name: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout_odbnode() {
    const UNINIT: ::std::mem::MaybeUninit<odbnode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbnode>(),
        56usize,
        concat!("Size of: ", stringify!(odbnode))
    );
    assert_eq!(
        ::std::mem::align_of::<odbnode>(),
        8usize,
        concat!("Alignment of ", stringify!(odbnode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnode),
            "::",
            stringify!(node_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_base) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnode),
            "::",
            stringify!(io_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnc_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnode),
            "::",
            stringify!(cnc_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbnode),
            "::",
            stringify!(node_name)
        )
    );
}
pub type ODBNODE = odbnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmmslv {
    pub slvnum: ::std::os::raw::c_long,
    pub group: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_odbpmmslv() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmmslv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmmslv>(),
        72usize,
        concat!("Size of: ", stringify!(odbpmmslv))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmmslv>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmmslv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slvnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmslv),
            "::",
            stringify!(slvnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmslv),
            "::",
            stringify!(group)
        )
    );
}
pub type ODBPMMSLV = odbpmmslv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmmsyd {
    pub system: [::std::os::raw::c_char; 2usize],
    pub model: [::std::os::raw::c_char; 2usize],
    pub series: [::std::os::raw::c_char; 4usize],
    pub edition: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_odbpmmsyd() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmmsyd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmmsyd>(),
        12usize,
        concat!("Size of: ", stringify!(odbpmmsyd))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmmsyd>(),
        1usize,
        concat!("Alignment of ", stringify!(odbpmmsyd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmsyd),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmsyd),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmsyd),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edition) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmsyd),
            "::",
            stringify!(edition)
        )
    );
}
pub type ODBPMMSYD = odbpmmsyd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbpmmgti {
    pub top: ::std::os::raw::c_long,
    pub num: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_idbpmmgti() {
    const UNINIT: ::std::mem::MaybeUninit<idbpmmgti> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbpmmgti>(),
        16usize,
        concat!("Size of: ", stringify!(idbpmmgti))
    );
    assert_eq!(
        ::std::mem::align_of::<idbpmmgti>(),
        8usize,
        concat!("Alignment of ", stringify!(idbpmmgti))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpmmgti),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpmmgti),
            "::",
            stringify!(num)
        )
    );
}
pub type IDBPMMGTI = idbpmmgti;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmmget {
    pub pos: ::std::os::raw::c_long,
    pub feed: ::std::os::raw::c_long,
    pub data: [::std::os::raw::c_long; 20usize],
    pub number: [::std::os::raw::c_long; 20usize],
    pub axis: [::std::os::raw::c_short; 20usize],
    pub type_: [::std::os::raw::c_short; 20usize],
    pub alaxis: [::std::os::raw::c_char; 40usize],
    pub alnumber: [::std::os::raw::c_ushort; 40usize],
    pub chanl: ::std::os::raw::c_long,
    pub group: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbpmmget() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmmget> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmmget>(),
        552usize,
        concat!("Size of: ", stringify!(odbpmmget))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmmget>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmmget))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alaxis) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(alaxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alnumber) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(alnumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chanl) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(chanl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmget),
            "::",
            stringify!(group)
        )
    );
}
pub type ODBPMMGET = odbpmmget;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmmprp {
    pub data: ::std::os::raw::c_long,
    pub number: ::std::os::raw::c_ushort,
    pub axis: ::std::os::raw::c_uchar,
    pub type_: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbpmmprp() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmmprp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmmprp>(),
        16usize,
        concat!("Size of: ", stringify!(odbpmmprp))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmmprp>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmmprp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmprp),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmprp),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmprp),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmprp),
            "::",
            stringify!(type_)
        )
    );
}
pub type ODBPMMPRP = odbpmmprp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbpmmprp {
    pub chanl: ::std::os::raw::c_long,
    pub group: ::std::os::raw::c_long,
    pub folder: [::std::os::raw::c_char; 130usize],
    pub warn: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_idbpmmprp() {
    const UNINIT: ::std::mem::MaybeUninit<idbpmmprp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbpmmprp>(),
        160usize,
        concat!("Size of: ", stringify!(idbpmmprp))
    );
    assert_eq!(
        ::std::mem::align_of::<idbpmmprp>(),
        8usize,
        concat!("Alignment of ", stringify!(idbpmmprp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chanl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpmmprp),
            "::",
            stringify!(chanl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpmmprp),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).folder) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpmmprp),
            "::",
            stringify!(folder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warn) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(idbpmmprp),
            "::",
            stringify!(warn)
        )
    );
}
pub type IDBPMMPRP = idbpmmprp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmmio {
    pub chanlnum: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbpmmio() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmmio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmmio>(),
        8usize,
        concat!("Size of: ", stringify!(odbpmmio))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmmio>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmmio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chanlnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmmio),
            "::",
            stringify!(chanlnum)
        )
    );
}
pub type ODBPMMIO = odbpmmio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrtmio {
    pub adr_type: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
    pub no: ::std::os::raw::c_ulong,
    pub bit: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbrtmio() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrtmio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrtmio>(),
        24usize,
        concat!("Size of: ", stringify!(iodbrtmio))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrtmio>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrtmio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmio),
            "::",
            stringify!(adr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmio),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmio),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmio),
            "::",
            stringify!(bit)
        )
    );
}
pub type IODBRTMIO = iodbrtmio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrtmior {
    pub adr_type: ::std::os::raw::c_short,
    pub adr_attr: ::std::os::raw::c_long,
    pub sno: ::std::os::raw::c_ulong,
    pub eno: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_iodbrtmior() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrtmior> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrtmior>(),
        32usize,
        concat!("Size of: ", stringify!(iodbrtmior))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrtmior>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrtmior))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmior),
            "::",
            stringify!(adr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmior),
            "::",
            stringify!(adr_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sno) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmior),
            "::",
            stringify!(sno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eno) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrtmior),
            "::",
            stringify!(eno)
        )
    );
}
pub type IODBRTMIOR = iodbrtmior;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbipl {
    pub outpt: ::std::os::raw::c_uchar,
    pub ipltp: ::std::os::raw::c_uchar,
    pub mv: ::std::os::raw::c_uchar,
    pub inp: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_odbipl() {
    const UNINIT: ::std::mem::MaybeUninit<odbipl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbipl>(),
        4usize,
        concat!("Size of: ", stringify!(odbipl))
    );
    assert_eq!(
        ::std::mem::align_of::<odbipl>(),
        1usize,
        concat!("Alignment of ", stringify!(odbipl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outpt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbipl),
            "::",
            stringify!(outpt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipltp) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbipl),
            "::",
            stringify!(ipltp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbipl),
            "::",
            stringify!(mv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inp) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbipl),
            "::",
            stringify!(inp)
        )
    );
}
pub type ODBIPL = odbipl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbaxis {
    pub axnum: ::std::os::raw::c_int,
    pub data: [::std::os::raw::c_long; 32usize],
    pub dp: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_iodbaxis() {
    const UNINIT: ::std::mem::MaybeUninit<iodbaxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbaxis>(),
        520usize,
        concat!("Size of: ", stringify!(iodbaxis))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbaxis>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbaxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbaxis),
            "::",
            stringify!(axnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbaxis),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dp) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbaxis),
            "::",
            stringify!(dp)
        )
    );
}
pub type IODBAXIS = iodbaxis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct realmes {
    pub mes_val: ::std::os::raw::c_long,
    pub dec_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_realmes() {
    const UNINIT: ::std::mem::MaybeUninit<realmes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<realmes>(),
        16usize,
        concat!("Size of: ", stringify!(realmes))
    );
    assert_eq!(
        ::std::mem::align_of::<realmes>(),
        8usize,
        concat!("Alignment of ", stringify!(realmes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mes_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(realmes),
            "::",
            stringify!(mes_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(realmes),
            "::",
            stringify!(dec_val)
        )
    );
}
pub type REALMES = realmes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcsvid {
    pub mt_spc: [::std::os::raw::c_char; 20usize],
    pub mt_srn: [::std::os::raw::c_char; 10usize],
    pub plc_spc: [::std::os::raw::c_char; 22usize],
    pub plc_srn: [::std::os::raw::c_char; 9usize],
    pub svm_spc: [::std::os::raw::c_char; 22usize],
    pub svm_srn: [::std::os::raw::c_char; 12usize],
    pub psm_spc: [::std::os::raw::c_char; 22usize],
    pub psm_srn: [::std::os::raw::c_char; 12usize],
}
#[test]
fn bindgen_test_layout_odbcsvid() {
    const UNINIT: ::std::mem::MaybeUninit<odbcsvid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcsvid>(),
        129usize,
        concat!("Size of: ", stringify!(odbcsvid))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcsvid>(),
        1usize,
        concat!("Alignment of ", stringify!(odbcsvid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_spc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(mt_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_srn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(mt_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plc_spc) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(plc_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plc_srn) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(plc_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svm_spc) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(svm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svm_srn) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(svm_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_spc) as usize - ptr as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(psm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_srn) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid),
            "::",
            stringify!(psm_srn)
        )
    );
}
pub type ODBCSVID = odbcsvid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcspid {
    pub mt_spc: [::std::os::raw::c_char; 20usize],
    pub mt_srn: [::std::os::raw::c_char; 10usize],
    pub sbmt_spc: [::std::os::raw::c_char; 20usize],
    pub sbmt_srn: [::std::os::raw::c_char; 10usize],
    pub spm_spc: [::std::os::raw::c_char; 22usize],
    pub spm_srn: [::std::os::raw::c_char; 12usize],
    pub psm_spc: [::std::os::raw::c_char; 22usize],
    pub psm_srn: [::std::os::raw::c_char; 12usize],
}
#[test]
fn bindgen_test_layout_odbcspid() {
    const UNINIT: ::std::mem::MaybeUninit<odbcspid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcspid>(),
        128usize,
        concat!("Size of: ", stringify!(odbcspid))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcspid>(),
        1usize,
        concat!("Alignment of ", stringify!(odbcspid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_spc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(mt_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_srn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(mt_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbmt_spc) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(sbmt_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbmt_srn) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(sbmt_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spm_spc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(spm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spm_srn) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(spm_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_spc) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(psm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_srn) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid),
            "::",
            stringify!(psm_srn)
        )
    );
}
pub type ODBCSPID = odbcspid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcsvid2 {
    pub mt_spc: [::std::os::raw::c_char; 20usize],
    pub mt_srn: [::std::os::raw::c_char; 10usize],
    pub plc_spc: [::std::os::raw::c_char; 22usize],
    pub plc_srn: [::std::os::raw::c_char; 9usize],
    pub svm_spc: [::std::os::raw::c_char; 22usize],
    pub svm_srn: [::std::os::raw::c_char; 12usize],
    pub psm_spc: [::std::os::raw::c_char; 22usize],
    pub psm_srn: [::std::os::raw::c_char; 12usize],
    pub svs_see: [::std::os::raw::c_char; 9usize],
    pub pss_see: [::std::os::raw::c_char; 9usize],
    pub pm1_spc: [::std::os::raw::c_char; 22usize],
    pub pm1_srn: [::std::os::raw::c_char; 9usize],
    pub pm2_spc: [::std::os::raw::c_char; 22usize],
    pub pm2_srn: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_odbcsvid2() {
    const UNINIT: ::std::mem::MaybeUninit<odbcsvid2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcsvid2>(),
        209usize,
        concat!("Size of: ", stringify!(odbcsvid2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcsvid2>(),
        1usize,
        concat!("Alignment of ", stringify!(odbcsvid2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_spc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(mt_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_srn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(mt_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plc_spc) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(plc_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plc_srn) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(plc_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svm_spc) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(svm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svm_srn) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(svm_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_spc) as usize - ptr as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(psm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_srn) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(psm_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svs_see) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(svs_see)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pss_see) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(pss_see)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pm1_spc) as usize - ptr as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(pm1_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pm1_srn) as usize - ptr as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(pm1_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pm2_spc) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(pm2_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pm2_srn) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcsvid2),
            "::",
            stringify!(pm2_srn)
        )
    );
}
pub type ODBCSVID2 = odbcsvid2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbcspid2 {
    pub mt_spc: [::std::os::raw::c_char; 20usize],
    pub mt_srn: [::std::os::raw::c_char; 10usize],
    pub sbmt_spc: [::std::os::raw::c_char; 20usize],
    pub sbmt_srn: [::std::os::raw::c_char; 10usize],
    pub spm_spc: [::std::os::raw::c_char; 22usize],
    pub spm_srn: [::std::os::raw::c_char; 12usize],
    pub psm_spc: [::std::os::raw::c_char; 22usize],
    pub psm_srn: [::std::os::raw::c_char; 12usize],
    pub pss_see: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_odbcspid2() {
    const UNINIT: ::std::mem::MaybeUninit<odbcspid2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbcspid2>(),
        137usize,
        concat!("Size of: ", stringify!(odbcspid2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbcspid2>(),
        1usize,
        concat!("Alignment of ", stringify!(odbcspid2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_spc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(mt_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt_srn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(mt_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbmt_spc) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(sbmt_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbmt_srn) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(sbmt_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spm_spc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(spm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spm_srn) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(spm_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_spc) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(psm_spc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psm_srn) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(psm_srn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pss_see) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(odbcspid2),
            "::",
            stringify!(pss_see)
        )
    );
}
pub type ODBCSPID2 = odbcspid2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcsmcc {
    pub time: dcsmcc__bindgen_ty_1,
    pub testno: ::std::os::raw::c_long,
    pub sign: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcsmcc__bindgen_ty_1 {
    pub hour: ::std::os::raw::c_long,
    pub minute: ::std::os::raw::c_long,
    pub second: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_dcsmcc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<dcsmcc__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcsmcc__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(dcsmcc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dcsmcc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(dcsmcc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmcc__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmcc__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmcc__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
}
#[test]
fn bindgen_test_layout_dcsmcc() {
    const UNINIT: ::std::mem::MaybeUninit<dcsmcc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcsmcc>(),
        40usize,
        concat!("Size of: ", stringify!(dcsmcc))
    );
    assert_eq!(
        ::std::mem::align_of::<dcsmcc>(),
        8usize,
        concat!("Alignment of ", stringify!(dcsmcc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmcc),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).testno) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmcc),
            "::",
            stringify!(testno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmcc),
            "::",
            stringify!(sign)
        )
    );
}
pub type DCSMCC = dcsmcc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcsmca {
    pub mgrp_no: ::std::os::raw::c_long,
    pub mcc_test_inf: *mut DCSMCC,
}
#[test]
fn bindgen_test_layout_dcsmca() {
    const UNINIT: ::std::mem::MaybeUninit<dcsmca> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcsmca>(),
        16usize,
        concat!("Size of: ", stringify!(dcsmca))
    );
    assert_eq!(
        ::std::mem::align_of::<dcsmca>(),
        8usize,
        concat!("Alignment of ", stringify!(dcsmca))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgrp_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmca),
            "::",
            stringify!(mgrp_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcc_test_inf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsmca),
            "::",
            stringify!(mcc_test_inf)
        )
    );
}
pub type DCSMCA = dcsmca;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcsfmoni {
    pub data_d: ::std::os::raw::c_long,
    pub data_p: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_dcsfmoni() {
    const UNINIT: ::std::mem::MaybeUninit<dcsfmoni> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcsfmoni>(),
        16usize,
        concat!("Size of: ", stringify!(dcsfmoni))
    );
    assert_eq!(
        ::std::mem::align_of::<dcsfmoni>(),
        8usize,
        concat!("Alignment of ", stringify!(dcsfmoni))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsfmoni),
            "::",
            stringify!(data_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcsfmoni),
            "::",
            stringify!(data_p)
        )
    );
}
pub type ODBDCSFMONI = dcsfmoni;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcscrsalm {
    pub existFlag: ::std::os::raw::c_long,
    pub pmc_no: ::std::os::raw::c_long,
    pub pmc: dcscrsalm__bindgen_ty_1,
    pub dcspmc: dcscrsalm__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcscrsalm__bindgen_ty_1 {
    pub pmc_adr: [::std::os::raw::c_char; 8usize],
    pub pmc_data: [::std::os::raw::c_long; 8usize],
    pub dcs_adr: [::std::os::raw::c_char; 8usize],
    pub dcs_data: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_dcscrsalm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<dcscrsalm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcscrsalm__bindgen_ty_1>(),
        144usize,
        concat!("Size of: ", stringify!(dcscrsalm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dcscrsalm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(dcscrsalm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_1),
            "::",
            stringify!(pmc_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_1),
            "::",
            stringify!(pmc_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_adr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_1),
            "::",
            stringify!(dcs_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_1),
            "::",
            stringify!(dcs_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcscrsalm__bindgen_ty_2 {
    pub pmc_adr: [::std::os::raw::c_char; 8usize],
    pub pmc_data: [::std::os::raw::c_long; 8usize],
    pub dcs_adr: [::std::os::raw::c_char; 8usize],
    pub dcs_data: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_dcscrsalm__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<dcscrsalm__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcscrsalm__bindgen_ty_2>(),
        144usize,
        concat!("Size of: ", stringify!(dcscrsalm__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<dcscrsalm__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(dcscrsalm__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_adr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_2),
            "::",
            stringify!(pmc_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_2),
            "::",
            stringify!(pmc_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_adr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_2),
            "::",
            stringify!(dcs_adr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcs_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm__bindgen_ty_2),
            "::",
            stringify!(dcs_data)
        )
    );
}
#[test]
fn bindgen_test_layout_dcscrsalm() {
    const UNINIT: ::std::mem::MaybeUninit<dcscrsalm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcscrsalm>(),
        304usize,
        concat!("Size of: ", stringify!(dcscrsalm))
    );
    assert_eq!(
        ::std::mem::align_of::<dcscrsalm>(),
        8usize,
        concat!("Alignment of ", stringify!(dcscrsalm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).existFlag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm),
            "::",
            stringify!(existFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm),
            "::",
            stringify!(pmc_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcspmc) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(dcscrsalm),
            "::",
            stringify!(dcspmc)
        )
    );
}
pub type DCSCRSALM = dcscrsalm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcssvspsts {
    pub name: [::std::os::raw::c_char; 4usize],
    pub dummy: ::std::os::raw::c_long,
    pub ncdata: f64,
    pub svspdata: f64,
}
#[test]
fn bindgen_test_layout_dcssvspsts() {
    const UNINIT: ::std::mem::MaybeUninit<dcssvspsts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcssvspsts>(),
        32usize,
        concat!("Size of: ", stringify!(dcssvspsts))
    );
    assert_eq!(
        ::std::mem::align_of::<dcssvspsts>(),
        8usize,
        concat!("Alignment of ", stringify!(dcssvspsts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspsts),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspsts),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncdata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspsts),
            "::",
            stringify!(ncdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svspdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspsts),
            "::",
            stringify!(svspdata)
        )
    );
}
pub type DCSSVSPSTS = dcssvspsts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcssvspst2 {
    pub limit_dt_p: f64,
    pub limit_dt_m: f64,
    pub axissts: ::std::os::raw::c_short,
    pub unittype: ::std::os::raw::c_short,
    pub axissts2: ::std::os::raw::c_char,
    pub level: ::std::os::raw::c_char,
    pub alm_lvl: ::std::os::raw::c_char,
    pub add_info: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_dcssvspst2() {
    const UNINIT: ::std::mem::MaybeUninit<dcssvspst2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dcssvspst2>(),
        24usize,
        concat!("Size of: ", stringify!(dcssvspst2))
    );
    assert_eq!(
        ::std::mem::align_of::<dcssvspst2>(),
        8usize,
        concat!("Alignment of ", stringify!(dcssvspst2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_dt_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(limit_dt_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_dt_m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(limit_dt_m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axissts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(axissts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unittype) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axissts2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(axissts2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_lvl) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(alm_lvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_info) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(dcssvspst2),
            "::",
            stringify!(add_info)
        )
    );
}
pub type DCSSVSPST2 = dcssvspst2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pmc_reg {
    pub Path: ::std::os::raw::c_uchar,
    pub Kind: ::std::os::raw::c_uchar,
    pub Address: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__pmc_reg() {
    const UNINIT: ::std::mem::MaybeUninit<_pmc_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pmc_reg>(),
        4usize,
        concat!("Size of: ", stringify!(_pmc_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<_pmc_reg>(),
        2usize,
        concat!("Alignment of ", stringify!(_pmc_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pmc_reg),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_pmc_reg),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Address) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pmc_reg),
            "::",
            stringify!(Address)
        )
    );
}
pub type PMC_REG = _pmc_reg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmprm_bus {
    pub Network: ::std::os::raw::c_short,
    pub BaudRate: ::std::os::raw::c_short,
    pub DiDataOnAbnormal: ::std::os::raw::c_short,
    pub OwnMacId: ::std::os::raw::c_short,
    pub CommonStatus: PMC_REG,
    pub CommonStatusSize: ::std::os::raw::c_short,
    pub CycleTimeSetting: ::std::os::raw::c_short,
    pub CycleTimeCurrent: ::std::os::raw::c_short,
    pub CycleTimeMaximum: ::std::os::raw::c_short,
    pub CycleTimeMinimum: ::std::os::raw::c_short,
    pub RefreshTime: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_dnmprm_bus() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm_bus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm_bus>(),
        24usize,
        concat!("Size of: ", stringify!(_out_dnmprm_bus))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm_bus>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm_bus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(CommonStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatusSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(CommonStatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeSetting) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(CycleTimeSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeCurrent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(CycleTimeCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeMaximum) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(CycleTimeMaximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeMinimum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(CycleTimeMinimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefreshTime) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus),
            "::",
            stringify!(RefreshTime)
        )
    );
}
pub type OUT_DNMPRM_BUS = _out_dnmprm_bus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmprm_each_node {
    pub NodeNumber: ::std::os::raw::c_short,
    pub Communication: ::std::os::raw::c_short,
    pub reserved1: [::std::os::raw::c_short; 6usize],
    pub DetailStatus: PMC_REG,
    pub reserved2: [::std::os::raw::c_short; 2usize],
    pub Di: PMC_REG,
    pub DiSize: ::std::os::raw::c_short,
    pub reserved3: ::std::os::raw::c_short,
    pub Do: PMC_REG,
    pub DoSize: ::std::os::raw::c_short,
    pub reserved4: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__out_dnmprm_each_node() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm_each_node> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm_each_node>(),
        40usize,
        concat!("Size of: ", stringify!(_out_dnmprm_each_node))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm_each_node>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm_each_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodeNumber) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(NodeNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Communication) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(Communication)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DetailStatus) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(DetailStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Di) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(Di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(DiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Do) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(Do)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(DoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_each_node),
            "::",
            stringify!(reserved4)
        )
    );
}
pub type OUT_DNMPRM_SLAVE = _out_dnmprm_each_node;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _out_dnmprm {
    pub prm: _out_dnmprm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _out_dnmprm__bindgen_ty_1 {
    pub bus: OUT_DNMPRM_BUS,
    pub slave: OUT_DNMPRM_SLAVE,
}
#[test]
fn bindgen_test_layout__out_dnmprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(_out_dnmprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm__bindgen_ty_1),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout__out_dnmprm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm>(),
        40usize,
        concat!("Size of: ", stringify!(_out_dnmprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm),
            "::",
            stringify!(prm)
        )
    );
}
pub type OUT_DNMPRM = _out_dnmprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmprm_bus2 {
    pub Network: ::std::os::raw::c_short,
    pub BaudRate: ::std::os::raw::c_short,
    pub DiDataOnAbnormal: ::std::os::raw::c_short,
    pub OwnMacId: ::std::os::raw::c_short,
    pub CommonStatus: PMC_REG,
    pub CommonStatusSize: ::std::os::raw::c_short,
    pub CycleTimeSetting: ::std::os::raw::c_short,
    pub CycleTimeCurrent: ::std::os::raw::c_short,
    pub CycleTimeMaximum: ::std::os::raw::c_short,
    pub CycleTimeMinimum: ::std::os::raw::c_short,
    pub RefreshTime: ::std::os::raw::c_ushort,
    pub Option: ::std::os::raw::c_ushort,
    pub reserved: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__out_dnmprm_bus2() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm_bus2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm_bus2>(),
        28usize,
        concat!("Size of: ", stringify!(_out_dnmprm_bus2))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm_bus2>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm_bus2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(CommonStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatusSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(CommonStatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeSetting) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(CycleTimeSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeCurrent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(CycleTimeCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeMaximum) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(CycleTimeMaximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeMinimum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(CycleTimeMinimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefreshTime) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(RefreshTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(Option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm_bus2),
            "::",
            stringify!(reserved)
        )
    );
}
pub type OUT_DNMPRM_BUS2 = _out_dnmprm_bus2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _out_dnmprm2 {
    pub prm: _out_dnmprm2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _out_dnmprm2__bindgen_ty_1 {
    pub bus: OUT_DNMPRM_BUS2,
    pub slave: OUT_DNMPRM_SLAVE,
}
#[test]
fn bindgen_test_layout__out_dnmprm2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm2__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(_out_dnmprm2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm2__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm2__bindgen_ty_1),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout__out_dnmprm2() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmprm2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmprm2>(),
        40usize,
        concat!("Size of: ", stringify!(_out_dnmprm2))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmprm2>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmprm2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmprm2),
            "::",
            stringify!(prm)
        )
    );
}
pub type OUT_DNMPRM2 = _out_dnmprm2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnmprmflag_bus {
    pub Network: ::std::os::raw::c_char,
    pub BaudRate: ::std::os::raw::c_char,
    pub DiDataOnAbnormal: ::std::os::raw::c_char,
    pub OwnMacId: ::std::os::raw::c_char,
    pub CommonStatus: ::std::os::raw::c_char,
    pub CommonStatusSize: ::std::os::raw::c_char,
    pub CycleTimeSetting: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout__in_dnmprmflag_bus() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag_bus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag_bus>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag_bus))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag_bus>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag_bus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(CommonStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatusSize) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(CommonStatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeSetting) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(CycleTimeSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus),
            "::",
            stringify!(reserved)
        )
    );
}
pub type IN_DNMPRMFLAG_BUS = _in_dnmprmflag_bus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnmprmflag_each_node {
    pub Communication: ::std::os::raw::c_char,
    pub DetailStatus: ::std::os::raw::c_char,
    pub Di: ::std::os::raw::c_char,
    pub DiSize: ::std::os::raw::c_char,
    pub Do: ::std::os::raw::c_char,
    pub DoSize: ::std::os::raw::c_char,
    pub reserved: [::std::os::raw::c_char; 10usize],
}
#[test]
fn bindgen_test_layout__in_dnmprmflag_each_node() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag_each_node> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag_each_node>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag_each_node))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag_each_node>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag_each_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Communication) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(Communication)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DetailStatus) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(DetailStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Di) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(Di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiSize) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(DiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Do) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(Do)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSize) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(DoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_each_node),
            "::",
            stringify!(reserved)
        )
    );
}
pub type IN_DNMPRMFLAG_SLAVE = _in_dnmprmflag_each_node;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_dnmprmflag {
    pub flg: _in_dnmprmflag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _in_dnmprmflag__bindgen_ty_1 {
    pub bus: IN_DNMPRMFLAG_BUS,
    pub slave: IN_DNMPRMFLAG_SLAVE,
}
#[test]
fn bindgen_test_layout__in_dnmprmflag__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag__bindgen_ty_1),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout__in_dnmprmflag() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag),
            "::",
            stringify!(flg)
        )
    );
}
pub type IN_DNMPRMFLAG = _in_dnmprmflag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnmprmflag_bus2 {
    pub Network: ::std::os::raw::c_char,
    pub BaudRate: ::std::os::raw::c_char,
    pub DiDataOnAbnormal: ::std::os::raw::c_char,
    pub OwnMacId: ::std::os::raw::c_char,
    pub CommonStatus: ::std::os::raw::c_char,
    pub CommonStatusSize: ::std::os::raw::c_char,
    pub CycleTimeSetting: ::std::os::raw::c_char,
    pub reserved1: [::std::os::raw::c_char; 4usize],
    pub Option: ::std::os::raw::c_char,
    pub reserved2: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__in_dnmprmflag_bus2() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag_bus2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag_bus2>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag_bus2))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag_bus2>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag_bus2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(CommonStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatusSize) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(CommonStatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeSetting) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(CycleTimeSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(Option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag_bus2),
            "::",
            stringify!(reserved2)
        )
    );
}
pub type IN_DNMPRMFLAG_BUS2 = _in_dnmprmflag_bus2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_dnmprmflag2 {
    pub flg: _in_dnmprmflag2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _in_dnmprmflag2__bindgen_ty_1 {
    pub bus: IN_DNMPRMFLAG_BUS2,
    pub slave: IN_DNMPRMFLAG_SLAVE,
}
#[test]
fn bindgen_test_layout__in_dnmprmflag2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag2__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag2__bindgen_ty_1),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout__in_dnmprmflag2() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprmflag2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprmflag2>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnmprmflag2))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprmflag2>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnmprmflag2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprmflag2),
            "::",
            stringify!(flg)
        )
    );
}
pub type IN_DNMPRMFLAG2 = _in_dnmprmflag2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnmprm_bus {
    pub Network: ::std::os::raw::c_short,
    pub BaudRate: ::std::os::raw::c_short,
    pub DiDataOnAbnormal: ::std::os::raw::c_short,
    pub OwnMacId: ::std::os::raw::c_short,
    pub CommonStatus: PMC_REG,
    pub CommonStatusSize: ::std::os::raw::c_short,
    pub CycleTimeSetting: ::std::os::raw::c_short,
    pub reserved: [::std::os::raw::c_short; 8usize],
}
#[test]
fn bindgen_test_layout__in_dnmprm_bus() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm_bus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm_bus>(),
        32usize,
        concat!("Size of: ", stringify!(_in_dnmprm_bus))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm_bus>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm_bus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(CommonStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatusSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(CommonStatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeSetting) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(CycleTimeSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus),
            "::",
            stringify!(reserved)
        )
    );
}
pub type IN_DNMPRM_BUS = _in_dnmprm_bus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnmprm_each_node {
    pub reserved1: ::std::os::raw::c_short,
    pub Communication: ::std::os::raw::c_short,
    pub reserved2: [::std::os::raw::c_short; 6usize],
    pub DetailStatus: PMC_REG,
    pub reserved3: [::std::os::raw::c_short; 2usize],
    pub Di: PMC_REG,
    pub DiSize: ::std::os::raw::c_short,
    pub reserved4: ::std::os::raw::c_short,
    pub Do: PMC_REG,
    pub DoSize: ::std::os::raw::c_short,
    pub reserved5: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__in_dnmprm_each_node() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm_each_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm_each_node>(),
        40usize,
        concat!("Size of: ", stringify!(_in_dnmprm_each_node))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm_each_node>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm_each_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Communication) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(Communication)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DetailStatus) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(DetailStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Di) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(Di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(DiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Do) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(Do)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(DoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved5) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_each_node),
            "::",
            stringify!(reserved5)
        )
    );
}
pub type IN_DNMPRM_SLAVE = _in_dnmprm_each_node;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_dnmprm {
    pub prm: _in_dnmprm__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _in_dnmprm__bindgen_ty_1 {
    pub bus: IN_DNMPRM_BUS,
    pub slave: IN_DNMPRM_SLAVE,
}
#[test]
fn bindgen_test_layout__in_dnmprm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(_in_dnmprm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm__bindgen_ty_1),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout__in_dnmprm() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm>(),
        40usize,
        concat!("Size of: ", stringify!(_in_dnmprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_DNMPRM = _in_dnmprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnmprm_bus2 {
    pub Network: ::std::os::raw::c_short,
    pub BaudRate: ::std::os::raw::c_short,
    pub DiDataOnAbnormal: ::std::os::raw::c_short,
    pub OwnMacId: ::std::os::raw::c_short,
    pub CommonStatus: PMC_REG,
    pub CommonStatusSize: ::std::os::raw::c_short,
    pub CycleTimeSetting: ::std::os::raw::c_short,
    pub reserved1: [::std::os::raw::c_short; 4usize],
    pub Option: ::std::os::raw::c_ushort,
    pub reserved2: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout__in_dnmprm_bus2() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm_bus2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm_bus2>(),
        32usize,
        concat!("Size of: ", stringify!(_in_dnmprm_bus2))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm_bus2>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm_bus2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(Network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(CommonStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommonStatusSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(CommonStatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycleTimeSetting) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(CycleTimeSetting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(Option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm_bus2),
            "::",
            stringify!(reserved2)
        )
    );
}
pub type IN_DNMPRM_BUS2 = _in_dnmprm_bus2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _in_dnmprm2 {
    pub prm: _in_dnmprm2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _in_dnmprm2__bindgen_ty_1 {
    pub bus: IN_DNMPRM_BUS2,
    pub slave: IN_DNMPRM_SLAVE,
}
#[test]
fn bindgen_test_layout__in_dnmprm2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm2__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(_in_dnmprm2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm2__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slave) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm2__bindgen_ty_1),
            "::",
            stringify!(slave)
        )
    );
}
#[test]
fn bindgen_test_layout__in_dnmprm2() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnmprm2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnmprm2>(),
        40usize,
        concat!("Size of: ", stringify!(_in_dnmprm2))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnmprm2>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnmprm2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnmprm2),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_DNMPRM2 = _in_dnmprm2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmnode {
    pub node: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__out_dnmnode() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmnode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmnode>(),
        64usize,
        concat!("Size of: ", stringify!(_out_dnmnode))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmnode>(),
        1usize,
        concat!("Alignment of ", stringify!(_out_dnmnode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnode),
            "::",
            stringify!(node)
        )
    );
}
pub type OUT_DNMNODE = _out_dnmnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmnodeinfo {
    pub MacId: ::std::os::raw::c_short,
    pub State: ::std::os::raw::c_short,
    pub RetryCounter: ::std::os::raw::c_short,
    pub VenderId: ::std::os::raw::c_ushort,
    pub DeviceType: ::std::os::raw::c_ushort,
    pub ProductCode: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_dnmnodeinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmnodeinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmnodeinfo>(),
        12usize,
        concat!("Size of: ", stringify!(_out_dnmnodeinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmnodeinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmnodeinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MacId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnodeinfo),
            "::",
            stringify!(MacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnodeinfo),
            "::",
            stringify!(State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetryCounter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnodeinfo),
            "::",
            stringify!(RetryCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VenderId) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnodeinfo),
            "::",
            stringify!(VenderId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnodeinfo),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmnodeinfo),
            "::",
            stringify!(ProductCode)
        )
    );
}
pub type OUT_DNMNODEINFO = _out_dnmnodeinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmfirm {
    pub MpuStatus1: ::std::os::raw::c_ushort,
    pub MpuStatus2: ::std::os::raw::c_ushort,
    pub MasterStatus1: ::std::os::raw::c_ushort,
    pub CanRecvCounter: ::std::os::raw::c_ushort,
    pub CanSendCounter: ::std::os::raw::c_ushort,
    pub CanRecvErrorCounter: ::std::os::raw::c_ushort,
    pub CanSendErrorCounter: ::std::os::raw::c_ushort,
    pub FirmwareVersion: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_dnmfirm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmfirm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmfirm>(),
        16usize,
        concat!("Size of: ", stringify!(_out_dnmfirm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmfirm>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmfirm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuStatus1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(MpuStatus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuStatus2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(MpuStatus2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MasterStatus1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(MasterStatus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CanRecvCounter) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(CanRecvCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CanSendCounter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(CanSendCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CanRecvErrorCounter) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(CanRecvErrorCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CanSendErrorCounter) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(CanSendErrorCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FirmwareVersion) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmfirm),
            "::",
            stringify!(FirmwareVersion)
        )
    );
}
pub type OUT_DNMFIRM = _out_dnmfirm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmerr_record {
    pub AbnormalCode: ::std::os::raw::c_ushort,
    pub DetailCode: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_dnmerr_record() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmerr_record> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmerr_record>(),
        4usize,
        concat!("Size of: ", stringify!(_out_dnmerr_record))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmerr_record>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmerr_record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbnormalCode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmerr_record),
            "::",
            stringify!(AbnormalCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DetailCode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmerr_record),
            "::",
            stringify!(DetailCode)
        )
    );
}
pub type OUT_DNMERR_RECORD = _out_dnmerr_record;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmerr {
    pub record: [OUT_DNMERR_RECORD; 8usize],
}
#[test]
fn bindgen_test_layout__out_dnmerr() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmerr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmerr>(),
        32usize,
        concat!("Size of: ", stringify!(_out_dnmerr))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmerr>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmerr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmerr),
            "::",
            stringify!(record)
        )
    );
}
pub type OUT_DNMERR = _out_dnmerr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmhist_log {
    pub Type: ::std::os::raw::c_uchar,
    pub reserved: ::std::os::raw::c_uchar,
    pub Mpu1: ::std::os::raw::c_ushort,
    pub Mpu2: ::std::os::raw::c_ushort,
    pub Sts1: ::std::os::raw::c_ushort,
    pub Slave: [::std::os::raw::c_uchar; 8usize],
    pub Date: ::std::os::raw::c_uchar,
    pub Hour: ::std::os::raw::c_uchar,
    pub Minute: ::std::os::raw::c_uchar,
    pub Second: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__out_dnmhist_log() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmhist_log> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmhist_log>(),
        20usize,
        concat!("Size of: ", stringify!(_out_dnmhist_log))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmhist_log>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmhist_log))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mpu1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Mpu1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mpu2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Mpu2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Sts1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Sts1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Slave) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Slave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hour) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Minute) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Second) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist_log),
            "::",
            stringify!(Second)
        )
    );
}
pub type OUT_DNMHIST_LOG = _out_dnmhist_log;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnmhist {
    pub Count: ::std::os::raw::c_ushort,
    pub reserved: ::std::os::raw::c_ushort,
    pub Log: [OUT_DNMHIST_LOG; 32usize],
}
#[test]
fn bindgen_test_layout__out_dnmhist() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnmhist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnmhist>(),
        644usize,
        concat!("Size of: ", stringify!(_out_dnmhist))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnmhist>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnmhist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Log) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnmhist),
            "::",
            stringify!(Log)
        )
    );
}
pub type OUT_DNMHIST = _out_dnmhist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnsprm {
    pub BaudRate: ::std::os::raw::c_short,
    pub DiDataOnAbnormal: ::std::os::raw::c_short,
    pub OwnMacId: ::std::os::raw::c_short,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub Di: PMC_REG,
    pub DiSize: ::std::os::raw::c_short,
    pub pad2: [::std::os::raw::c_char; 2usize],
    pub Do: PMC_REG,
    pub DoSize: ::std::os::raw::c_short,
    pub pad3: [::std::os::raw::c_char; 2usize],
    pub Status: PMC_REG,
    pub StatusSize: ::std::os::raw::c_short,
    pub pad4: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_dnsprm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnsprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnsprm>(),
        32usize,
        concat!("Size of: ", stringify!(_out_dnsprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnsprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnsprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Di) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(Di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(DiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Do) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(Do)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(DoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(StatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad4) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsprm),
            "::",
            stringify!(pad4)
        )
    );
}
pub type OUT_DNSPRM = _out_dnsprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnsprmflag {
    pub BaudRate: ::std::os::raw::c_char,
    pub DiDataOnAbnormal: ::std::os::raw::c_char,
    pub OwnMacId: ::std::os::raw::c_char,
    pub Di: ::std::os::raw::c_char,
    pub DiSize: ::std::os::raw::c_char,
    pub Do: ::std::os::raw::c_char,
    pub DoSize: ::std::os::raw::c_char,
    pub Status: ::std::os::raw::c_char,
    pub StatusSize: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 7usize],
}
#[test]
fn bindgen_test_layout__in_dnsprmflag() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnsprmflag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnsprmflag>(),
        16usize,
        concat!("Size of: ", stringify!(_in_dnsprmflag))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnsprmflag>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_dnsprmflag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Di) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(Di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(DiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Do) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(Do)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSize) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(DoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(StatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprmflag),
            "::",
            stringify!(pad)
        )
    );
}
pub type IN_DNSPRMFLAG = _in_dnsprmflag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_dnsprm {
    pub BaudRate: ::std::os::raw::c_short,
    pub DiDataOnAbnormal: ::std::os::raw::c_short,
    pub OwnMacId: ::std::os::raw::c_short,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub Di: PMC_REG,
    pub DiSize: ::std::os::raw::c_short,
    pub pad2: [::std::os::raw::c_char; 2usize],
    pub Do: PMC_REG,
    pub DoSize: ::std::os::raw::c_short,
    pub pad3: [::std::os::raw::c_char; 2usize],
    pub Status: PMC_REG,
    pub StatusSize: ::std::os::raw::c_short,
    pub pad4: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__in_dnsprm() {
    const UNINIT: ::std::mem::MaybeUninit<_in_dnsprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_dnsprm>(),
        32usize,
        concat!("Size of: ", stringify!(_in_dnsprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_dnsprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_dnsprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(OwnMacId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Di) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(Di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(DiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Do) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(Do)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(DoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(StatusSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad4) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_dnsprm),
            "::",
            stringify!(pad4)
        )
    );
}
pub type IN_DNSPRM = _in_dnsprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dnsidentityinfo {
    pub VenderID: ::std::os::raw::c_ushort,
    pub DeviceType: ::std::os::raw::c_ushort,
    pub ProductCode: ::std::os::raw::c_ushort,
    pub MajorRev: ::std::os::raw::c_uchar,
    pub MinorRev: ::std::os::raw::c_uchar,
    pub SerialNo: ::std::os::raw::c_ulong,
    pub ProductName: [::std::os::raw::c_char; 32usize],
    pub pad: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__dnsidentityinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_dnsidentityinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dnsidentityinfo>(),
        56usize,
        concat!("Size of: ", stringify!(_dnsidentityinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_dnsidentityinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_dnsidentityinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VenderID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(VenderID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceType) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(DeviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(ProductCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorRev) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(MajorRev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorRev) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(MinorRev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SerialNo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(SerialNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(ProductName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsidentityinfo),
            "::",
            stringify!(pad)
        )
    );
}
pub type DNS_IDENTITY_INFO = _dnsidentityinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dnsstatusinfo {
    pub Status: ::std::os::raw::c_uchar,
    pub MpuStatus: ::std::os::raw::c_uchar,
    pub MpuState: ::std::os::raw::c_uchar,
    pub MpuAlarmCode: ::std::os::raw::c_uchar,
    pub MpuVerInfo: ::std::os::raw::c_uchar,
    pub pad: [::std::os::raw::c_uchar; 3usize],
}
#[test]
fn bindgen_test_layout__dnsstatusinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_dnsstatusinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dnsstatusinfo>(),
        8usize,
        concat!("Size of: ", stringify!(_dnsstatusinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_dnsstatusinfo>(),
        1usize,
        concat!("Alignment of ", stringify!(_dnsstatusinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsstatusinfo),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuStatus) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsstatusinfo),
            "::",
            stringify!(MpuStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuState) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsstatusinfo),
            "::",
            stringify!(MpuState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuAlarmCode) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsstatusinfo),
            "::",
            stringify!(MpuAlarmCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuVerInfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsstatusinfo),
            "::",
            stringify!(MpuVerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnsstatusinfo),
            "::",
            stringify!(pad)
        )
    );
}
pub type DNS_STATUS_INFO = _dnsstatusinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnsmonitor {
    pub IdentityInfo: DNS_IDENTITY_INFO,
    pub StatusInfo: DNS_STATUS_INFO,
}
#[test]
fn bindgen_test_layout__out_dnsmonitor() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnsmonitor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnsmonitor>(),
        64usize,
        concat!("Size of: ", stringify!(_out_dnsmonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnsmonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_dnsmonitor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IdentityInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsmonitor),
            "::",
            stringify!(IdentityInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusInfo) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnsmonitor),
            "::",
            stringify!(StatusInfo)
        )
    );
}
pub type OUT_DNSINFO = _out_dnsmonitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnshist_log {
    pub Type: ::std::os::raw::c_uchar,
    pub Status: ::std::os::raw::c_uchar,
    pub MpuStatus: ::std::os::raw::c_uchar,
    pub MpuFsm: ::std::os::raw::c_uchar,
    pub MpuAlarm: ::std::os::raw::c_uchar,
    pub Date: ::std::os::raw::c_uchar,
    pub Hour: ::std::os::raw::c_uchar,
    pub Minute: ::std::os::raw::c_uchar,
    pub Second: ::std::os::raw::c_uchar,
    pub reserved: [::std::os::raw::c_uchar; 3usize],
}
#[test]
fn bindgen_test_layout__out_dnshist_log() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnshist_log> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnshist_log>(),
        12usize,
        concat!("Size of: ", stringify!(_out_dnshist_log))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnshist_log>(),
        1usize,
        concat!("Alignment of ", stringify!(_out_dnshist_log))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuStatus) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(MpuStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuFsm) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(MpuFsm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MpuAlarm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(MpuAlarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Minute) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Second) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(Second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist_log),
            "::",
            stringify!(reserved)
        )
    );
}
pub type OUT_DNSHIST_LOG = _out_dnshist_log;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_dnshist {
    pub Count: ::std::os::raw::c_ushort,
    pub reserved: ::std::os::raw::c_ushort,
    pub Log: [OUT_DNSHIST_LOG; 32usize],
}
#[test]
fn bindgen_test_layout__out_dnshist() {
    const UNINIT: ::std::mem::MaybeUninit<_out_dnshist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_dnshist>(),
        388usize,
        concat!("Size of: ", stringify!(_out_dnshist))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_dnshist>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_dnshist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Log) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_dnshist),
            "::",
            stringify!(Log)
        )
    );
}
pub type OUT_DNSHIST = _out_dnshist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntprm {
    pub OwnMacAddress: [::std::os::raw::c_char; 16usize],
    pub OwnIpAddress: [::std::os::raw::c_char; 40usize],
    pub NodeName: [::std::os::raw::c_char; 12usize],
    pub Area1CmnMemAddr: ::std::os::raw::c_short,
    pub Area1CmnMemSize: ::std::os::raw::c_short,
    pub Area2CmnMemAddr: ::std::os::raw::c_short,
    pub Area2CmnMemSize: ::std::os::raw::c_short,
    pub TokenWatch: ::std::os::raw::c_uchar,
    pub MinFrame: ::std::os::raw::c_char,
    pub Reserved0: [::std::os::raw::c_char; 2usize],
    pub OwnStatus: PMC_REG,
    pub EntryNode: PMC_REG,
    pub Area1PmcAddr: PMC_REG,
    pub Area1ExchgAddr: ::std::os::raw::c_short,
    pub Area1ExchgSize: ::std::os::raw::c_short,
    pub Area2PmcAddr: PMC_REG,
    pub Area2ExchgAddr: ::std::os::raw::c_short,
    pub Area2ExchgSize: ::std::os::raw::c_short,
    pub Area2PmcDoAddr: PMC_REG,
    pub Area2ExchgDoSize: ::std::os::raw::c_short,
    pub Reserved1: [::std::os::raw::c_char; 2usize],
    pub Area2PmcDiAddr: PMC_REG,
    pub Area2ConditionAddr: PMC_REG,
    pub Area2AlterAddr: PMC_REG,
    pub Area2ExchgDiAddr: ::std::os::raw::c_short,
    pub Area2ExchgDiSize: ::std::os::raw::c_short,
    pub ClientMsgAddr: PMC_REG,
    pub ClientMsgSize: ::std::os::raw::c_short,
    pub Reserved2: [::std::os::raw::c_char; 2usize],
    pub ServerMsgAddr: PMC_REG,
    pub ServerMsgSize: ::std::os::raw::c_short,
    pub Reserved3: [::std::os::raw::c_char; 2usize],
    pub Option1: ::std::os::raw::c_ushort,
    pub Option2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_flntprm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntprm>(),
        148usize,
        concat!("Size of: ", stringify!(_out_flntprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_flntprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(OwnMacAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodeName) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(NodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1CmnMemAddr) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area1CmnMemAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1CmnMemSize) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area1CmnMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2CmnMemAddr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2CmnMemAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2CmnMemSize) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2CmnMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TokenWatch) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(TokenWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinFrame) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(MinFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved0) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnStatus) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(OwnStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EntryNode) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(EntryNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1PmcAddr) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area1PmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1ExchgAddr) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area1ExchgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1ExchgSize) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area1ExchgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcAddr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2PmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgAddr) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2ExchgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgSize) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2ExchgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcDoAddr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2PmcDoAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDoSize) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2ExchgDoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcDiAddr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2PmcDiAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ConditionAddr) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2ConditionAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2AlterAddr) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2AlterAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDiAddr) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2ExchgDiAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDiSize) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Area2ExchgDiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClientMsgAddr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(ClientMsgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClientMsgSize) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(ClientMsgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ServerMsgAddr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(ServerMsgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ServerMsgSize) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(ServerMsgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntprm),
            "::",
            stringify!(Option2)
        )
    );
}
pub type OUT_FLNTPRM = _out_flntprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_flntprmflag {
    pub OwnIpAddress: ::std::os::raw::c_char,
    pub NodeName: ::std::os::raw::c_char,
    pub Area1CmnMemAddr: ::std::os::raw::c_char,
    pub Area1CmnMemSize: ::std::os::raw::c_char,
    pub Area2CmnMemAddr: ::std::os::raw::c_char,
    pub Area2CmnMemSize: ::std::os::raw::c_char,
    pub TokenWatch: ::std::os::raw::c_char,
    pub MinFrame: ::std::os::raw::c_char,
    pub OwnStatus: ::std::os::raw::c_char,
    pub EntryNode: ::std::os::raw::c_char,
    pub Area1PmcAddr: ::std::os::raw::c_char,
    pub Area1ExchgAddr: ::std::os::raw::c_char,
    pub Area1ExchgSize: ::std::os::raw::c_char,
    pub Area2PmcAddr: ::std::os::raw::c_char,
    pub Area2ExchgAddr: ::std::os::raw::c_char,
    pub Area2ExchgSize: ::std::os::raw::c_char,
    pub Area2PmcDoAddr: ::std::os::raw::c_char,
    pub Area2ExchgDoSize: ::std::os::raw::c_char,
    pub Area2PmcDiAddr: ::std::os::raw::c_char,
    pub Area2ConditionAddr: ::std::os::raw::c_char,
    pub Area2AlterAddr: ::std::os::raw::c_char,
    pub Area2ExchgDiAddr: ::std::os::raw::c_char,
    pub Area2ExchgDiSize: ::std::os::raw::c_char,
    pub ClientMsgAddr: ::std::os::raw::c_char,
    pub ClientMsgSize: ::std::os::raw::c_char,
    pub ServerMsgAddr: ::std::os::raw::c_char,
    pub ServerMsgSize: ::std::os::raw::c_char,
    pub Option1: ::std::os::raw::c_char,
    pub Option2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__in_flntprmflag() {
    const UNINIT: ::std::mem::MaybeUninit<_in_flntprmflag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_flntprmflag>(),
        29usize,
        concat!("Size of: ", stringify!(_in_flntprmflag))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_flntprmflag>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_flntprmflag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodeName) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(NodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1CmnMemAddr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area1CmnMemAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1CmnMemSize) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area1CmnMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2CmnMemAddr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2CmnMemAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2CmnMemSize) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2CmnMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TokenWatch) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(TokenWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinFrame) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(MinFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(OwnStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EntryNode) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(EntryNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1PmcAddr) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area1PmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1ExchgAddr) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area1ExchgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1ExchgSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area1ExchgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcAddr) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2PmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgAddr) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2ExchgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgSize) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2ExchgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcDoAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2PmcDoAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDoSize) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2ExchgDoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcDiAddr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2PmcDiAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ConditionAddr) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2ConditionAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2AlterAddr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2AlterAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDiAddr) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2ExchgDiAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDiSize) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Area2ExchgDiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClientMsgAddr) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(ClientMsgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClientMsgSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(ClientMsgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ServerMsgAddr) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(ServerMsgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ServerMsgSize) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(ServerMsgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprmflag),
            "::",
            stringify!(Option2)
        )
    );
}
pub type IN_FLNTPRMFLG = _in_flntprmflag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_flntprm {
    pub OwnIpAddress: [::std::os::raw::c_char; 40usize],
    pub NodeName: [::std::os::raw::c_char; 12usize],
    pub Area1CmnMemAddr: ::std::os::raw::c_short,
    pub Area1CmnMemSize: ::std::os::raw::c_short,
    pub Area2CmnMemAddr: ::std::os::raw::c_short,
    pub Area2CmnMemSize: ::std::os::raw::c_short,
    pub TokenWatch: ::std::os::raw::c_uchar,
    pub MinFrame: ::std::os::raw::c_char,
    pub Reserved0: [::std::os::raw::c_char; 2usize],
    pub OwnStatus: PMC_REG,
    pub EntryNode: PMC_REG,
    pub Area1PmcAddr: PMC_REG,
    pub Area1ExchgAddr: ::std::os::raw::c_short,
    pub Area1ExchgSize: ::std::os::raw::c_short,
    pub Area2PmcAddr: PMC_REG,
    pub Area2ExchgAddr: ::std::os::raw::c_short,
    pub Area2ExchgSize: ::std::os::raw::c_short,
    pub Area2PmcDoAddr: PMC_REG,
    pub Area2ExchgDoSize: ::std::os::raw::c_short,
    pub Reserved1: [::std::os::raw::c_char; 2usize],
    pub Area2PmcDiAddr: PMC_REG,
    pub Area2ConditionAddr: PMC_REG,
    pub Area2AlterAddr: PMC_REG,
    pub Area2ExchgDiAddr: ::std::os::raw::c_short,
    pub Area2ExchgDiSize: ::std::os::raw::c_short,
    pub ClientMsgAddr: PMC_REG,
    pub ClientMsgSize: ::std::os::raw::c_short,
    pub Reserved2: [::std::os::raw::c_char; 2usize],
    pub ServerMsgAddr: PMC_REG,
    pub ServerMsgSize: ::std::os::raw::c_short,
    pub Reserved3: [::std::os::raw::c_char; 2usize],
    pub Option1: ::std::os::raw::c_ushort,
    pub Option2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__in_flntprm() {
    const UNINIT: ::std::mem::MaybeUninit<_in_flntprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_flntprm>(),
        132usize,
        concat!("Size of: ", stringify!(_in_flntprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_flntprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_flntprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodeName) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(NodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1CmnMemAddr) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area1CmnMemAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1CmnMemSize) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area1CmnMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2CmnMemAddr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2CmnMemAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2CmnMemSize) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2CmnMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TokenWatch) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(TokenWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinFrame) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(MinFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved0) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnStatus) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(OwnStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EntryNode) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(EntryNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1PmcAddr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area1PmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1ExchgAddr) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area1ExchgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1ExchgSize) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area1ExchgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcAddr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2PmcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgAddr) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2ExchgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgSize) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2ExchgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcDoAddr) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2PmcDoAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDoSize) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2ExchgDoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2PmcDiAddr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2PmcDiAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ConditionAddr) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2ConditionAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2AlterAddr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2AlterAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDiAddr) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2ExchgDiAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2ExchgDiSize) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Area2ExchgDiSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClientMsgAddr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(ClientMsgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClientMsgSize) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(ClientMsgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ServerMsgAddr) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(ServerMsgAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ServerMsgSize) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(ServerMsgSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Option1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Option2) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_flntprm),
            "::",
            stringify!(Option2)
        )
    );
}
pub type IN_FLNTPRM = _in_flntprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntentry {
    pub Node: ::std::os::raw::c_uchar,
    pub Reserved: [::std::os::raw::c_char; 3usize],
    pub EntryNode: [::std::os::raw::c_ulong; 8usize],
}
#[test]
fn bindgen_test_layout__out_flntentry() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntentry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntentry>(),
        72usize,
        concat!("Size of: ", stringify!(_out_flntentry))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntentry>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_flntentry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntentry),
            "::",
            stringify!(Node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntentry),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EntryNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntentry),
            "::",
            stringify!(EntryNode)
        )
    );
}
pub type OUT_FLNTENTRY = _out_flntentry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntnodetbl {
    pub NodeName: [::std::os::raw::c_char; 12usize],
    pub VendorName: [::std::os::raw::c_char; 12usize],
    pub MakerType: [::std::os::raw::c_char; 12usize],
    pub Area1Address: ::std::os::raw::c_short,
    pub Area1Size: ::std::os::raw::c_short,
    pub Area2Address: ::std::os::raw::c_short,
    pub Area2Size: ::std::os::raw::c_short,
    pub Rct: ::std::os::raw::c_ushort,
    pub Uls: ::std::os::raw::c_ushort,
    pub TokenWatch: ::std::os::raw::c_uchar,
    pub MinFrame: ::std::os::raw::c_uchar,
    pub Lks: ::std::os::raw::c_uchar,
    pub Status: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__out_flntnodetbl() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntnodetbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntnodetbl>(),
        52usize,
        concat!("Size of: ", stringify!(_out_flntnodetbl))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntnodetbl>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_flntnodetbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodeName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(NodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorName) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(VendorName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MakerType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(MakerType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1Address) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Area1Address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area1Size) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Area1Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2Address) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Area2Address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Area2Size) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Area2Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rct) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Rct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Uls) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Uls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TokenWatch) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(TokenWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinFrame) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(MinFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lks) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Lks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnodetbl),
            "::",
            stringify!(Status)
        )
    );
}
pub type OUT_FLNTNODETBL = _out_flntnodetbl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntnettbl {
    pub TokenNode: ::std::os::raw::c_uchar,
    pub MinFrame: ::std::os::raw::c_uchar,
    pub Rct: ::std::os::raw::c_ushort,
    pub Rcm: ::std::os::raw::c_ushort,
    pub MaxRcm: ::std::os::raw::c_ushort,
    pub MinRcm: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_flntnettbl() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntnettbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntnettbl>(),
        10usize,
        concat!("Size of: ", stringify!(_out_flntnettbl))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntnettbl>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_flntnettbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TokenNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnettbl),
            "::",
            stringify!(TokenNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinFrame) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnettbl),
            "::",
            stringify!(MinFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rct) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnettbl),
            "::",
            stringify!(Rct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rcm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnettbl),
            "::",
            stringify!(Rcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxRcm) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnettbl),
            "::",
            stringify!(MaxRcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinRcm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntnettbl),
            "::",
            stringify!(MinRcm)
        )
    );
}
pub type OUT_FLNTNETTBL = _out_flntnettbl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntlog {
    pub TotalSend: ::std::os::raw::c_ulong,
    pub SendErr: ::std::os::raw::c_ulong,
    pub TotalRecv: ::std::os::raw::c_ulong,
    pub RecvErr: ::std::os::raw::c_ulong,
    pub CycErr: ::std::os::raw::c_ulong,
    pub MsgRetry: ::std::os::raw::c_ulong,
    pub MsgRetryOver: ::std::os::raw::c_ulong,
    pub RecvMsgErr: ::std::os::raw::c_ulong,
    pub AckErr: ::std::os::raw::c_ulong,
    pub DuplicatedToken: ::std::os::raw::c_ulong,
    pub DestroyedToken: ::std::os::raw::c_ulong,
    pub ReissueToken: ::std::os::raw::c_ulong,
    pub FrameWait: ::std::os::raw::c_ulong,
    pub Entry: ::std::os::raw::c_ulong,
    pub OutRing: ::std::os::raw::c_ulong,
    pub Skip: ::std::os::raw::c_ulong,
    pub Disconnect: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_flntlog() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntlog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntlog>(),
        136usize,
        concat!("Size of: ", stringify!(_out_flntlog))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntlog>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_flntlog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalSend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(TotalSend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendErr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(SendErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalRecv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(TotalRecv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvErr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(RecvErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycErr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(CycErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgRetry) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(MsgRetry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgRetryOver) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(MsgRetryOver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvMsgErr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(RecvMsgErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AckErr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(AckErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DuplicatedToken) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(DuplicatedToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DestroyedToken) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(DestroyedToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReissueToken) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(ReissueToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameWait) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(FrameWait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Entry) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(Entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutRing) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(OutRing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Skip) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(Skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Disconnect) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog),
            "::",
            stringify!(Disconnect)
        )
    );
}
pub type OUT_FLNTLOG = _out_flntlog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntlog2 {
    pub TotalSend: ::std::os::raw::c_ulong,
    pub SendErr: ::std::os::raw::c_ulong,
    pub TotalRecv: ::std::os::raw::c_ulong,
    pub RecvErr: ::std::os::raw::c_ulong,
    pub CycErr: ::std::os::raw::c_ulong,
    pub MsgRetry: ::std::os::raw::c_ulong,
    pub MsgRetryOver: ::std::os::raw::c_ulong,
    pub RecvMsgErr: ::std::os::raw::c_ulong,
    pub AckErr: ::std::os::raw::c_ulong,
    pub DuplicatedToken: ::std::os::raw::c_ulong,
    pub DestroyedToken: ::std::os::raw::c_ulong,
    pub ReissueToken: ::std::os::raw::c_ulong,
    pub FrameWait: ::std::os::raw::c_ulong,
    pub Entry: ::std::os::raw::c_ulong,
    pub OutRing: ::std::os::raw::c_ulong,
    pub Skip: ::std::os::raw::c_ulong,
    pub Disconnect: ::std::os::raw::c_ulong,
    pub Baudrate: ::std::os::raw::c_short,
    pub Reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_flntlog2() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntlog2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntlog2>(),
        144usize,
        concat!("Size of: ", stringify!(_out_flntlog2))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntlog2>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_flntlog2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalSend) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(TotalSend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendErr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(SendErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalRecv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(TotalRecv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvErr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(RecvErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CycErr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(CycErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgRetry) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(MsgRetry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgRetryOver) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(MsgRetryOver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RecvMsgErr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(RecvMsgErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AckErr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(AckErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DuplicatedToken) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(DuplicatedToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DestroyedToken) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(DestroyedToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReissueToken) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(ReissueToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameWait) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(FrameWait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Entry) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(Entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutRing) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(OutRing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Skip) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(Skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Disconnect) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(Disconnect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Baudrate) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(Baudrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntlog2),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type OUT_FLNTLOG2 = _out_flntlog2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flnteachmsg {
    pub MsgId: ::std::os::raw::c_ushort,
    pub Year: ::std::os::raw::c_uchar,
    pub Month: ::std::os::raw::c_uchar,
    pub Day: ::std::os::raw::c_uchar,
    pub Hour: ::std::os::raw::c_uchar,
    pub Minute: ::std::os::raw::c_uchar,
    pub Second: ::std::os::raw::c_uchar,
    pub Text: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout__out_flnteachmsg() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flnteachmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flnteachmsg>(),
        40usize,
        concat!("Size of: ", stringify!(_out_flnteachmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flnteachmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_flnteachmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(MsgId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Month) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hour) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Minute) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Second) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flnteachmsg),
            "::",
            stringify!(Text)
        )
    );
}
pub type OUT_FLNTEACHMSG = _out_flnteachmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntmsg {
    pub Count: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_char; 14usize],
    pub msgData: [OUT_FLNTEACHMSG; 15usize],
}
#[test]
fn bindgen_test_layout__out_flntmsg() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntmsg>(),
        616usize,
        concat!("Size of: ", stringify!(_out_flntmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_flntmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntmsg),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntmsg),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntmsg),
            "::",
            stringify!(msgData)
        )
    );
}
pub type OUT_FLNTMSG = _out_flntmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntdevinfo {
    pub Kind: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_short,
    pub FunctionFLnetBoard: ::std::os::raw::c_ulong,
    pub FunctionFLnetEmb: ::std::os::raw::c_ulong,
    pub FunctionFLnetCard: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_flntdevinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntdevinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntdevinfo>(),
        32usize,
        concat!("Size of: ", stringify!(_out_flntdevinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntdevinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_flntdevinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionFLnetBoard) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo),
            "::",
            stringify!(FunctionFLnetBoard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionFLnetEmb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo),
            "::",
            stringify!(FunctionFLnetEmb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionFLnetCard) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo),
            "::",
            stringify!(FunctionFLnetCard)
        )
    );
}
pub type OUT_FLNTDEVINFO = _out_flntdevinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntdevinfo2 {
    pub Kind: ::std::os::raw::c_ushort,
    pub Pad: ::std::os::raw::c_short,
    pub FunctionFLnet: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_flntdevinfo2() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntdevinfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntdevinfo2>(),
        16usize,
        concat!("Size of: ", stringify!(_out_flntdevinfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntdevinfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_flntdevinfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo2),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo2),
            "::",
            stringify!(Pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionFLnet) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntdevinfo2),
            "::",
            stringify!(FunctionFLnet)
        )
    );
}
pub type OUT_FLNTDEVINFO2 = _out_flntdevinfo2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _each_sts {
    pub StatusFlag: ::std::os::raw::c_uchar,
    pub ErrDetectNode: ::std::os::raw::c_uchar,
    pub ErrSendNode: ::std::os::raw::c_uchar,
    pub Reserved: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__each_sts() {
    const UNINIT: ::std::mem::MaybeUninit<_each_sts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_each_sts>(),
        4usize,
        concat!("Size of: ", stringify!(_each_sts))
    );
    assert_eq!(
        ::std::mem::align_of::<_each_sts>(),
        1usize,
        concat!("Alignment of ", stringify!(_each_sts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusFlag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_sts),
            "::",
            stringify!(StatusFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrDetectNode) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_sts),
            "::",
            stringify!(ErrDetectNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrSendNode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_sts),
            "::",
            stringify!(ErrSendNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_sts),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type EACH_STS = _each_sts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntsfsts {
    pub eachSts: [EACH_STS; 2usize],
    pub AlarmInfo: ::std::os::raw::c_short,
    pub Reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_flntsfsts() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntsfsts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntsfsts>(),
        12usize,
        concat!("Size of: ", stringify!(_out_flntsfsts))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntsfsts>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_flntsfsts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eachSts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsfsts),
            "::",
            stringify!(eachSts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AlarmInfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsfsts),
            "::",
            stringify!(AlarmInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsfsts),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type OUT_FLNTSFSTS = _out_flntsfsts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _each_err {
    pub ErrFlag: ::std::os::raw::c_uchar,
    pub ErrNode: ::std::os::raw::c_uchar,
    pub Reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__each_err() {
    const UNINIT: ::std::mem::MaybeUninit<_each_err> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_each_err>(),
        4usize,
        concat!("Size of: ", stringify!(_each_err))
    );
    assert_eq!(
        ::std::mem::align_of::<_each_err>(),
        1usize,
        concat!("Alignment of ", stringify!(_each_err))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrFlag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_err),
            "::",
            stringify!(ErrFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrNode) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_err),
            "::",
            stringify!(ErrNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_each_err),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type EACH_ERR = _each_err;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _node_err {
    pub eachErr: [EACH_ERR; 2usize],
}
#[test]
fn bindgen_test_layout__node_err() {
    const UNINIT: ::std::mem::MaybeUninit<_node_err> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_node_err>(),
        8usize,
        concat!("Size of: ", stringify!(_node_err))
    );
    assert_eq!(
        ::std::mem::align_of::<_node_err>(),
        1usize,
        concat!("Alignment of ", stringify!(_node_err))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eachErr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_node_err),
            "::",
            stringify!(eachErr)
        )
    );
}
pub type NODE_ERR = _node_err;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_flntsferrtbl {
    pub SelfNode: ::std::os::raw::c_uchar,
    pub Reserved: [::std::os::raw::c_char; 3usize],
    pub EntryNode: ::std::os::raw::c_ulong,
    pub nodeErr: [NODE_ERR; 30usize],
}
#[test]
fn bindgen_test_layout__out_flntsferrtbl() {
    const UNINIT: ::std::mem::MaybeUninit<_out_flntsferrtbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_flntsferrtbl>(),
        256usize,
        concat!("Size of: ", stringify!(_out_flntsferrtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_flntsferrtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_flntsferrtbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelfNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsferrtbl),
            "::",
            stringify!(SelfNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsferrtbl),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EntryNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsferrtbl),
            "::",
            stringify!(EntryNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeErr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_flntsferrtbl),
            "::",
            stringify!(nodeErr)
        )
    );
}
pub type OUT_FLNTSFERRTBL = _out_flntsferrtbl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_cclrprm {
    pub BaudRate: ::std::os::raw::c_short,
    pub ID: ::std::os::raw::c_short,
    pub UseIDCount: ::std::os::raw::c_short,
    pub DataOnAbnormal: ::std::os::raw::c_short,
    pub Status: PMC_REG,
    pub RY: PMC_REG,
    pub RYSize: ::std::os::raw::c_short,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub RX: PMC_REG,
    pub RXSize: ::std::os::raw::c_short,
    pub pad2: [::std::os::raw::c_char; 2usize],
    pub RWw: PMC_REG,
    pub RWwSize: ::std::os::raw::c_short,
    pub pad3: [::std::os::raw::c_char; 2usize],
    pub RWr: PMC_REG,
    pub RWrSize: ::std::os::raw::c_short,
    pub pad4: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_cclrprm() {
    const UNINIT: ::std::mem::MaybeUninit<_out_cclrprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_cclrprm>(),
        44usize,
        concat!("Size of: ", stringify!(_out_cclrprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_cclrprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_cclrprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseIDCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(UseIDCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataOnAbnormal) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(DataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RYSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RYSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RXSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RWw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWwSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RWwSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RWr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWrSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(RWrSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad4) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrprm),
            "::",
            stringify!(pad4)
        )
    );
}
pub type OUT_CCLRPRM = _out_cclrprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_cclrprmflag {
    pub BaudRate: ::std::os::raw::c_char,
    pub ID: ::std::os::raw::c_char,
    pub UseIDCount: ::std::os::raw::c_char,
    pub DataOnAbnormal: ::std::os::raw::c_char,
    pub Status: ::std::os::raw::c_char,
    pub RY: ::std::os::raw::c_char,
    pub RYSize: ::std::os::raw::c_char,
    pub RX: ::std::os::raw::c_char,
    pub RXSize: ::std::os::raw::c_char,
    pub RWw: ::std::os::raw::c_char,
    pub RWwSize: ::std::os::raw::c_char,
    pub RWr: ::std::os::raw::c_char,
    pub RWrSize: ::std::os::raw::c_char,
    pub pad: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout__in_cclrprmflag() {
    const UNINIT: ::std::mem::MaybeUninit<_in_cclrprmflag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_cclrprmflag>(),
        16usize,
        concat!("Size of: ", stringify!(_in_cclrprmflag))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_cclrprmflag>(),
        1usize,
        concat!("Alignment of ", stringify!(_in_cclrprmflag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseIDCount) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(UseIDCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataOnAbnormal) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(DataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RY) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RYSize) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RYSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RX) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RXSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWw) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RWw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWwSize) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RWwSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWr) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RWr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWrSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(RWrSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprmflag),
            "::",
            stringify!(pad)
        )
    );
}
pub type IN_CCLRPRMFLAG = _in_cclrprmflag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_cclrprm {
    pub BaudRate: ::std::os::raw::c_short,
    pub ID: ::std::os::raw::c_short,
    pub UseIDCount: ::std::os::raw::c_short,
    pub DataOnAbnormal: ::std::os::raw::c_short,
    pub Status: PMC_REG,
    pub RY: PMC_REG,
    pub RYSize: ::std::os::raw::c_short,
    pub pad1: [::std::os::raw::c_char; 2usize],
    pub RX: PMC_REG,
    pub RXSize: ::std::os::raw::c_short,
    pub pad2: [::std::os::raw::c_char; 2usize],
    pub RWw: PMC_REG,
    pub RWwSize: ::std::os::raw::c_short,
    pub pad3: [::std::os::raw::c_char; 2usize],
    pub RWr: PMC_REG,
    pub RWrSize: ::std::os::raw::c_short,
    pub pad4: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__in_cclrprm() {
    const UNINIT: ::std::mem::MaybeUninit<_in_cclrprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_cclrprm>(),
        44usize,
        concat!("Size of: ", stringify!(_in_cclrprm))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_cclrprm>(),
        2usize,
        concat!("Alignment of ", stringify!(_in_cclrprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseIDCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(UseIDCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataOnAbnormal) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(DataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RYSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RYSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RXSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RWw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWwSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RWwSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RWr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWrSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(RWrSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad4) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_cclrprm),
            "::",
            stringify!(pad4)
        )
    );
}
pub type IN_CCLRPRM = _in_cclrprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_cclrinfo {
    pub LineStatus: ::std::os::raw::c_uchar,
    pub MachineCode: ::std::os::raw::c_uchar,
    pub MakerCode: ::std::os::raw::c_ushort,
    pub errCode: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__out_cclrinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_cclrinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_cclrinfo>(),
        8usize,
        concat!("Size of: ", stringify!(_out_cclrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_cclrinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_cclrinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LineStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrinfo),
            "::",
            stringify!(LineStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MachineCode) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrinfo),
            "::",
            stringify!(MachineCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MakerCode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrinfo),
            "::",
            stringify!(MakerCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrinfo),
            "::",
            stringify!(errCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_cclrinfo),
            "::",
            stringify!(pad)
        )
    );
}
pub type OUT_CCLRINFO = _out_cclrinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_usbinfo {
    pub UsbStatus: ::std::os::raw::c_short,
    pub VendorID: ::std::os::raw::c_ushort,
    pub ProductID: ::std::os::raw::c_ushort,
    pub DeviceRelease: ::std::os::raw::c_ushort,
    pub Manufacturer: [::std::os::raw::c_char; 64usize],
    pub ProductName: [::std::os::raw::c_char; 64usize],
    pub SerialNumber: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__out_usbinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_usbinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_usbinfo>(),
        200usize,
        concat!("Size of: ", stringify!(_out_usbinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_usbinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_usbinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UsbStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(UsbStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorID) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(ProductID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceRelease) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(DeviceRelease)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Manufacturer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(Manufacturer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductName) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(ProductName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SerialNumber) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usbinfo),
            "::",
            stringify!(SerialNumber)
        )
    );
}
pub type OUT_USBINFO = _out_usbinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_usblog1shot {
    pub Type: ::std::os::raw::c_short,
    pub MsgId: ::std::os::raw::c_ushort,
    pub Year: ::std::os::raw::c_uchar,
    pub Month: ::std::os::raw::c_uchar,
    pub Day: ::std::os::raw::c_uchar,
    pub Hour: ::std::os::raw::c_uchar,
    pub Minute: ::std::os::raw::c_uchar,
    pub Second: ::std::os::raw::c_uchar,
    pub reserve: [::std::os::raw::c_char; 2usize],
    pub Text: [::std::os::raw::c_char; 84usize],
}
#[test]
fn bindgen_test_layout__out_usblog1shot() {
    const UNINIT: ::std::mem::MaybeUninit<_out_usblog1shot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_usblog1shot>(),
        96usize,
        concat!("Size of: ", stringify!(_out_usblog1shot))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_usblog1shot>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_usblog1shot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgId) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(MsgId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Month) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hour) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Second) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog1shot),
            "::",
            stringify!(Text)
        )
    );
}
pub type OUT_USBLOG1SHOT = _out_usblog1shot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_usblog {
    pub Count: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_char; 14usize],
    pub logData: [OUT_USBLOG1SHOT; 15usize],
}
#[test]
fn bindgen_test_layout__out_usblog() {
    const UNINIT: ::std::mem::MaybeUninit<_out_usblog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_usblog>(),
        1456usize,
        concat!("Size of: ", stringify!(_out_usblog))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_usblog>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_usblog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_usblog),
            "::",
            stringify!(logData)
        )
    );
}
pub type OUT_USBLOG = _out_usblog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnd_addr {
    pub Path: ::std::os::raw::c_ushort,
    pub Kind: ::std::os::raw::c_short,
    pub Addr: ::std::os::raw::c_ulong,
    pub Size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__pnd_addr() {
    const UNINIT: ::std::mem::MaybeUninit<_pnd_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnd_addr>(),
        24usize,
        concat!("Size of: ", stringify!(_pnd_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnd_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnd_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_addr),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_addr),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_addr),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_addr),
            "::",
            stringify!(Size)
        )
    );
}
pub type PND_ADDR = _pnd_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnd_common_param {
    pub OwnMacAddress: [::std::os::raw::c_char; 16usize],
    pub OwnIpAddress: [::std::os::raw::c_char; 40usize],
    pub SubNetmask: [::std::os::raw::c_char; 16usize],
    pub RouterIpAddress: [::std::os::raw::c_char; 40usize],
    pub DnsServer1IpAddress: [::std::os::raw::c_char; 40usize],
    pub DnsServer2IpAddress: [::std::os::raw::c_char; 40usize],
    pub OwnHostName: [::std::os::raw::c_char; 32usize],
    pub OwnDomain: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__pnd_common_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnd_common_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnd_common_param>(),
        288usize,
        concat!("Size of: ", stringify!(_pnd_common_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnd_common_param>(),
        1usize,
        concat!("Alignment of ", stringify!(_pnd_common_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(OwnMacAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(RouterIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer1IpAddress) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(DnsServer1IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer2IpAddress) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(DnsServer2IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnHostName) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(OwnHostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnDomain) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_common_param),
            "::",
            stringify!(OwnDomain)
        )
    );
}
pub type PND_COMMON_PARAM = _pnd_common_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnd_ping_param {
    pub IpAddress: [::std::os::raw::c_char; 64usize],
    pub Count: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__pnd_ping_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnd_ping_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnd_ping_param>(),
        68usize,
        concat!("Size of: ", stringify!(_pnd_ping_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnd_ping_param>(),
        2usize,
        concat!("Alignment of ", stringify!(_pnd_ping_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_ping_param),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_ping_param),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_ping_param),
            "::",
            stringify!(pad)
        )
    );
}
pub type PND_PING_PARAM = _pnd_ping_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnd_setting_param {
    pub PnDeviceMode: ::std::os::raw::c_uchar,
    pub DiDataOnAbnormal: ::std::os::raw::c_uchar,
    pub pad1: [::std::os::raw::c_uchar; 2usize],
    pub BasicOption1: ::std::os::raw::c_uchar,
    pub BasicOption2: ::std::os::raw::c_uchar,
    pub AllocOption1: ::std::os::raw::c_uchar,
    pub AllocOption2: ::std::os::raw::c_uchar,
    pub DiData: PND_ADDR,
    pub DoData: PND_ADDR,
    pub Status: PND_ADDR,
    pub DeviceName: [::std::os::raw::c_char; 244usize],
}
#[test]
fn bindgen_test_layout__pnd_setting_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnd_setting_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnd_setting_param>(),
        328usize,
        concat!("Size of: ", stringify!(_pnd_setting_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnd_setting_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnd_setting_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PnDeviceMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(PnDeviceMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(BasicOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(BasicOption2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocOption1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(AllocOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocOption2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(AllocOption2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(DiData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(DoData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceName) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_setting_param),
            "::",
            stringify!(DeviceName)
        )
    );
}
pub type PND_SETTING_PARAM = _pnd_setting_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnd_param_flg {
    pub OwnIpAddress: ::std::os::raw::c_char,
    pub SubNetmask: ::std::os::raw::c_char,
    pub RouterIpAddress: ::std::os::raw::c_char,
    pub DnsServer1IpAddress: ::std::os::raw::c_char,
    pub DnsServer2IpAddress: ::std::os::raw::c_char,
    pub OwnHostName: ::std::os::raw::c_char,
    pub OwnDomain: ::std::os::raw::c_char,
    pub PingIpAddress: ::std::os::raw::c_char,
    pub PingCount: ::std::os::raw::c_char,
    pub PnDeviceMode: ::std::os::raw::c_char,
    pub DiDataOnAbnormal: ::std::os::raw::c_char,
    pub BasicOption1: ::std::os::raw::c_char,
    pub BasicOption2: ::std::os::raw::c_char,
    pub AllocOption1: ::std::os::raw::c_char,
    pub AllocOption2: ::std::os::raw::c_char,
    pub DiData: ::std::os::raw::c_char,
    pub DoData: ::std::os::raw::c_char,
    pub Status: ::std::os::raw::c_char,
    pub DeviceName: ::std::os::raw::c_char,
    pub pad2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__pnd_param_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_pnd_param_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnd_param_flg>(),
        20usize,
        concat!("Size of: ", stringify!(_pnd_param_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnd_param_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_pnd_param_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(RouterIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer1IpAddress) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(DnsServer1IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DnsServer2IpAddress) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(DnsServer2IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnHostName) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(OwnHostName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnDomain) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(OwnDomain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PingIpAddress) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(PingIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PingCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(PingCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PnDeviceMode) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(PnDeviceMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDataOnAbnormal) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(DiDataOnAbnormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption1) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(BasicOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(BasicOption2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocOption1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(AllocOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocOption2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(AllocOption2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiData) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(DiData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(DoData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceName) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(DeviceName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param_flg),
            "::",
            stringify!(pad2)
        )
    );
}
pub type PND_PARAM_FLG = _pnd_param_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnd_param {
    pub Common: PND_COMMON_PARAM,
    pub Ping: PND_PING_PARAM,
    pub Setting: PND_SETTING_PARAM,
}
#[test]
fn bindgen_test_layout__pnd_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnd_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnd_param>(),
        688usize,
        concat!("Size of: ", stringify!(_pnd_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnd_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnd_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ping) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param),
            "::",
            stringify!(Ping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Setting) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnd_param),
            "::",
            stringify!(Setting)
        )
    );
}
pub type PND_PARAM = _pnd_param;
pub type OUT_PND_PARAM = PND_PARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_pnd_param {
    pub flg: PND_PARAM_FLG,
    pub prm: PND_PARAM,
}
#[test]
fn bindgen_test_layout__in_pnd_param() {
    const UNINIT: ::std::mem::MaybeUninit<_in_pnd_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_pnd_param>(),
        712usize,
        concat!("Size of: ", stringify!(_in_pnd_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_pnd_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_in_pnd_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_pnd_param),
            "::",
            stringify!(flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_pnd_param),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_PND_PARAM = _in_pnd_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_pnd_mntinfo {
    pub Status: ::std::os::raw::c_uchar,
    pub pad: [::std::os::raw::c_uchar; 3usize],
    pub VendorID: ::std::os::raw::c_ushort,
    pub DeviceID: ::std::os::raw::c_ushort,
    pub InputSize: ::std::os::raw::c_ushort,
    pub OutputSize: ::std::os::raw::c_ushort,
    pub RcvRead: ::std::os::raw::c_ushort,
    pub RcvWrite: ::std::os::raw::c_ushort,
    pub RcvRt: ::std::os::raw::c_ushort,
    pub RcvRtU: ::std::os::raw::c_ushort,
    pub RcvPause: ::std::os::raw::c_ushort,
    pub RcvLldp: ::std::os::raw::c_ushort,
    pub InputCycleTime: ::std::os::raw::c_ushort,
    pub OutputCycleTime: ::std::os::raw::c_ushort,
    pub DoRefreshTime: ::std::os::raw::c_ushort,
    pub DiRefreshTIme: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_pnd_mntinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_pnd_mntinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_pnd_mntinfo>(),
        32usize,
        concat!("Size of: ", stringify!(_out_pnd_mntinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_pnd_mntinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_pnd_mntinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeviceID) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(DeviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(InputSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutputSize) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(OutputSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RcvRead) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(RcvRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RcvWrite) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(RcvWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RcvRt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(RcvRt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RcvRtU) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(RcvRtU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RcvPause) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(RcvPause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RcvLldp) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(RcvLldp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputCycleTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(InputCycleTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutputCycleTime) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(OutputCycleTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoRefreshTime) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(DoRefreshTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiRefreshTIme) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnd_mntinfo),
            "::",
            stringify!(DiRefreshTIme)
        )
    );
}
pub type OUT_PND_MNTINFO = _out_pnd_mntinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_addr {
    pub Path: ::std::os::raw::c_ushort,
    pub Kind: ::std::os::raw::c_short,
    pub Addr: ::std::os::raw::c_ulong,
    pub Size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__pnc_addr() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_addr>(),
        24usize,
        concat!("Size of: ", stringify!(_pnc_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnc_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr),
            "::",
            stringify!(Addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr),
            "::",
            stringify!(Size)
        )
    );
}
pub type PNC_ADDR = _pnc_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_common_param {
    pub OwnMacAddress: [::std::os::raw::c_char; 16usize],
    pub OwnIpAddress: [::std::os::raw::c_char; 40usize],
    pub SubNetmask: [::std::os::raw::c_char; 16usize],
    pub RouterIpAddress: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__pnc_common_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_common_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_common_param>(),
        112usize,
        concat!("Size of: ", stringify!(_pnc_common_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_common_param>(),
        1usize,
        concat!("Alignment of ", stringify!(_pnc_common_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnMacAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param),
            "::",
            stringify!(OwnMacAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param),
            "::",
            stringify!(RouterIpAddress)
        )
    );
}
pub type PNC_COMMON_PARAM = _pnc_common_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_ping_param {
    pub IpAddress: [::std::os::raw::c_char; 64usize],
    pub Count: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__pnc_ping_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_ping_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_ping_param>(),
        68usize,
        concat!("Size of: ", stringify!(_pnc_ping_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_ping_param>(),
        2usize,
        concat!("Alignment of ", stringify!(_pnc_ping_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_ping_param),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_ping_param),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_ping_param),
            "::",
            stringify!(pad)
        )
    );
}
pub type PNC_PING_PARAM = _pnc_ping_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_setting_param {
    pub PnControllerMode: ::std::os::raw::c_uchar,
    pub TotalDeviceNum: ::std::os::raw::c_uchar,
    pub BasicOption1: ::std::os::raw::c_uchar,
    pub reserve1: ::std::os::raw::c_uchar,
    pub DiData: PNC_ADDR,
    pub DoData: PNC_ADDR,
    pub Status: PNC_ADDR,
    pub reserve2: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__pnc_setting_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_setting_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_setting_param>(),
        96usize,
        concat!("Size of: ", stringify!(_pnc_setting_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_setting_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnc_setting_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PnControllerMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(PnControllerMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalDeviceNum) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(TotalDeviceNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(BasicOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(DiData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(DoData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type PNC_SETTING_PARAM = _pnc_setting_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_param {
    pub Common: PNC_COMMON_PARAM,
    pub Ping: PNC_PING_PARAM,
    pub Setting: PNC_SETTING_PARAM,
}
#[test]
fn bindgen_test_layout__pnc_param() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_param>(),
        280usize,
        concat!("Size of: ", stringify!(_pnc_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnc_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ping) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param),
            "::",
            stringify!(Ping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Setting) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param),
            "::",
            stringify!(Setting)
        )
    );
}
pub type PNC_PARAM = _pnc_param;
pub type OUT_PNC_PARAM = PNC_PARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_addr_top {
    pub Path: ::std::os::raw::c_ushort,
    pub Kind: ::std::os::raw::c_short,
    pub Addr: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__pnc_addr_top() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_addr_top> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_addr_top>(),
        16usize,
        concat!("Size of: ", stringify!(_pnc_addr_top))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_addr_top>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnc_addr_top))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr_top),
            "::",
            stringify!(Path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr_top),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_addr_top),
            "::",
            stringify!(Addr)
        )
    );
}
pub type PNC_ADDRTOP = _pnc_addr_top;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_common_param_w {
    pub OwnIpAddress: [::std::os::raw::c_char; 40usize],
    pub SubNetmask: [::std::os::raw::c_char; 16usize],
    pub RouterIpAddress: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__pnc_common_param_w() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_common_param_w> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_common_param_w>(),
        96usize,
        concat!("Size of: ", stringify!(_pnc_common_param_w))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_common_param_w>(),
        1usize,
        concat!("Alignment of ", stringify!(_pnc_common_param_w))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param_w),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param_w),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_common_param_w),
            "::",
            stringify!(RouterIpAddress)
        )
    );
}
pub type PNC_COMMON_PARAM_W = _pnc_common_param_w;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_setting_param_w {
    pub PnControllerMode: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub BasicOption1: ::std::os::raw::c_uchar,
    pub reserve1: ::std::os::raw::c_uchar,
    pub DiAddrTop: PNC_ADDRTOP,
    pub DoAddrTop: PNC_ADDRTOP,
    pub Status: PNC_ADDR,
    pub reserve2: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__pnc_setting_param_w() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_setting_param_w> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_setting_param_w>(),
        80usize,
        concat!("Size of: ", stringify!(_pnc_setting_param_w))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_setting_param_w>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnc_setting_param_w))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PnControllerMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(PnControllerMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(BasicOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiAddrTop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(DiAddrTop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoAddrTop) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(DoAddrTop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_setting_param_w),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type PNC_SETTING_PARAM_W = _pnc_setting_param_w;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_param_flg {
    pub OwnIpAddress: ::std::os::raw::c_char,
    pub SubNetmask: ::std::os::raw::c_char,
    pub RouterIpAddress: ::std::os::raw::c_char,
    pub PingIpAddress: ::std::os::raw::c_char,
    pub PingCount: ::std::os::raw::c_char,
    pub PnControllerMode: ::std::os::raw::c_char,
    pub BasicOption1: ::std::os::raw::c_char,
    pub reserve1: ::std::os::raw::c_char,
    pub DiAddrTop: ::std::os::raw::c_char,
    pub DoAddrTop: ::std::os::raw::c_char,
    pub Status: ::std::os::raw::c_char,
    pub reserve2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__pnc_param_flg() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_param_flg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_param_flg>(),
        12usize,
        concat!("Size of: ", stringify!(_pnc_param_flg))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_param_flg>(),
        1usize,
        concat!("Alignment of ", stringify!(_pnc_param_flg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OwnIpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(OwnIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubNetmask) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(SubNetmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RouterIpAddress) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(RouterIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PingIpAddress) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(PingIpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PingCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(PingCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PnControllerMode) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(PnControllerMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicOption1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(BasicOption1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiAddrTop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(DiAddrTop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoAddrTop) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(DoAddrTop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_flg),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type PNC_PARAM_FLG = _pnc_param_flg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pnc_param_w {
    pub Common: PNC_COMMON_PARAM_W,
    pub Ping: PNC_PING_PARAM,
    pub Setting: PNC_SETTING_PARAM_W,
}
#[test]
fn bindgen_test_layout__pnc_param_w() {
    const UNINIT: ::std::mem::MaybeUninit<_pnc_param_w> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pnc_param_w>(),
        248usize,
        concat!("Size of: ", stringify!(_pnc_param_w))
    );
    assert_eq!(
        ::std::mem::align_of::<_pnc_param_w>(),
        8usize,
        concat!("Alignment of ", stringify!(_pnc_param_w))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_w),
            "::",
            stringify!(Common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ping) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_w),
            "::",
            stringify!(Ping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Setting) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_pnc_param_w),
            "::",
            stringify!(Setting)
        )
    );
}
pub type PNC_PARAM_W = _pnc_param_w;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _in_pnc_param {
    pub flg: PNC_PARAM_FLG,
    pub prm: PNC_PARAM_W,
}
#[test]
fn bindgen_test_layout__in_pnc_param() {
    const UNINIT: ::std::mem::MaybeUninit<_in_pnc_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_in_pnc_param>(),
        264usize,
        concat!("Size of: ", stringify!(_in_pnc_param))
    );
    assert_eq!(
        ::std::mem::align_of::<_in_pnc_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_in_pnc_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_pnc_param),
            "::",
            stringify!(flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_in_pnc_param),
            "::",
            stringify!(prm)
        )
    );
}
pub type IN_PNC_PARAM = _in_pnc_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_pnc_cntrlr_info {
    pub Status: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub DiDoRefreshTime: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_pnc_cntrlr_info() {
    const UNINIT: ::std::mem::MaybeUninit<_out_pnc_cntrlr_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_pnc_cntrlr_info>(),
        4usize,
        concat!("Size of: ", stringify!(_out_pnc_cntrlr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_pnc_cntrlr_info>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_pnc_cntrlr_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_cntrlr_info),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_cntrlr_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiDoRefreshTime) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_cntrlr_info),
            "::",
            stringify!(DiDoRefreshTime)
        )
    );
}
pub type OUT_PNC_CNTRLR_INFO = _out_pnc_cntrlr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_pnc_device_info {
    pub IpAddress: [::std::os::raw::c_char; 16usize],
    pub Status: ::std::os::raw::c_uchar,
    pub pad: [::std::os::raw::c_uchar; 3usize],
    pub DiAddrTop: PNC_ADDRTOP,
    pub DoAddrTop: PNC_ADDRTOP,
    pub InputSize: ::std::os::raw::c_ushort,
    pub OutputSize: ::std::os::raw::c_ushort,
    pub InputCycleTime: ::std::os::raw::c_ushort,
    pub OutputCycleTime: ::std::os::raw::c_ushort,
    pub AlarmNum: ::std::os::raw::c_ulong,
    pub ConnectTime: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__out_pnc_device_info() {
    const UNINIT: ::std::mem::MaybeUninit<_out_pnc_device_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_pnc_device_info>(),
        80usize,
        concat!("Size of: ", stringify!(_out_pnc_device_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_pnc_device_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_pnc_device_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(Status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DiAddrTop) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(DiAddrTop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DoAddrTop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(DoAddrTop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(InputSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutputSize) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(OutputSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputCycleTime) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(InputCycleTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutputCycleTime) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(OutputCycleTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AlarmNum) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(AlarmNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConnectTime) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_device_info),
            "::",
            stringify!(ConnectTime)
        )
    );
}
pub type OUT_PNC_DEVICE_INFO = _out_pnc_device_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_pnc_allcom_stat {
    pub State: [::std::os::raw::c_uchar; 48usize],
}
#[test]
fn bindgen_test_layout__out_pnc_allcom_stat() {
    const UNINIT: ::std::mem::MaybeUninit<_out_pnc_allcom_stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_pnc_allcom_stat>(),
        48usize,
        concat!("Size of: ", stringify!(_out_pnc_allcom_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_pnc_allcom_stat>(),
        1usize,
        concat!("Alignment of ", stringify!(_out_pnc_allcom_stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_allcom_stat),
            "::",
            stringify!(State)
        )
    );
}
pub type OUT_PNC_ALLCOM_STAT = _out_pnc_allcom_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_pnc_detail_info {
    pub Result: ::std::os::raw::c_short,
    pub pad: [::std::os::raw::c_uchar; 2usize],
    pub IpAddress: [::std::os::raw::c_char; 16usize],
    pub Info: [::std::os::raw::c_char; 360usize],
}
#[test]
fn bindgen_test_layout__out_pnc_detail_info() {
    const UNINIT: ::std::mem::MaybeUninit<_out_pnc_detail_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_pnc_detail_info>(),
        380usize,
        concat!("Size of: ", stringify!(_out_pnc_detail_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_pnc_detail_info>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_pnc_detail_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_detail_info),
            "::",
            stringify!(Result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_detail_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IpAddress) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_detail_info),
            "::",
            stringify!(IpAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Info) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_pnc_detail_info),
            "::",
            stringify!(Info)
        )
    );
}
pub type OUT_PNC_DETAIL_INFO = _out_pnc_detail_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ectlog1shot {
    pub MsgId: ::std::os::raw::c_ushort,
    pub Year: ::std::os::raw::c_uchar,
    pub Month: ::std::os::raw::c_uchar,
    pub Day: ::std::os::raw::c_uchar,
    pub Hour: ::std::os::raw::c_uchar,
    pub Minute: ::std::os::raw::c_uchar,
    pub Second: ::std::os::raw::c_uchar,
    pub Text: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout__out_ectlog1shot() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ectlog1shot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ectlog1shot>(),
        40usize,
        concat!("Size of: ", stringify!(_out_ectlog1shot))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ectlog1shot>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ectlog1shot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MsgId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(MsgId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Year) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Month) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hour) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Minute) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Second) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog1shot),
            "::",
            stringify!(Text)
        )
    );
}
pub type OUT_ECTLOG1SHOT = _out_ectlog1shot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ectlog {
    pub Count: ::std::os::raw::c_ushort,
    pub reserve: [::std::os::raw::c_uchar; 14usize],
    pub logData: [OUT_ECTLOG1SHOT; 15usize],
}
#[test]
fn bindgen_test_layout__out_ectlog() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ectlog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ectlog>(),
        616usize,
        concat!("Size of: ", stringify!(_out_ectlog))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ectlog>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ectlog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectlog),
            "::",
            stringify!(logData)
        )
    );
}
pub type OUT_ECTLOG = _out_ectlog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ecttype {
    pub Kind: ::std::os::raw::c_uchar,
    pub Slot: ::std::os::raw::c_uchar,
    pub FunctionEctSlv: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_ecttype() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ecttype> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ecttype>(),
        4usize,
        concat!("Size of: ", stringify!(_out_ecttype))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ecttype>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ecttype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ecttype),
            "::",
            stringify!(Kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Slot) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ecttype),
            "::",
            stringify!(Slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FunctionEctSlv) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ecttype),
            "::",
            stringify!(FunctionEctSlv)
        )
    );
}
pub type OUT_ECTTYPE = _out_ecttype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ectdevinfo {
    pub EsiVersion: [::std::os::raw::c_char; 8usize],
    pub VendorID: ::std::os::raw::c_ulong,
    pub ProductCode: ::std::os::raw::c_ulong,
    pub RevisionNo: ::std::os::raw::c_ulong,
    pub NodeAddress: ::std::os::raw::c_ushort,
    pub pad: [::std::os::raw::c_uchar; 2usize],
}
#[test]
fn bindgen_test_layout__out_ectdevinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ectdevinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ectdevinfo>(),
        40usize,
        concat!("Size of: ", stringify!(_out_ectdevinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ectdevinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_out_ectdevinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EsiVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectdevinfo),
            "::",
            stringify!(EsiVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VendorID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectdevinfo),
            "::",
            stringify!(VendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductCode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectdevinfo),
            "::",
            stringify!(ProductCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevisionNo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectdevinfo),
            "::",
            stringify!(RevisionNo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NodeAddress) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectdevinfo),
            "::",
            stringify!(NodeAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectdevinfo),
            "::",
            stringify!(pad)
        )
    );
}
pub type OUT_ECTDEVINFO = _out_ectdevinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _out_ectnetinfo {
    pub Esm: ::std::os::raw::c_ushort,
    pub Mode: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__out_ectnetinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_out_ectnetinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_out_ectnetinfo>(),
        4usize,
        concat!("Size of: ", stringify!(_out_ectnetinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_out_ectnetinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(_out_ectnetinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Esm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectnetinfo),
            "::",
            stringify!(Esm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_out_ectnetinfo),
            "::",
            stringify!(Mode)
        )
    );
}
pub type OUT_ECTNETINFO = _out_ectnetinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrenplt {
    pub delay_time: ::std::os::raw::c_short,
    pub data_flag: ::std::os::raw::c_ushort,
    pub pos_data: [::std::os::raw::c_short; 6usize],
}
#[test]
fn bindgen_test_layout_odbrenplt() {
    const UNINIT: ::std::mem::MaybeUninit<odbrenplt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrenplt>(),
        16usize,
        concat!("Size of: ", stringify!(odbrenplt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrenplt>(),
        2usize,
        concat!("Alignment of ", stringify!(odbrenplt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrenplt),
            "::",
            stringify!(delay_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrenplt),
            "::",
            stringify!(data_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrenplt),
            "::",
            stringify!(pos_data)
        )
    );
}
pub type ODBRENPLT = odbrenplt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptime2 {
    pub num: ::std::os::raw::c_short,
    pub data: [odbptime2__bindgen_ty_1; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptime2__bindgen_ty_1 {
    pub filename: [::std::os::raw::c_char; 36usize],
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_char,
    pub sec: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbptime2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptime2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptime2__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(odbptime2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptime2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbptime2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime2__bindgen_ty_1),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime2__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime2__bindgen_ty_1),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime2__bindgen_ty_1),
            "::",
            stringify!(sec)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptime2() {
    const UNINIT: ::std::mem::MaybeUninit<odbptime2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptime2>(),
        402usize,
        concat!("Size of: ", stringify!(odbptime2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptime2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbptime2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime2),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptime2),
            "::",
            stringify!(data)
        )
    );
}
pub type ODBPTIME2 = odbptime2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scdldata {
    pub file_no: ::std::os::raw::c_short,
    pub file_name: [::std::os::raw::c_char; 16usize],
    pub repeat_num: ::std::os::raw::c_short,
    pub current_num: ::std::os::raw::c_short,
    pub dummy: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_scdldata() {
    const UNINIT: ::std::mem::MaybeUninit<scdldata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<scdldata>(),
        24usize,
        concat!("Size of: ", stringify!(scdldata))
    );
    assert_eq!(
        ::std::mem::align_of::<scdldata>(),
        2usize,
        concat!("Alignment of ", stringify!(scdldata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(scdldata),
            "::",
            stringify!(file_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(scdldata),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_num) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(scdldata),
            "::",
            stringify!(repeat_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_num) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(scdldata),
            "::",
            stringify!(current_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(scdldata),
            "::",
            stringify!(dummy)
        )
    );
}
pub type SCDL_1D = scdldata;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbptaxistat {
    pub u: odbptaxistat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbptaxistat__bindgen_ty_1 {
    pub state1: odbptaxistat__bindgen_ty_1__bindgen_ty_1,
    pub state2: odbptaxistat__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptaxistat__bindgen_ty_1__bindgen_ty_1 {
    pub l_value_e: f64,
    pub pos_value_e: f64,
    pub l_value: f64,
    pub time: f64,
    pub ov_time: ::std::os::raw::c_short,
    pub number: ::std::os::raw::c_short,
    pub next_table: ::std::os::raw::c_short,
    pub skip_table: ::std::os::raw::c_short,
    pub skip_signal: ::std::os::raw::c_short,
    pub table_kind: ::std::os::raw::c_short,
    pub master_indx_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbptaxistat__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxistat__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxistat__bindgen_ty_1__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxistat__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value_e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pos_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ov_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ov_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_table) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_table) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(skip_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_signal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(skip_signal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(table_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(master_indx_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptaxistat__bindgen_ty_1__bindgen_ty_2 {
    pub l_value_e_sub: f64,
    pub pos_value_e_sub: f64,
    pub l_value_sub: f64,
    pub repeat_e_sub: ::std::os::raw::c_long,
    pub repeat_sub: ::std::os::raw::c_long,
    pub number_sub: ::std::os::raw::c_short,
    pub next_table_sub: ::std::os::raw::c_short,
    pub skip_table_sub: ::std::os::raw::c_short,
    pub skip_signal_sub: ::std::os::raw::c_short,
    pub table_kind_sub: ::std::os::raw::c_short,
    pub master_indx_no_sub: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbptaxistat__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxistat__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxistat__bindgen_ty_1__bindgen_ty_2>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxistat__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_sub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value_e_sub) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pos_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_sub) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_value_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_e_sub) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(repeat_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_sub) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(repeat_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_sub) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(number_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_table_sub) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(next_table_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_table_sub) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(skip_table_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_signal_sub) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(skip_signal_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind_sub) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(table_kind_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no_sub) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(master_indx_no_sub)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptaxistat__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxistat__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxistat__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(odbptaxistat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxistat__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptaxistat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1),
            "::",
            stringify!(state1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat__bindgen_ty_1),
            "::",
            stringify!(state2)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptaxistat() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxistat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxistat>(),
        56usize,
        concat!("Size of: ", stringify!(odbptaxistat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxistat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptaxistat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxistat),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBPTAXISTAT = odbptaxistat;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbptspstat {
    pub u: odbptspstat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbptspstat__bindgen_ty_1 {
    pub state1: odbptspstat__bindgen_ty_1__bindgen_ty_1,
    pub state2: odbptspstat__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptspstat__bindgen_ty_1__bindgen_ty_1 {
    pub l_value_e: f64,
    pub pos_value_e: f64,
    pub l_value: f64,
    pub time: f64,
    pub srpm: ::std::os::raw::c_long,
    pub sspm: ::std::os::raw::c_long,
    pub smax: ::std::os::raw::c_long,
    pub ov_time: ::std::os::raw::c_short,
    pub number: ::std::os::raw::c_short,
    pub next_table: ::std::os::raw::c_short,
    pub skip_table: ::std::os::raw::c_short,
    pub skip_signal: ::std::os::raw::c_short,
    pub sp_mode: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbptspstat__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptspstat__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptspstat__bindgen_ty_1__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbptspstat__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value_e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pos_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srpm) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(srpm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sspm) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sspm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smax) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(smax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ov_time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ov_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_table) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_table) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(skip_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_signal) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(skip_signal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_mode) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sp_mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptspstat__bindgen_ty_1__bindgen_ty_2 {
    pub l_value_e_sub: f64,
    pub pos_value_e_sub: f64,
    pub l_value_sub: f64,
    pub repeat_e_sub: ::std::os::raw::c_long,
    pub repeat_sub: ::std::os::raw::c_long,
    pub number_sub: ::std::os::raw::c_short,
    pub next_table_sub: ::std::os::raw::c_short,
    pub skip_table_sub: ::std::os::raw::c_short,
    pub skip_signal_sub: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbptspstat__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbptspstat__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptspstat__bindgen_ty_1__bindgen_ty_2>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbptspstat__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_sub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value_e_sub) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pos_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_sub) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_value_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_e_sub) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(repeat_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_sub) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(repeat_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_sub) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(number_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_table_sub) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(next_table_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_table_sub) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(skip_table_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_signal_sub) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(skip_signal_sub)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptspstat__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptspstat__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptspstat__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(odbptspstat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptspstat__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptspstat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1),
            "::",
            stringify!(state1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat__bindgen_ty_1),
            "::",
            stringify!(state2)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptspstat() {
    const UNINIT: ::std::mem::MaybeUninit<odbptspstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptspstat>(),
        72usize,
        concat!("Size of: ", stringify!(odbptspstat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptspstat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptspstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptspstat),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBPTSPSTAT = odbptspstat;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct odbptaxfuncstat {
    pub u: odbptaxfuncstat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union odbptaxfuncstat__bindgen_ty_1 {
    pub state1: odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1,
    pub state2: odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1 {
    pub l_value_e: f64,
    pub l_value: f64,
    pub time: f64,
    pub m_code: [::std::os::raw::c_long; 3usize],
    pub ov_time: ::std::os::raw::c_short,
    pub number: ::std::os::raw::c_short,
    pub next_table: ::std::os::raw::c_short,
    pub skip_table: ::std::os::raw::c_short,
    pub skip_signal: ::std::os::raw::c_short,
    pub table_kind: ::std::os::raw::c_short,
    pub master_indx_no: ::std::os::raw::c_short,
    pub m_count: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_code) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(m_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ov_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ov_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_table) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_table) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(skip_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_signal) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(skip_signal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(table_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(master_indx_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_count) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(m_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2 {
    pub l_value_e_sub: f64,
    pub l_value_sub: f64,
    pub repeat_e_sub: ::std::os::raw::c_long,
    pub repeat_sub: ::std::os::raw::c_long,
    pub number_sub: ::std::os::raw::c_short,
    pub next_table_sub: ::std::os::raw::c_short,
    pub skip_table_sub: ::std::os::raw::c_short,
    pub skip_signal_sub: ::std::os::raw::c_short,
    pub table_kind_sub: ::std::os::raw::c_short,
    pub master_indx_no_sub: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_sub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_sub) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_value_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_e_sub) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(repeat_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_sub) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(repeat_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_sub) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(number_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_table_sub) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(next_table_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_table_sub) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(skip_table_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_signal_sub) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(skip_signal_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind_sub) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(table_kind_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no_sub) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(master_indx_no_sub)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptaxfuncstat__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxfuncstat__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxfuncstat__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(odbptaxfuncstat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxfuncstat__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptaxfuncstat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1),
            "::",
            stringify!(state1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat__bindgen_ty_1),
            "::",
            stringify!(state2)
        )
    );
}
#[test]
fn bindgen_test_layout_odbptaxfuncstat() {
    const UNINIT: ::std::mem::MaybeUninit<odbptaxfuncstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptaxfuncstat>(),
        64usize,
        concat!("Size of: ", stringify!(odbptaxfuncstat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptaxfuncstat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptaxfuncstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptaxfuncstat),
            "::",
            stringify!(u)
        )
    );
}
pub type ODBPTAXFUNCSTAT = odbptaxfuncstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptcomment {
    pub t_code: ::std::os::raw::c_long,
    pub comment_count: ::std::os::raw::c_char,
    pub pto_mode: ::std::os::raw::c_char,
    pub dummy1: [::std::os::raw::c_char; 2usize],
    pub comment: [[::std::os::raw::c_char; 32usize]; 10usize],
}
#[test]
fn bindgen_test_layout_odbptcomment() {
    const UNINIT: ::std::mem::MaybeUninit<odbptcomment> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptcomment>(),
        336usize,
        concat!("Size of: ", stringify!(odbptcomment))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptcomment>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptcomment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcomment),
            "::",
            stringify!(t_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcomment),
            "::",
            stringify!(comment_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pto_mode) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcomment),
            "::",
            stringify!(pto_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcomment),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcomment),
            "::",
            stringify!(comment)
        )
    );
}
pub type ODBPTCOMMENT = odbptcomment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_gb {
    pub date: odbpthis_gb__bindgen_ty_1,
    pub reserve1: ::std::os::raw::c_char,
    pub info1: ::std::os::raw::c_long,
    pub path_num: ::std::os::raw::c_char,
    pub reserve2: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_gb__bindgen_ty_1 {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_char,
    pub day: ::std::os::raw::c_char,
    pub hour: ::std::os::raw::c_char,
    pub min: ::std::os::raw::c_char,
    pub sec: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbpthis_gb__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_gb__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_gb__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(odbpthis_gb__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_gb__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpthis_gb__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb__bindgen_ty_1),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb__bindgen_ty_1),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb__bindgen_ty_1),
            "::",
            stringify!(sec)
        )
    );
}
#[test]
fn bindgen_test_layout_odbpthis_gb() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_gb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_gb>(),
        32usize,
        concat!("Size of: ", stringify!(odbpthis_gb))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_gb>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpthis_gb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb),
            "::",
            stringify!(info1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb),
            "::",
            stringify!(path_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_gb),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type ODBPTHIS_GB = odbpthis_gb;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_pt {
    pub time: f64,
    pub dist_err: ::std::os::raw::c_short,
    pub ov_time: ::std::os::raw::c_short,
    pub info1: ::std::os::raw::c_long,
    pub alarm_no: ::std::os::raw::c_short,
    pub alarm_type: ::std::os::raw::c_char,
    pub alarm_axis: ::std::os::raw::c_char,
    pub path_axis_num: ::std::os::raw::c_char,
    pub path_spdl_num: ::std::os::raw::c_char,
    pub time_frac: ::std::os::raw::c_char,
    pub reserve1: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbpthis_pt() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_pt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_pt>(),
        32usize,
        concat!("Size of: ", stringify!(odbpthis_pt))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_pt>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpthis_pt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dist_err) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(dist_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ov_time) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(ov_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(info1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm_no) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(alarm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm_type) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(alarm_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm_axis) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(alarm_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_axis_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(path_axis_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_spdl_num) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(path_spdl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_frac) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(time_frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_pt),
            "::",
            stringify!(reserve1)
        )
    );
}
pub type ODBPTHIS_PT = odbpthis_pt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_ax {
    pub l_value: f64,
    pub l_value_e: f64,
    pub pos_value: f64,
    pub pos_value_e: f64,
    pub l_value_sub: f64,
    pub l_value_e_sub: f64,
    pub l_value_cycle: f64,
    pub l_value_e_cycle: f64,
    pub repeat_sub: ::std::os::raw::c_long,
    pub repeat_e_sub: ::std::os::raw::c_long,
    pub info1: ::std::os::raw::c_long,
    pub number: ::std::os::raw::c_short,
    pub number_sub: ::std::os::raw::c_short,
    pub number_cycle: ::std::os::raw::c_short,
    pub table_kind: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 4usize],
    pub cs_spdl_idx_pt: ::std::os::raw::c_char,
    pub cs_spdl_idx_rel: ::std::os::raw::c_char,
    pub master_indx_no_pt: ::std::os::raw::c_char,
    pub master_indx_no_rel: ::std::os::raw::c_char,
    pub pos_frac: ::std::os::raw::c_char,
    pub l_frac: ::std::os::raw::c_char,
    pub l_frac_cycle: ::std::os::raw::c_char,
    pub reserve1: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_odbpthis_ax() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_ax> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_ax>(),
        112usize,
        concat!("Size of: ", stringify!(odbpthis_ax))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_ax>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpthis_ax))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(pos_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value_e) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(pos_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_sub) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_value_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_sub) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_cycle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_value_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_cycle) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_value_e_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_sub) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(repeat_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_e_sub) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(repeat_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info1) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(info1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_sub) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(number_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_cycle) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(number_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(table_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_spdl_idx_pt) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(cs_spdl_idx_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_spdl_idx_rel) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(cs_spdl_idx_rel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no_pt) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(master_indx_no_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no_rel) as usize - ptr as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(master_indx_no_rel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_frac) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(pos_frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_frac) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_frac_cycle) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(l_frac_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_ax),
            "::",
            stringify!(reserve1)
        )
    );
}
pub type ODBPTHIS_AX = odbpthis_ax;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_sp {
    pub l_value: f64,
    pub l_value_e: f64,
    pub pos_value: f64,
    pub pos_value_e: f64,
    pub l_value_sub: f64,
    pub l_value_e_sub: f64,
    pub repeat_sub: ::std::os::raw::c_long,
    pub repeat_e_sub: ::std::os::raw::c_long,
    pub srpm: ::std::os::raw::c_long,
    pub rrpm: ::std::os::raw::c_long,
    pub sspm: ::std::os::raw::c_long,
    pub smax: ::std::os::raw::c_long,
    pub info1: ::std::os::raw::c_long,
    pub number: ::std::os::raw::c_short,
    pub number_sub: ::std::os::raw::c_short,
    pub table_kind: ::std::os::raw::c_short,
    pub sp_mode: ::std::os::raw::c_char,
    pub name: [::std::os::raw::c_char; 4usize],
    pub ov_sp: ::std::os::raw::c_char,
    pub reserve1: ::std::os::raw::c_char,
    pub cs_axis_idx_pt: ::std::os::raw::c_char,
    pub cs_axis_idx_rel: ::std::os::raw::c_char,
    pub pos_frac: ::std::os::raw::c_char,
    pub l_frac: ::std::os::raw::c_char,
    pub reserve2: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_odbpthis_sp() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_sp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_sp>(),
        128usize,
        concat!("Size of: ", stringify!(odbpthis_sp))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_sp>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpthis_sp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(l_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(l_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(pos_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_value_e) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(pos_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_sub) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(l_value_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_sub) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(l_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_sub) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(repeat_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_e_sub) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(repeat_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srpm) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(srpm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rrpm) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(rrpm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sspm) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(sspm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smax) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(smax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(info1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_sub) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(number_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(table_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_mode) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(sp_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ov_sp) as usize - ptr as usize },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(ov_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_axis_idx_pt) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(cs_axis_idx_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_axis_idx_rel) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(cs_axis_idx_rel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_frac) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(pos_frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_frac) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(l_frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_sp),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type ODBPTHIS_SP = odbpthis_sp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_aux {
    pub l_value: f64,
    pub l_value_e: f64,
    pub l_value_sub: f64,
    pub l_value_e_sub: f64,
    pub repeat_sub: ::std::os::raw::c_long,
    pub repeat_e_sub: ::std::os::raw::c_long,
    pub m_code: [::std::os::raw::c_long; 3usize],
    pub info1: ::std::os::raw::c_long,
    pub number: ::std::os::raw::c_short,
    pub number_sub: ::std::os::raw::c_short,
    pub table_kind: ::std::os::raw::c_short,
    pub m_count: ::std::os::raw::c_char,
    pub master_indx_no_pt: ::std::os::raw::c_char,
    pub master_indx_no_rel: ::std::os::raw::c_char,
    pub l_frac: ::std::os::raw::c_char,
    pub reserve1: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout_odbpthis_aux() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_aux> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_aux>(),
        96usize,
        concat!("Size of: ", stringify!(odbpthis_aux))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_aux>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpthis_aux))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(l_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(l_value_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_sub) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(l_value_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_value_e_sub) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(l_value_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_sub) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(repeat_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat_e_sub) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(repeat_e_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_code) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(m_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(info1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_sub) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(number_sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_kind) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(table_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_count) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(m_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no_pt) as usize - ptr as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(master_indx_no_pt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_indx_no_rel) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(master_indx_no_rel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_frac) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(l_frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_aux),
            "::",
            stringify!(reserve1)
        )
    );
}
pub type ODBPTHIS_AUX = odbpthis_aux;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpthis_log {
    pub issub: ::std::os::raw::c_char,
    pub kind: ::std::os::raw::c_char,
    pub number: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbpthis_log() {
    const UNINIT: ::std::mem::MaybeUninit<odbpthis_log> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpthis_log>(),
        4usize,
        concat!("Size of: ", stringify!(odbpthis_log))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpthis_log>(),
        2usize,
        concat!("Alignment of ", stringify!(odbpthis_log))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).issub) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_log),
            "::",
            stringify!(issub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_log),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpthis_log),
            "::",
            stringify!(number)
        )
    );
}
pub type ODBPTHIS_LOG = odbpthis_log;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbptcnvinfo2 {
    pub executing: [[::std::os::raw::c_short; 10usize]; 2usize],
    pub conv_status: [[::std::os::raw::c_long; 10usize]; 2usize],
    pub ofs_change: [[::std::os::raw::c_short; 10usize]; 2usize],
}
#[test]
fn bindgen_test_layout_odbptcnvinfo2() {
    const UNINIT: ::std::mem::MaybeUninit<odbptcnvinfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbptcnvinfo2>(),
        240usize,
        concat!("Size of: ", stringify!(odbptcnvinfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbptcnvinfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbptcnvinfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executing) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcnvinfo2),
            "::",
            stringify!(executing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conv_status) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcnvinfo2),
            "::",
            stringify!(conv_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_change) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(odbptcnvinfo2),
            "::",
            stringify!(ofs_change)
        )
    );
}
pub type ODBPTCNVINFO2 = odbptcnvinfo2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbaxsts_bg {
    pub flag: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbaxsts_bg() {
    const UNINIT: ::std::mem::MaybeUninit<odbaxsts_bg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbaxsts_bg>(),
        8usize,
        concat!("Size of: ", stringify!(odbaxsts_bg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbaxsts_bg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbaxsts_bg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbaxsts_bg),
            "::",
            stringify!(flag)
        )
    );
}
pub type ODBAXSTS_BG = odbaxsts_bg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpalax {
    pub max_pal: ::std::os::raw::c_long,
    pub data: [::std::os::raw::c_long; 32usize],
}
#[test]
fn bindgen_test_layout_iodbpalax() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpalax> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpalax>(),
        264usize,
        concat!("Size of: ", stringify!(iodbpalax))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpalax>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpalax))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpalax),
            "::",
            stringify!(max_pal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpalax),
            "::",
            stringify!(data)
        )
    );
}
pub type IODBPALAX = iodbpalax;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahdck {
    pub dat_path: ::std::os::raw::c_short,
    pub info: [odbahdck__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbahdck__bindgen_ty_1 {
    pub stat: ::std::os::raw::c_short,
    pub data: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbahdck__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbahdck__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahdck__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbahdck__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahdck__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahdck__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahdck__bindgen_ty_1),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahdck__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_odbahdck() {
    const UNINIT: ::std::mem::MaybeUninit<odbahdck> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbahdck>(),
        62usize,
        concat!("Size of: ", stringify!(odbahdck))
    );
    assert_eq!(
        ::std::mem::align_of::<odbahdck>(),
        2usize,
        concat!("Alignment of ", stringify!(odbahdck))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dat_path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahdck),
            "::",
            stringify!(dat_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbahdck),
            "::",
            stringify!(info)
        )
    );
}
pub type ODBAHDCK = odbahdck;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrstlist {
    pub prg_name: [::std::os::raw::c_char; 246usize],
    pub dummy: [::std::os::raw::c_char; 2usize],
    pub seq_no: ::std::os::raw::c_long,
    pub c_blck_cnt: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbrstlist() {
    const UNINIT: ::std::mem::MaybeUninit<odbrstlist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrstlist>(),
        264usize,
        concat!("Size of: ", stringify!(odbrstlist))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrstlist>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrstlist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist),
            "::",
            stringify!(prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_blck_cnt) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist),
            "::",
            stringify!(c_blck_cnt)
        )
    );
}
pub type ODBRSTLIST = odbrstlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrstlist2 {
    pub prg_name: [::std::os::raw::c_char; 246usize],
    pub status: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
    pub seq_no: ::std::os::raw::c_long,
    pub wait_m_code: ::std::os::raw::c_long,
    pub c_blck_cnt: ::std::os::raw::c_long,
    pub time_s: ::std::os::raw::c_char,
    pub time_m: ::std::os::raw::c_char,
    pub time_h: ::std::os::raw::c_char,
    pub time_d: ::std::os::raw::c_char,
    pub id_no: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_odbrstlist2() {
    const UNINIT: ::std::mem::MaybeUninit<odbrstlist2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrstlist2>(),
        312usize,
        concat!("Size of: ", stringify!(odbrstlist2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrstlist2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrstlist2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        247usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_m_code) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(wait_m_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_blck_cnt) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(c_blck_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_s) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(time_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_m) as usize - ptr as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(time_m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_h) as usize - ptr as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(time_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_d) as usize - ptr as usize },
        275usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(time_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_no) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(id_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstlist2),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBRSTLIST2 = odbrstlist2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrstinfo {
    pub seq_no: ::std::os::raw::c_long,
    pub c_blck_cnt: ::std::os::raw::c_long,
    pub t_blck_cnt: ::std::os::raw::c_long,
    pub call_from_no: ::std::os::raw::c_long,
    pub call_from_blck: ::std::os::raw::c_long,
    pub prg_rep: ::std::os::raw::c_short,
    pub seq_rep: ::std::os::raw::c_short,
    pub c_blck_rep: ::std::os::raw::c_short,
    pub nest_lv: ::std::os::raw::c_short,
    pub prg_name: [::std::os::raw::c_char; 246usize],
    pub dummy1: [::std::os::raw::c_char; 2usize],
    pub call_from_prg: [::std::os::raw::c_char; 246usize],
    pub dummy2: [::std::os::raw::c_char; 2usize],
    pub edit_flag: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub repeat: ::std::os::raw::c_short,
    pub wait_m_code: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbrstinfo() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrstinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrstinfo>(),
        560usize,
        concat!("Size of: ", stringify!(iodbrstinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrstinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrstinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_blck_cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(c_blck_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_blck_cnt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(t_blck_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_from_no) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(call_from_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_from_blck) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(call_from_blck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_rep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(prg_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_rep) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(seq_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_blck_rep) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(c_blck_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nest_lv) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(nest_lv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_from_prg) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(call_from_prg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        542usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit_flag) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(edit_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        545usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize },
        546usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_m_code) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo),
            "::",
            stringify!(wait_m_code)
        )
    );
}
pub type IODBRSTINFO = iodbrstinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrstinfo2 {
    pub seq_no: ::std::os::raw::c_long,
    pub c_blck_cnt: ::std::os::raw::c_long,
    pub t_blck_cnt: ::std::os::raw::c_long,
    pub call_from_no: ::std::os::raw::c_long,
    pub call_from_blck: ::std::os::raw::c_long,
    pub prg_rep: ::std::os::raw::c_short,
    pub seq_rep: ::std::os::raw::c_short,
    pub c_blck_rep: ::std::os::raw::c_short,
    pub nest_lv: ::std::os::raw::c_short,
    pub prg_name: [::std::os::raw::c_char; 246usize],
    pub dummy1: [::std::os::raw::c_char; 2usize],
    pub call_from_prg: [::std::os::raw::c_char; 246usize],
    pub dummy2: [::std::os::raw::c_char; 2usize],
    pub edit_flag: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub repeat: ::std::os::raw::c_short,
    pub wait_m_code: ::std::os::raw::c_long,
    pub time_s: ::std::os::raw::c_char,
    pub time_m: ::std::os::raw::c_char,
    pub time_h: ::std::os::raw::c_char,
    pub time_d: ::std::os::raw::c_char,
    pub id_no: ::std::os::raw::c_long,
    pub reserve2: [::std::os::raw::c_long; 3usize],
}
#[test]
fn bindgen_test_layout_iodbrstinfo2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrstinfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrstinfo2>(),
        600usize,
        concat!("Size of: ", stringify!(iodbrstinfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrstinfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrstinfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(seq_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_blck_cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(c_blck_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_blck_cnt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(t_blck_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_from_no) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(call_from_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_from_blck) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(call_from_blck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_rep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(prg_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_rep) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(seq_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_blck_rep) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(c_blck_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nest_lv) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(nest_lv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_from_prg) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(call_from_prg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        542usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit_flag) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(edit_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        545usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize },
        546usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_m_code) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(wait_m_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_s) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(time_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_m) as usize - ptr as usize },
        561usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(time_m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_h) as usize - ptr as usize },
        562usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(time_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_d) as usize - ptr as usize },
        563usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(time_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_no) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(id_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrstinfo2),
            "::",
            stringify!(reserve2)
        )
    );
}
pub type IODBRSTINFO2 = iodbrstinfo2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrstmpinfo {
    pub u_block_num: ::std::os::raw::c_long,
    pub mltpiece_all: ::std::os::raw::c_long,
    pub mltpiece_exe: ::std::os::raw::c_long,
    pub u_file_name: [::std::os::raw::c_char; 246usize],
}
#[test]
fn bindgen_test_layout_odbrstmpinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbrstmpinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrstmpinfo>(),
        272usize,
        concat!("Size of: ", stringify!(odbrstmpinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrstmpinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrstmpinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_block_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstmpinfo),
            "::",
            stringify!(u_block_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mltpiece_all) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstmpinfo),
            "::",
            stringify!(mltpiece_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mltpiece_exe) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstmpinfo),
            "::",
            stringify!(mltpiece_exe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u_file_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrstmpinfo),
            "::",
            stringify!(u_file_name)
        )
    );
}
pub type ODBRSTMPINFO = odbrstmpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsuofs {
    pub vect_val: ::std::os::raw::c_long,
    pub frc_dgt: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbsuofs() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsuofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsuofs>(),
        16usize,
        concat!("Size of: ", stringify!(iodbsuofs))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsuofs>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsuofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vect_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsuofs),
            "::",
            stringify!(vect_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frc_dgt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsuofs),
            "::",
            stringify!(frc_dgt)
        )
    );
}
pub type ODBSUOVECT = iodbsuofs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsuodata {
    pub data_name: [::std::os::raw::c_char; 4usize],
    pub prm_val: ::std::os::raw::c_long,
    pub frc_dgt: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbsuodata() {
    const UNINIT: ::std::mem::MaybeUninit<odbsuodata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsuodata>(),
        24usize,
        concat!("Size of: ", stringify!(odbsuodata))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsuodata>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsuodata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsuodata),
            "::",
            stringify!(data_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsuodata),
            "::",
            stringify!(prm_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frc_dgt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsuodata),
            "::",
            stringify!(frc_dgt)
        )
    );
}
pub type ODBSUODATA = odbsuodata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbfilestatus {
    pub size: ::std::os::raw::c_ulong,
    pub min: ::std::os::raw::c_uchar,
    pub hour: ::std::os::raw::c_uchar,
    pub day: ::std::os::raw::c_uchar,
    pub month: ::std::os::raw::c_uchar,
    pub year: ::std::os::raw::c_ushort,
    pub reserve: [::std::os::raw::c_uchar; 2usize],
    pub filename: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout_odbfilestatus() {
    const UNINIT: ::std::mem::MaybeUninit<odbfilestatus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbfilestatus>(),
        40usize,
        concat!("Size of: ", stringify!(odbfilestatus))
    );
    assert_eq!(
        ::std::mem::align_of::<odbfilestatus>(),
        8usize,
        concat!("Alignment of ", stringify!(odbfilestatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbfilestatus),
            "::",
            stringify!(filename)
        )
    );
}
pub type ODBFILESTATUS = odbfilestatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbproginfo {
    pub comment: [::std::os::raw::c_char; 52usize],
    pub o_time: [::std::os::raw::c_char; 12usize],
}
#[test]
fn bindgen_test_layout_odbproginfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbproginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbproginfo>(),
        64usize,
        concat!("Size of: ", stringify!(odbproginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbproginfo>(),
        1usize,
        concat!("Alignment of ", stringify!(odbproginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbproginfo),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o_time) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(odbproginfo),
            "::",
            stringify!(o_time)
        )
    );
}
pub type ODBPROGINFO = odbproginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtpnlinf {
    pub status: ::std::os::raw::c_uchar,
    pub dummy: [::std::os::raw::c_uchar; 3usize],
    pub coord_x: ::std::os::raw::c_short,
    pub coord_y: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtpnlinf() {
    const UNINIT: ::std::mem::MaybeUninit<odbtpnlinf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtpnlinf>(),
        8usize,
        concat!("Size of: ", stringify!(odbtpnlinf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtpnlinf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtpnlinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpnlinf),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpnlinf),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpnlinf),
            "::",
            stringify!(coord_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord_y) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpnlinf),
            "::",
            stringify!(coord_y)
        )
    );
}
pub type ODBTPNLINTF = odbtpnlinf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpmcaxisinfo {
    pub datastatus: ::std::os::raw::c_uchar,
    pub axisstatus: ::std::os::raw::c_uchar,
    pub commandsignal: ::std::os::raw::c_uchar,
    pub statussignal: ::std::os::raw::c_uchar,
    pub dummy: ::std::os::raw::c_uchar,
    pub instruction: ::std::os::raw::c_uchar,
    pub speedsignal: ::std::os::raw::c_ushort,
    pub axisctrldata: ::std::os::raw::c_ulong,
    pub subinstnum: ::std::os::raw::c_ushort,
    pub subinstlength: ::std::os::raw::c_ushort,
    pub subinstdata1: ::std::os::raw::c_ulong,
    pub subinstdata2: ::std::os::raw::c_ulong,
    pub subinstdata3: ::std::os::raw::c_ulong,
    pub subinstdata4: ::std::os::raw::c_ulong,
    pub subinstdata5: ::std::os::raw::c_ulong,
    pub subinstdata6: ::std::os::raw::c_ulong,
    pub subinstdata7: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbpmcaxisinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbpmcaxisinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpmcaxisinfo>(),
        80usize,
        concat!("Size of: ", stringify!(odbpmcaxisinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpmcaxisinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpmcaxisinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datastatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(datastatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axisstatus) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(axisstatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandsignal) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(commandsignal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statussignal) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(statussignal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instruction) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(instruction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speedsignal) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(speedsignal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axisctrldata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(axisctrldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstlength) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstlength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata3) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata4) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata5) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata6) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subinstdata7) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpmcaxisinfo),
            "::",
            stringify!(subinstdata7)
        )
    );
}
pub type ODBPMCAXISINFO = odbpmcaxisinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmddinfo {
    pub status: ::std::os::raw::c_short,
    pub prot: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
    pub reg_code: ::std::os::raw::c_ulong,
    pub cur_code: ::std::os::raw::c_ulong,
    pub modulate: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbmddinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbmddinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmddinfo>(),
        40usize,
        concat!("Size of: ", stringify!(odbmddinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmddinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmddinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prot) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(prot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_code) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(reg_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_code) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(cur_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modulate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmddinfo),
            "::",
            stringify!(modulate)
        )
    );
}
pub type ODBMDDINFO = odbmddinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmddexceptinfo {
    pub sno: ::std::os::raw::c_long,
    pub eno: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbmddexceptinfo() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmddexceptinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmddexceptinfo>(),
        16usize,
        concat!("Size of: ", stringify!(iodbmddexceptinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmddexceptinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmddexceptinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmddexceptinfo),
            "::",
            stringify!(sno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmddexceptinfo),
            "::",
            stringify!(eno)
        )
    );
}
pub type IODBMDDEXCEPTPRM = iodbmddexceptinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbusbsize {
    pub totalsize_h: ::std::os::raw::c_ulong,
    pub totalsize_l: ::std::os::raw::c_ulong,
    pub freesize_h: ::std::os::raw::c_ulong,
    pub freesize_l: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbusbsize() {
    const UNINIT: ::std::mem::MaybeUninit<odbusbsize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbusbsize>(),
        32usize,
        concat!("Size of: ", stringify!(odbusbsize))
    );
    assert_eq!(
        ::std::mem::align_of::<odbusbsize>(),
        8usize,
        concat!("Alignment of ", stringify!(odbusbsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalsize_h) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbsize),
            "::",
            stringify!(totalsize_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalsize_l) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbsize),
            "::",
            stringify!(totalsize_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freesize_h) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbsize),
            "::",
            stringify!(freesize_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freesize_l) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbsize),
            "::",
            stringify!(freesize_l)
        )
    );
}
pub type ODBUSBSIZE = odbusbsize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbusbfile {
    pub path: [::std::os::raw::c_char; 256usize],
    pub offset: ::std::os::raw::c_ulong,
    pub req_num: ::std::os::raw::c_short,
    pub req_attrib: ::std::os::raw::c_ushort,
    pub sort: ::std::os::raw::c_char,
    pub req_comment: ::std::os::raw::c_char,
    pub req_total: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_idbusbfile() {
    const UNINIT: ::std::mem::MaybeUninit<idbusbfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbusbfile>(),
        272usize,
        concat!("Size of: ", stringify!(idbusbfile))
    );
    assert_eq!(
        ::std::mem::align_of::<idbusbfile>(),
        8usize,
        concat!("Alignment of ", stringify!(idbusbfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_num) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(req_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_attrib) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(req_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_comment) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(req_comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_total) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(req_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        271usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbfile),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IDBUSBFILE = idbusbfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbusbinfo {
    pub f_num: ::std::os::raw::c_short,
    pub next_entry: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
    pub total: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbusbinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbusbinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbusbinfo>(),
        16usize,
        concat!("Size of: ", stringify!(odbusbinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbusbinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(odbusbinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbinfo),
            "::",
            stringify!(f_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_entry) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbinfo),
            "::",
            stringify!(next_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbinfo),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbinfo),
            "::",
            stringify!(total)
        )
    );
}
pub type ODBUSBINFO = odbusbinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbusbfile {
    pub size: ::std::os::raw::c_ulong,
    pub attribute: ::std::os::raw::c_ushort,
    pub long_name: ::std::os::raw::c_ushort,
    pub year: ::std::os::raw::c_ushort,
    pub mon: ::std::os::raw::c_uchar,
    pub day: ::std::os::raw::c_uchar,
    pub hour: ::std::os::raw::c_uchar,
    pub min: ::std::os::raw::c_uchar,
    pub sec: ::std::os::raw::c_uchar,
    pub dummy: ::std::os::raw::c_uchar,
    pub fname: [::std::os::raw::c_char; 36usize],
    pub comment: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_odbusbfile() {
    const UNINIT: ::std::mem::MaybeUninit<odbusbfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbusbfile>(),
        120usize,
        concat!("Size of: ", stringify!(odbusbfile))
    );
    assert_eq!(
        ::std::mem::align_of::<odbusbfile>(),
        8usize,
        concat!("Alignment of ", stringify!(odbusbfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).long_name) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(long_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbusbfile),
            "::",
            stringify!(comment)
        )
    );
}
pub type ODBUSBFILE = odbusbfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbusbsearch {
    pub path: [::std::os::raw::c_char; 256usize],
    pub s_fname: [::std::os::raw::c_char; 36usize],
    pub req_attrib: ::std::os::raw::c_ushort,
    pub sort: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_idbusbsearch() {
    const UNINIT: ::std::mem::MaybeUninit<idbusbsearch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbusbsearch>(),
        296usize,
        concat!("Size of: ", stringify!(idbusbsearch))
    );
    assert_eq!(
        ::std::mem::align_of::<idbusbsearch>(),
        2usize,
        concat!("Alignment of ", stringify!(idbusbsearch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbsearch),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_fname) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbsearch),
            "::",
            stringify!(s_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_attrib) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbsearch),
            "::",
            stringify!(req_attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbsearch),
            "::",
            stringify!(sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        295usize,
        concat!(
            "Offset of field: ",
            stringify!(idbusbsearch),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IDBUSBSEARCH = idbusbsearch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrbsignal {
    pub type_: ::std::os::raw::c_char,
    pub state: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_ushort,
    pub name: [::std::os::raw::c_char; 76usize],
}
#[test]
fn bindgen_test_layout_odbrbsignal() {
    const UNINIT: ::std::mem::MaybeUninit<odbrbsignal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrbsignal>(),
        80usize,
        concat!("Size of: ", stringify!(odbrbsignal))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrbsignal>(),
        2usize,
        concat!("Alignment of ", stringify!(odbrbsignal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbsignal),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbsignal),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbsignal),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbsignal),
            "::",
            stringify!(name)
        )
    );
}
pub type ODBRBSIGNAL = odbrbsignal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrbsignal2 {
    pub type_: ::std::os::raw::c_char,
    pub state: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_ushort,
    pub name: [::std::os::raw::c_char; 73usize],
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_iodbrbsignal2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrbsignal2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrbsignal2>(),
        80usize,
        concat!("Size of: ", stringify!(iodbrbsignal2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrbsignal2>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrbsignal2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsignal2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsignal2),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsignal2),
            "::",
            stringify!(no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsignal2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsignal2),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBRBSIGNAL2 = iodbrbsignal2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrbalmmsg {
    pub msg: [::std::os::raw::c_char; 152usize],
}
#[test]
fn bindgen_test_layout_iodbrbalmmsg() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrbalmmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrbalmmsg>(),
        152usize,
        concat!("Size of: ", stringify!(iodbrbalmmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrbalmmsg>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbrbalmmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbalmmsg),
            "::",
            stringify!(msg)
        )
    );
}
pub type IODBRBALMMSG = iodbrbalmmsg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrbgrplist {
    pub select: ::std::os::raw::c_char,
    pub robot_program: ::std::os::raw::c_uchar,
    pub nc_program_folder: [::std::os::raw::c_char; 213usize],
    pub nc_program_name: [::std::os::raw::c_char; 33usize],
    pub comment: [::std::os::raw::c_char; 52usize],
}
#[test]
fn bindgen_test_layout_odbrbgrplist() {
    const UNINIT: ::std::mem::MaybeUninit<odbrbgrplist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrbgrplist>(),
        300usize,
        concat!("Size of: ", stringify!(odbrbgrplist))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrbgrplist>(),
        1usize,
        concat!("Alignment of ", stringify!(odbrbgrplist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbgrplist),
            "::",
            stringify!(select)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robot_program) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbgrplist),
            "::",
            stringify!(robot_program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_program_folder) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbgrplist),
            "::",
            stringify!(nc_program_folder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_program_name) as usize - ptr as usize },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbgrplist),
            "::",
            stringify!(nc_program_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrbgrplist),
            "::",
            stringify!(comment)
        )
    );
}
pub type ODBRBGRPLIST = odbrbgrplist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbrbgroup {
    pub robot_program: ::std::os::raw::c_uchar,
    pub nc_program_folder: [::std::os::raw::c_char; 213usize],
    pub nc_program_name: [::std::os::raw::c_char; 33usize],
}
#[test]
fn bindgen_test_layout_idbrbgroup() {
    const UNINIT: ::std::mem::MaybeUninit<idbrbgroup> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbrbgroup>(),
        247usize,
        concat!("Size of: ", stringify!(idbrbgroup))
    );
    assert_eq!(
        ::std::mem::align_of::<idbrbgroup>(),
        1usize,
        concat!("Alignment of ", stringify!(idbrbgroup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robot_program) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbrbgroup),
            "::",
            stringify!(robot_program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_program_folder) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(idbrbgroup),
            "::",
            stringify!(nc_program_folder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_program_name) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(idbrbgroup),
            "::",
            stringify!(nc_program_name)
        )
    );
}
pub type IDBRBGROUP = idbrbgroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbrbsignal {
    pub name: [::std::os::raw::c_char; 76usize],
}
#[test]
fn bindgen_test_layout_idbrbsignal() {
    const UNINIT: ::std::mem::MaybeUninit<idbrbsignal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbrbsignal>(),
        76usize,
        concat!("Size of: ", stringify!(idbrbsignal))
    );
    assert_eq!(
        ::std::mem::align_of::<idbrbsignal>(),
        1usize,
        concat!("Alignment of ", stringify!(idbrbsignal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbrbsignal),
            "::",
            stringify!(name)
        )
    );
}
pub type IDBRBSIGNAL = idbrbsignal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrbtopsig {
    pub unit_type: ::std::os::raw::c_char,
    pub adr_type: ::std::os::raw::c_char,
    pub address: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_iodbrbtopsig() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrbtopsig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrbtopsig>(),
        4usize,
        concat!("Size of: ", stringify!(iodbrbtopsig))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrbtopsig>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrbtopsig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbtopsig),
            "::",
            stringify!(unit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbtopsig),
            "::",
            stringify!(adr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbtopsig),
            "::",
            stringify!(address)
        )
    );
}
pub type IODBRBTOPSIG = iodbrbtopsig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrbpowersig {
    pub unit_type: ::std::os::raw::c_char,
    pub adr_type: ::std::os::raw::c_char,
    pub address: ::std::os::raw::c_ushort,
    pub bit: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_iodbrbpowersig() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrbpowersig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrbpowersig>(),
        8usize,
        concat!("Size of: ", stringify!(iodbrbpowersig))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrbpowersig>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrbpowersig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbpowersig),
            "::",
            stringify!(unit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbpowersig),
            "::",
            stringify!(adr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbpowersig),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbpowersig),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbpowersig),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBRBPOWERSIG = iodbrbpowersig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrbcomset {
    pub di_top: IODBRBTOPSIG,
    pub do_top: IODBRBTOPSIG,
    pub power_on: IODBRBPOWERSIG,
    pub di_offset: ::std::os::raw::c_ushort,
    pub do_offset: ::std::os::raw::c_ushort,
    pub property: ::std::os::raw::c_uchar,
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_iodbrbcomset() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrbcomset> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrbcomset>(),
        24usize,
        concat!("Size of: ", stringify!(iodbrbcomset))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrbcomset>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrbcomset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_top) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(di_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_top) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(do_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_on) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(power_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(di_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_offset) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(do_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbcomset),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBRBCOMSET = iodbrbcomset;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrbsummary {
    pub signal_type: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_iodbrbsummary() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrbsummary> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrbsummary>(),
        4usize,
        concat!("Size of: ", stringify!(iodbrbsummary))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrbsummary>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrbsummary))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsummary),
            "::",
            stringify!(signal_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsummary),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrbsummary),
            "::",
            stringify!(no)
        )
    );
}
pub type IODBRBSUMMARY = iodbrbsummary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbindexprm {
    pub ofs_limit: ::std::os::raw::c_long,
    pub detect_width: ::std::os::raw::c_long,
    pub jog_clamp: [::std::os::raw::c_ushort; 3usize],
    pub matrix_single: ::std::os::raw::c_char,
    pub torque_ovr: ::std::os::raw::c_uchar,
    pub ofs_adjust: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_iodbindexprm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbindexprm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbindexprm>(),
        32usize,
        concat!("Size of: ", stringify!(iodbindexprm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbindexprm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbindexprm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(ofs_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detect_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(detect_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jog_clamp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(jog_clamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix_single) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(matrix_single)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).torque_ovr) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(torque_ovr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_adjust) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(ofs_adjust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexprm),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IODBINDEXPRM = iodbindexprm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbindexdat {
    pub pos: ::std::os::raw::c_long,
    pub inp_width: ::std::os::raw::c_long,
    pub speed: ::std::os::raw::c_ushort,
    pub f_flg: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iodbindexdat() {
    const UNINIT: ::std::mem::MaybeUninit<iodbindexdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbindexdat>(),
        24usize,
        concat!("Size of: ", stringify!(iodbindexdat))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbindexdat>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbindexdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexdat),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inp_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexdat),
            "::",
            stringify!(inp_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexdat),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flg) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexdat),
            "::",
            stringify!(f_flg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbindexdat),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IODBINDEXDAT = iodbindexdat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct indexposdat {
    pub min_value: ::std::os::raw::c_long,
    pub max_value: ::std::os::raw::c_long,
    pub setting: ::std::os::raw::c_char,
    pub dummy: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_indexposdat() {
    const UNINIT: ::std::mem::MaybeUninit<indexposdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<indexposdat>(),
        24usize,
        concat!("Size of: ", stringify!(indexposdat))
    );
    assert_eq!(
        ::std::mem::align_of::<indexposdat>(),
        8usize,
        concat!("Alignment of ", stringify!(indexposdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(indexposdat),
            "::",
            stringify!(min_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(indexposdat),
            "::",
            stringify!(max_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setting) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(indexposdat),
            "::",
            stringify!(setting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(indexposdat),
            "::",
            stringify!(dummy)
        )
    );
}
pub type IODBINDEXPOSDAT = indexposdat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbindexinfo {
    pub mode: ::std::os::raw::c_ushort,
    pub nc_ax: ::std::os::raw::c_short,
    pub inpos_point: ::std::os::raw::c_short,
    pub ofs_edit_signal: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbindexinfo() {
    const UNINIT: ::std::mem::MaybeUninit<odbindexinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbindexinfo>(),
        8usize,
        concat!("Size of: ", stringify!(odbindexinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<odbindexinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(odbindexinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbindexinfo),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_ax) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbindexinfo),
            "::",
            stringify!(nc_ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inpos_point) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbindexinfo),
            "::",
            stringify!(inpos_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs_edit_signal) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbindexinfo),
            "::",
            stringify!(ofs_edit_signal)
        )
    );
}
pub type ODBINDEXINFO = odbindexinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct realnum {
    pub val: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_realnum() {
    const UNINIT: ::std::mem::MaybeUninit<realnum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<realnum>(),
        16usize,
        concat!("Size of: ", stringify!(realnum))
    );
    assert_eq!(
        ::std::mem::align_of::<realnum>(),
        8usize,
        concat!("Alignment of ", stringify!(realnum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(realnum),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(realnum),
            "::",
            stringify!(dec)
        )
    );
}
pub type REALNUM = realnum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbchopping {
    pub cur_pos: REALNUM,
    pub cur_speed: REALNUM,
    pub real_udp: REALNUM,
    pub real_ldp: REALNUM,
    pub stroke_cnt: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbchopping() {
    const UNINIT: ::std::mem::MaybeUninit<odbchopping> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbchopping>(),
        72usize,
        concat!("Size of: ", stringify!(odbchopping))
    );
    assert_eq!(
        ::std::mem::align_of::<odbchopping>(),
        8usize,
        concat!("Alignment of ", stringify!(odbchopping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbchopping),
            "::",
            stringify!(cur_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_speed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbchopping),
            "::",
            stringify!(cur_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real_udp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbchopping),
            "::",
            stringify!(real_udp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real_ldp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(odbchopping),
            "::",
            stringify!(real_ldp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stroke_cnt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbchopping),
            "::",
            stringify!(stroke_cnt)
        )
    );
}
pub type ODBCHOPPING = odbchopping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbcoord {
    pub orign: [::std::os::raw::c_long; 3usize],
    pub vec_x: [::std::os::raw::c_short; 3usize],
    pub vec_y: [::std::os::raw::c_short; 3usize],
    pub vec_z: [::std::os::raw::c_short; 3usize],
}
#[test]
fn bindgen_test_layout__odbcoord() {
    const UNINIT: ::std::mem::MaybeUninit<_odbcoord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbcoord>(),
        48usize,
        concat!("Size of: ", stringify!(_odbcoord))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbcoord>(),
        8usize,
        concat!("Alignment of ", stringify!(_odbcoord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbcoord),
            "::",
            stringify!(orign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_x) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbcoord),
            "::",
            stringify!(vec_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_y) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbcoord),
            "::",
            stringify!(vec_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_z) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbcoord),
            "::",
            stringify!(vec_z)
        )
    );
}
pub type ODBCOORD = _odbcoord;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtwp_euler_fmt {
    pub orign: [f64; 3usize],
    pub i: f64,
    pub j: f64,
    pub k: f64,
    pub reserve: [::std::os::raw::c_long; 24usize],
}
#[test]
fn bindgen_test_layout_idbtwp_euler_fmt() {
    const UNINIT: ::std::mem::MaybeUninit<idbtwp_euler_fmt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtwp_euler_fmt>(),
        240usize,
        concat!("Size of: ", stringify!(idbtwp_euler_fmt))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtwp_euler_fmt>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtwp_euler_fmt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_euler_fmt),
            "::",
            stringify!(orign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_euler_fmt),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_euler_fmt),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_euler_fmt),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_euler_fmt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBTWP_EULER_FMT = idbtwp_euler_fmt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtwp_rpy_fmt {
    pub orign: [f64; 3usize],
    pub i: f64,
    pub j: f64,
    pub k: f64,
    pub turn: ::std::os::raw::c_short,
    pub reserve0: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_long; 23usize],
}
#[test]
fn bindgen_test_layout_idbtwp_rpy_fmt() {
    const UNINIT: ::std::mem::MaybeUninit<idbtwp_rpy_fmt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtwp_rpy_fmt>(),
        240usize,
        concat!("Size of: ", stringify!(idbtwp_rpy_fmt))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtwp_rpy_fmt>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtwp_rpy_fmt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(orign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).turn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(turn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve0) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(reserve0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_rpy_fmt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBTWP_RPY_FMT = idbtwp_rpy_fmt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtwp_3p_fmt {
    pub p1: [f64; 3usize],
    pub p2: [f64; 3usize],
    pub p3: [f64; 3usize],
    pub sft: [f64; 3usize],
    pub rot: f64,
    pub reserve: [::std::os::raw::c_long; 10usize],
}
#[test]
fn bindgen_test_layout_idbtwp_3p_fmt() {
    const UNINIT: ::std::mem::MaybeUninit<idbtwp_3p_fmt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtwp_3p_fmt>(),
        184usize,
        concat!("Size of: ", stringify!(idbtwp_3p_fmt))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtwp_3p_fmt>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtwp_3p_fmt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_3p_fmt),
            "::",
            stringify!(p1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_3p_fmt),
            "::",
            stringify!(p2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p3) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_3p_fmt),
            "::",
            stringify!(p3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sft) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_3p_fmt),
            "::",
            stringify!(sft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_3p_fmt),
            "::",
            stringify!(rot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_3p_fmt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBTWP_3P_FMT = idbtwp_3p_fmt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtwp_2vct_fmt {
    pub orign: [f64; 3usize],
    pub vtr1: [f64; 3usize],
    pub vtr2: [f64; 3usize],
    pub reserve: [::std::os::raw::c_long; 18usize],
}
#[test]
fn bindgen_test_layout_idbtwp_2vct_fmt() {
    const UNINIT: ::std::mem::MaybeUninit<idbtwp_2vct_fmt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtwp_2vct_fmt>(),
        216usize,
        concat!("Size of: ", stringify!(idbtwp_2vct_fmt))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtwp_2vct_fmt>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtwp_2vct_fmt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_2vct_fmt),
            "::",
            stringify!(orign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtr1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_2vct_fmt),
            "::",
            stringify!(vtr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtr2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_2vct_fmt),
            "::",
            stringify!(vtr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_2vct_fmt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBTWP_2VCT_FMT = idbtwp_2vct_fmt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtwp_pjct_fmt {
    pub orign: [f64; 3usize],
    pub i: f64,
    pub j: f64,
    pub k: f64,
    pub reserve: [::std::os::raw::c_long; 24usize],
}
#[test]
fn bindgen_test_layout_idbtwp_pjct_fmt() {
    const UNINIT: ::std::mem::MaybeUninit<idbtwp_pjct_fmt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtwp_pjct_fmt>(),
        240usize,
        concat!("Size of: ", stringify!(idbtwp_pjct_fmt))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtwp_pjct_fmt>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtwp_pjct_fmt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_pjct_fmt),
            "::",
            stringify!(orign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_pjct_fmt),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_pjct_fmt),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_pjct_fmt),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtwp_pjct_fmt),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBTWP_PJCT_FMT = idbtwp_pjct_fmt;
#[repr(C)]
#[derive(Copy, Clone)]
pub union idbviewgrp {
    pub euler: IDBTWP_EULER_FMT,
    pub rpy: IDBTWP_RPY_FMT,
    pub p3: IDBTWP_3P_FMT,
    pub vct2: IDBTWP_2VCT_FMT,
    pub pjct: IDBTWP_PJCT_FMT,
}
#[test]
fn bindgen_test_layout_idbviewgrp() {
    const UNINIT: ::std::mem::MaybeUninit<idbviewgrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbviewgrp>(),
        240usize,
        concat!("Size of: ", stringify!(idbviewgrp))
    );
    assert_eq!(
        ::std::mem::align_of::<idbviewgrp>(),
        8usize,
        concat!("Alignment of ", stringify!(idbviewgrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).euler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbviewgrp),
            "::",
            stringify!(euler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rpy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbviewgrp),
            "::",
            stringify!(rpy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbviewgrp),
            "::",
            stringify!(p3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vct2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbviewgrp),
            "::",
            stringify!(vct2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pjct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbviewgrp),
            "::",
            stringify!(pjct)
        )
    );
}
pub type IDBTWPFORM = idbviewgrp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbftrmtx {
    pub orgn: [f64; 3usize],
    pub rot: [[f64; 3usize]; 3usize],
}
#[test]
fn bindgen_test_layout_odbftrmtx() {
    const UNINIT: ::std::mem::MaybeUninit<odbftrmtx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbftrmtx>(),
        96usize,
        concat!("Size of: ", stringify!(odbftrmtx))
    );
    assert_eq!(
        ::std::mem::align_of::<odbftrmtx>(),
        8usize,
        concat!("Alignment of ", stringify!(odbftrmtx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orgn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbftrmtx),
            "::",
            stringify!(orgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbftrmtx),
            "::",
            stringify!(rot)
        )
    );
}
pub type ODBFTRMTX = odbftrmtx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _odbmcshead {
    pub layout: ::std::os::raw::c_char,
    pub string1: [::std::os::raw::c_char; 51usize],
    pub string2: [::std::os::raw::c_char; 51usize],
}
#[test]
fn bindgen_test_layout__odbmcshead() {
    const UNINIT: ::std::mem::MaybeUninit<_odbmcshead> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_odbmcshead>(),
        103usize,
        concat!("Size of: ", stringify!(_odbmcshead))
    );
    assert_eq!(
        ::std::mem::align_of::<_odbmcshead>(),
        1usize,
        concat!("Alignment of ", stringify!(_odbmcshead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbmcshead),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbmcshead),
            "::",
            stringify!(string1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_odbmcshead),
            "::",
            stringify!(string2)
        )
    );
}
pub type ODBMCSHEAD = _odbmcshead;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsfsgalm {
    pub alm_type: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsfsgalm() {
    const UNINIT: ::std::mem::MaybeUninit<odbsfsgalm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsfsgalm>(),
        4usize,
        concat!("Size of: ", stringify!(odbsfsgalm))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsfsgalm>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsfsgalm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalm),
            "::",
            stringify!(alm_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalm),
            "::",
            stringify!(alm_no)
        )
    );
}
pub type ODBSFSGALM = odbsfsgalm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsfsgalmtime {
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub date: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsfsgalmtime() {
    const UNINIT: ::std::mem::MaybeUninit<odbsfsgalmtime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsfsgalmtime>(),
        12usize,
        concat!("Size of: ", stringify!(odbsfsgalmtime))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsfsgalmtime>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsfsgalmtime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalmtime),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalmtime),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalmtime),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalmtime),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalmtime),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgalmtime),
            "::",
            stringify!(second)
        )
    );
}
pub type ODBSFSGALMTIME = odbsfsgalmtime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsfsgloginf {
    pub signal_num: ::std::os::raw::c_short,
    pub sig_his_period: ::std::os::raw::c_short,
    pub sig_his_count: ::std::os::raw::c_short,
    pub sig_his_after: ::std::os::raw::c_short,
    pub alm_detect_time: [::std::os::raw::c_short; 3usize],
    pub dummy: ::std::os::raw::c_short,
    pub sfsg_alm: ODBSFSGALM,
    pub sfsg_alm_time: ODBSFSGALMTIME,
}
#[test]
fn bindgen_test_layout_odbsfsgloginf() {
    const UNINIT: ::std::mem::MaybeUninit<odbsfsgloginf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsfsgloginf>(),
        32usize,
        concat!("Size of: ", stringify!(odbsfsgloginf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsfsgloginf>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsfsgloginf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(signal_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_his_period) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(sig_his_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_his_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(sig_his_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_his_after) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(sig_his_after)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_detect_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(alm_detect_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfsg_alm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(sfsg_alm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfsg_alm_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgloginf),
            "::",
            stringify!(sfsg_alm_time)
        )
    );
}
pub type ODBSFSGLOGINF = odbsfsgloginf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsfsgsiginf {
    pub unittype: ::std::os::raw::c_long,
    pub number: ::std::os::raw::c_long,
    pub adr_type: ::std::os::raw::c_short,
    pub bit: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbsfsgsiginf() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsfsgsiginf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsfsgsiginf>(),
        24usize,
        concat!("Size of: ", stringify!(iodbsfsgsiginf))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsfsgsiginf>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsfsgsiginf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unittype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsiginf),
            "::",
            stringify!(unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsiginf),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adr_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsiginf),
            "::",
            stringify!(adr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsiginf),
            "::",
            stringify!(bit)
        )
    );
}
pub type IODBSFSGSIGINF = iodbsfsgsiginf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsfsgsiginfex {
    pub sfsg_siginf: IODBSFSGSIGINF,
    pub select: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsfsgsiginfex() {
    const UNINIT: ::std::mem::MaybeUninit<odbsfsgsiginfex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsfsgsiginfex>(),
        32usize,
        concat!("Size of: ", stringify!(odbsfsgsiginfex))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsfsgsiginfex>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsfsgsiginfex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfsg_siginf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgsiginfex),
            "::",
            stringify!(sfsg_siginf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).select) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgsiginfex),
            "::",
            stringify!(select)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgsiginfex),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBSFSGSIGINFEX = odbsfsgsiginfex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsfsgsighis {
    pub sno_sig: ::std::os::raw::c_short,
    pub len_sig: ::std::os::raw::c_short,
    pub sno_sig_his: ::std::os::raw::c_short,
    pub len_sig_his: ::std::os::raw::c_short,
    pub extract: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbsfsgsighis() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsfsgsighis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsfsgsighis>(),
        10usize,
        concat!("Size of: ", stringify!(iodbsfsgsighis))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsfsgsighis>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsfsgsighis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sno_sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsighis),
            "::",
            stringify!(sno_sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_sig) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsighis),
            "::",
            stringify!(len_sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sno_sig_his) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsighis),
            "::",
            stringify!(sno_sig_his)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_sig_his) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsighis),
            "::",
            stringify!(len_sig_his)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extract) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgsighis),
            "::",
            stringify!(extract)
        )
    );
}
pub type IODBSFSGSIGHIS = iodbsfsgsighis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsfsgsignalnum {
    pub signal_num_default: ::std::os::raw::c_short,
    pub signal_num_extract: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbsfsgsignalnum() {
    const UNINIT: ::std::mem::MaybeUninit<odbsfsgsignalnum> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsfsgsignalnum>(),
        4usize,
        concat!("Size of: ", stringify!(odbsfsgsignalnum))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsfsgsignalnum>(),
        2usize,
        concat!("Alignment of ", stringify!(odbsfsgsignalnum))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_num_default) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgsignalnum),
            "::",
            stringify!(signal_num_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_num_extract) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsfsgsignalnum),
            "::",
            stringify!(signal_num_extract)
        )
    );
}
pub type ODBSFSGSIGNALNUM = odbsfsgsignalnum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsfsgdspstat {
    pub extract: ::std::os::raw::c_short,
    pub symbol: ::std::os::raw::c_short,
    pub extend: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iodbsfsgdspstat() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsfsgdspstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsfsgdspstat>(),
        6usize,
        concat!("Size of: ", stringify!(iodbsfsgdspstat))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsfsgdspstat>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbsfsgdspstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extract) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgdspstat),
            "::",
            stringify!(extract)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgdspstat),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extend) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsfsgdspstat),
            "::",
            stringify!(extend)
        )
    );
}
pub type IODBSFSGDSPSTAT = iodbsfsgdspstat;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbpunch1_ex {
    pub number: ::std::os::raw::c_ushort,
    pub attr: ::std::os::raw::c_ushort,
    pub u: iodbpunch1_ex__bindgen_ty_1,
    pub decimal: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbpunch1_ex__bindgen_ty_1 {
    pub u2data: ::std::os::raw::c_ushort,
    pub s2data: ::std::os::raw::c_short,
    pub u4data: ::std::os::raw::c_ulong,
    pub s4data: ::std::os::raw::c_long,
    pub u8data: [::std::os::raw::c_ulong; 2usize],
}
#[test]
fn bindgen_test_layout_iodbpunch1_ex__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpunch1_ex__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpunch1_ex__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbpunch1_ex__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpunch1_ex__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpunch1_ex__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex__bindgen_ty_1),
            "::",
            stringify!(u2data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex__bindgen_ty_1),
            "::",
            stringify!(s2data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u4data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex__bindgen_ty_1),
            "::",
            stringify!(u4data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex__bindgen_ty_1),
            "::",
            stringify!(s4data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex__bindgen_ty_1),
            "::",
            stringify!(u8data)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpunch1_ex() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpunch1_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpunch1_ex>(),
        32usize,
        concat!("Size of: ", stringify!(iodbpunch1_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpunch1_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpunch1_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimal) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex),
            "::",
            stringify!(decimal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch1_ex),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBPUNCH1_EX = iodbpunch1_ex;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbpunch2_ex {
    pub number: ::std::os::raw::c_ulong,
    pub attr: ::std::os::raw::c_ushort,
    pub u: iodbpunch2_ex__bindgen_ty_1,
    pub decimal: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbpunch2_ex__bindgen_ty_1 {
    pub u2data: ::std::os::raw::c_ushort,
    pub s2data: ::std::os::raw::c_short,
    pub u4data: ::std::os::raw::c_ulong,
    pub s4data: ::std::os::raw::c_long,
    pub u8data: [::std::os::raw::c_ulong; 2usize],
}
#[test]
fn bindgen_test_layout_iodbpunch2_ex__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpunch2_ex__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpunch2_ex__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iodbpunch2_ex__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpunch2_ex__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpunch2_ex__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex__bindgen_ty_1),
            "::",
            stringify!(u2data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex__bindgen_ty_1),
            "::",
            stringify!(s2data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u4data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex__bindgen_ty_1),
            "::",
            stringify!(u4data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex__bindgen_ty_1),
            "::",
            stringify!(s4data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex__bindgen_ty_1),
            "::",
            stringify!(u8data)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbpunch2_ex() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpunch2_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpunch2_ex>(),
        40usize,
        concat!("Size of: ", stringify!(iodbpunch2_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpunch2_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpunch2_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex),
            "::",
            stringify!(decimal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpunch2_ex),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBPUNCH2_EX = iodbpunch2_ex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbmmscrninf {
    pub scrn_id: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_odbmmscrninf() {
    const UNINIT: ::std::mem::MaybeUninit<odbmmscrninf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbmmscrninf>(),
        8usize,
        concat!("Size of: ", stringify!(odbmmscrninf))
    );
    assert_eq!(
        ::std::mem::align_of::<odbmmscrninf>(),
        8usize,
        concat!("Alignment of ", stringify!(odbmmscrninf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrn_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbmmscrninf),
            "::",
            stringify!(scrn_id)
        )
    );
}
pub type ODBMMSCRNINF = odbmmscrninf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmmiconcstmstring {
    pub scrninf: ODBMMSCRNINF,
    pub string: [::std::os::raw::c_char; 13usize],
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_iodbmmiconcstmstring() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmmiconcstmstring> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmmiconcstmstring>(),
        24usize,
        concat!("Size of: ", stringify!(iodbmmiconcstmstring))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmmiconcstmstring>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmmiconcstmstring))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrninf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmiconcstmstring),
            "::",
            stringify!(scrninf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmiconcstmstring),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmiconcstmstring),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBMMICONCSTMSTRING = iodbmmiconcstmstring;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmmctgrycstmstring {
    pub string: [::std::os::raw::c_char; 13usize],
    pub reserve: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_iodbmmctgrycstmstring() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmmctgrycstmstring> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmmctgrycstmstring>(),
        16usize,
        concat!("Size of: ", stringify!(iodbmmctgrycstmstring))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmmctgrycstmstring>(),
        1usize,
        concat!("Alignment of ", stringify!(iodbmmctgrycstmstring))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmctgrycstmstring),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmctgrycstmstring),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBMMCTGRYCSTMSTRING = iodbmmctgrycstmstring;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmmmcscrndefdat {
    pub scrninf: ODBMMSCRNINF,
    pub icn_id: ::std::os::raw::c_long,
    pub msg_id: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbmmmcscrndefdat() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmmmcscrndefdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmmmcscrndefdat>(),
        24usize,
        concat!("Size of: ", stringify!(iodbmmmcscrndefdat))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmmmcscrndefdat>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmmmcscrndefdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrninf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmmcscrndefdat),
            "::",
            stringify!(scrninf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icn_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmmcscrndefdat),
            "::",
            stringify!(icn_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmmcscrndefdat),
            "::",
            stringify!(msg_id)
        )
    );
}
pub type IODBMMMCSCRNDEFDAT = iodbmmmcscrndefdat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbmmmcctgrydefdat {
    pub cmsg_id: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbmmmcctgrydefdat() {
    const UNINIT: ::std::mem::MaybeUninit<iodbmmmcctgrydefdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbmmmcctgrydefdat>(),
        8usize,
        concat!("Size of: ", stringify!(iodbmmmcctgrydefdat))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbmmmcctgrydefdat>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbmmmcctgrydefdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbmmmcctgrydefdat),
            "::",
            stringify!(cmsg_id)
        )
    );
}
pub type IODBMMMCCTGRYDEFDAT = iodbmmmcctgrydefdat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbedge2 {
    pub slct: ::std::os::raw::c_short,
    pub power: ::std::os::raw::c_short,
    pub freq: ::std::os::raw::c_short,
    pub duty: ::std::os::raw::c_short,
    pub g_press: ::std::os::raw::c_short,
    pub g_kind: ::std::os::raw::c_short,
    pub pier_t: ::std::os::raw::c_long,
    pub angle: ::std::os::raw::c_long,
    pub gap: ::std::os::raw::c_long,
    pub r_len: ::std::os::raw::c_long,
    pub r_feed: ::std::os::raw::c_long,
    pub r_freq: ::std::os::raw::c_short,
    pub r_duty: ::std::os::raw::c_short,
    pub gap_axis: ::std::os::raw::c_char,
    pub angle_dec: ::std::os::raw::c_char,
    pub gap_dec: ::std::os::raw::c_char,
    pub r_len_dec: ::std::os::raw::c_char,
    pub r_feed_dec: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub pb_power: ::std::os::raw::c_short,
    pub reserves: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_iodbedge2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbedge2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbedge2>(),
        72usize,
        concat!("Size of: ", stringify!(iodbedge2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbedge2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbedge2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_press) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(g_press)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_kind) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(g_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pier_t) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(pier_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(gap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(r_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_feed) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(r_feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_freq) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(r_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_duty) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(r_duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_axis) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(gap_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_dec) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(angle_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_dec) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(gap_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_len_dec) as usize - ptr as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(r_len_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_feed_dec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(r_feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pb_power) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(pb_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbedge2),
            "::",
            stringify!(reserves)
        )
    );
}
pub type IODBEDGE2 = iodbedge2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbpwrctl {
    pub slct: ::std::os::raw::c_short,
    pub power_min: ::std::os::raw::c_short,
    pub pwr_sp_zr: ::std::os::raw::c_short,
    pub freq_min: ::std::os::raw::c_short,
    pub freq_sp_zr: ::std::os::raw::c_short,
    pub duty_min: ::std::os::raw::c_short,
    pub duty_sp_zr: ::std::os::raw::c_short,
    pub feed_r_dec: ::std::os::raw::c_char,
    pub reserve: ::std::os::raw::c_char,
    pub feed_r: ::std::os::raw::c_long,
    pub ag_press_min: ::std::os::raw::c_short,
    pub ag_press_sp_zr: ::std::os::raw::c_short,
    pub pb_power_min: ::std::os::raw::c_short,
    pub pb_pwr_sp_zr: ::std::os::raw::c_short,
    pub reserves: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_iodbpwrctl() {
    const UNINIT: ::std::mem::MaybeUninit<iodbpwrctl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbpwrctl>(),
        40usize,
        concat!("Size of: ", stringify!(iodbpwrctl))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbpwrctl>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbpwrctl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_min) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(power_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwr_sp_zr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(pwr_sp_zr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq_min) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(freq_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq_sp_zr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(freq_sp_zr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty_min) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(duty_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duty_sp_zr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(duty_sp_zr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_r_dec) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(feed_r_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feed_r) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(feed_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ag_press_min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(ag_press_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ag_press_sp_zr) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(ag_press_sp_zr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pb_power_min) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(pb_power_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pb_pwr_sp_zr) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(pb_pwr_sp_zr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbpwrctl),
            "::",
            stringify!(reserves)
        )
    );
}
pub type IODBPWRCTL = iodbpwrctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbdsplc {
    pub slct: ::std::os::raw::c_short,
    pub dsplc: ::std::os::raw::c_long,
    pub dsplc_dec: ::std::os::raw::c_short,
    pub gap_ix: ::std::os::raw::c_char,
    pub reserves: [::std::os::raw::c_short; 4usize],
}
#[test]
fn bindgen_test_layout_iodbdsplc() {
    const UNINIT: ::std::mem::MaybeUninit<iodbdsplc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbdsplc>(),
        32usize,
        concat!("Size of: ", stringify!(iodbdsplc))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbdsplc>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbdsplc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsplc),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsplc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsplc),
            "::",
            stringify!(dsplc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsplc_dec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsplc),
            "::",
            stringify!(dsplc_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gap_ix) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsplc),
            "::",
            stringify!(gap_ix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserves) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbdsplc),
            "::",
            stringify!(reserves)
        )
    );
}
pub type IODBDSPLC = iodbdsplc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblstate {
    pub cmd_feed: ::std::os::raw::c_long,
    pub act_feed: ::std::os::raw::c_long,
    pub cmd_power: ::std::os::raw::c_short,
    pub cmd_freq: ::std::os::raw::c_short,
    pub cmd_duty: ::std::os::raw::c_short,
    pub beam: ::std::os::raw::c_char,
    pub beam_lock: ::std::os::raw::c_char,
    pub cw_mode: ::std::os::raw::c_char,
    pub pulse_mode: ::std::os::raw::c_char,
    pub cmd_feed_dec: ::std::os::raw::c_char,
    pub act_feed_dec: ::std::os::raw::c_char,
    pub reserve: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_odblstate() {
    const UNINIT: ::std::mem::MaybeUninit<odblstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblstate>(),
        40usize,
        concat!("Size of: ", stringify!(odblstate))
    );
    assert_eq!(
        ::std::mem::align_of::<odblstate>(),
        8usize,
        concat!("Alignment of ", stringify!(odblstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_feed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(cmd_feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_feed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(act_feed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_power) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(cmd_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_freq) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(cmd_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_duty) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(cmd_duty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beam) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(beam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beam_lock) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(beam_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cw_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(cw_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulse_mode) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(pulse_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_feed_dec) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(cmd_feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).act_feed_dec) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(act_feed_dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odblstate),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBLSTATE = odblstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblpwofs {
    pub pwrofs_set: ::std::os::raw::c_short,
    pub pwrofs_coef: ::std::os::raw::c_short,
    pub pwrofs_upper: ::std::os::raw::c_short,
    pub pwrofs_max: ::std::os::raw::c_short,
    pub pwrofs_min: ::std::os::raw::c_short,
    pub pwrinofs_coef: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_odblpwofs() {
    const UNINIT: ::std::mem::MaybeUninit<odblpwofs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblpwofs>(),
        20usize,
        concat!("Size of: ", stringify!(odblpwofs))
    );
    assert_eq!(
        ::std::mem::align_of::<odblpwofs>(),
        2usize,
        concat!("Alignment of ", stringify!(odblpwofs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwrofs_set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(pwrofs_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwrofs_coef) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(pwrofs_coef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwrofs_upper) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(pwrofs_upper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwrofs_max) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(pwrofs_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwrofs_min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(pwrofs_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pwrinofs_coef) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(pwrinofs_coef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odblpwofs),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBLPWOFS = odblpwofs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idblswork {
    pub slct: ::std::os::raw::c_short,
    pub skeyinf: ::std::os::raw::c_short,
    pub reserve: [::std::os::raw::c_short; 14usize],
}
#[test]
fn bindgen_test_layout_idblswork() {
    const UNINIT: ::std::mem::MaybeUninit<idblswork> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idblswork>(),
        32usize,
        concat!("Size of: ", stringify!(idblswork))
    );
    assert_eq!(
        ::std::mem::align_of::<idblswork>(),
        2usize,
        concat!("Alignment of ", stringify!(idblswork))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idblswork),
            "::",
            stringify!(slct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skeyinf) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(idblswork),
            "::",
            stringify!(skeyinf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(idblswork),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBLSWORK = idblswork;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblalmhis {
    pub s_no: ::std::os::raw::c_ushort,
    pub e_no: ::std::os::raw::c_ushort,
    pub alm_his: [odblalmhis__bindgen_ty_1; 50usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odblalmhis__bindgen_ty_1 {
    pub lalm_wrg: ::std::os::raw::c_short,
    pub alm_grp: ::std::os::raw::c_short,
    pub alm_wrg_no: ::std::os::raw::c_short,
    pub year: ::std::os::raw::c_short,
    pub month: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub minute: ::std::os::raw::c_short,
    pub second: ::std::os::raw::c_short,
    pub len_msg: ::std::os::raw::c_short,
    pub alm_msg: [::std::os::raw::c_char; 64usize],
    pub reserve: [::std::os::raw::c_short; 4usize],
}
#[test]
fn bindgen_test_layout_odblalmhis__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odblalmhis__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblalmhis__bindgen_ty_1>(),
        92usize,
        concat!("Size of: ", stringify!(odblalmhis__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odblalmhis__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odblalmhis__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lalm_wrg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(lalm_wrg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_grp) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(alm_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_wrg_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(alm_wrg_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len_msg) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(len_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_msg) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(alm_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis__bindgen_ty_1),
            "::",
            stringify!(reserve)
        )
    );
}
#[test]
fn bindgen_test_layout_odblalmhis() {
    const UNINIT: ::std::mem::MaybeUninit<odblalmhis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odblalmhis>(),
        4604usize,
        concat!("Size of: ", stringify!(odblalmhis))
    );
    assert_eq!(
        ::std::mem::align_of::<odblalmhis>(),
        2usize,
        concat!("Alignment of ", stringify!(odblalmhis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis),
            "::",
            stringify!(s_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_no) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis),
            "::",
            stringify!(e_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_his) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odblalmhis),
            "::",
            stringify!(alm_his)
        )
    );
}
pub type ODBLALMHIS = odblalmhis;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbplsdata {
    pub pulse_type: ::std::os::raw::c_short,
    pub channel_state: ::std::os::raw::c_short,
    pub reserve1: ::std::os::raw::c_short,
    pub reserve2: ::std::os::raw::c_short,
    pub alarm: [::std::os::raw::c_short; 4usize],
    pub cmd_val: [::std::os::raw::c_short; 4usize],
    pub reserve3: [::std::os::raw::c_short; 4usize],
    pub total_val: [::std::os::raw::c_long; 4usize],
    pub reserve4: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_odbplsdata() {
    const UNINIT: ::std::mem::MaybeUninit<odbplsdata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbplsdata>(),
        96usize,
        concat!("Size of: ", stringify!(odbplsdata))
    );
    assert_eq!(
        ::std::mem::align_of::<odbplsdata>(),
        8usize,
        concat!("Alignment of ", stringify!(odbplsdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulse_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(pulse_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_state) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(channel_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(reserve1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(reserve2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(cmd_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(reserve3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_val) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(total_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve4) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbplsdata),
            "::",
            stringify!(reserve4)
        )
    );
}
pub type ODBPLSDATA = odbplsdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbuvmcrpt2 {
    pub prog_name: [::std::os::raw::c_char; 248usize],
    pub blk_no: ::std::os::raw::c_long,
    pub uvblk_no: ::std::os::raw::c_long,
    pub mult_piece_no: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_short; 2usize],
}
#[test]
fn bindgen_test_layout_odbuvmcrpt2() {
    const UNINIT: ::std::mem::MaybeUninit<odbuvmcrpt2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbuvmcrpt2>(),
        280usize,
        concat!("Size of: ", stringify!(odbuvmcrpt2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbuvmcrpt2>(),
        8usize,
        concat!("Alignment of ", stringify!(odbuvmcrpt2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prog_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbuvmcrpt2),
            "::",
            stringify!(prog_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk_no) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(odbuvmcrpt2),
            "::",
            stringify!(blk_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uvblk_no) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(odbuvmcrpt2),
            "::",
            stringify!(uvblk_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mult_piece_no) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(odbuvmcrpt2),
            "::",
            stringify!(mult_piece_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(odbuvmcrpt2),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBUVMCRPT2 = odbuvmcrpt2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbhmprogstat {
    pub run: ::std::os::raw::c_short,
    pub disp: ::std::os::raw::c_short,
    pub alm_no: ::std::os::raw::c_short,
    pub reserve: ::std::os::raw::c_short,
    pub prog_no: ::std::os::raw::c_long,
    pub block_no: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbhmprogstat() {
    const UNINIT: ::std::mem::MaybeUninit<odbhmprogstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbhmprogstat>(),
        24usize,
        concat!("Size of: ", stringify!(odbhmprogstat))
    );
    assert_eq!(
        ::std::mem::align_of::<odbhmprogstat>(),
        8usize,
        concat!("Alignment of ", stringify!(odbhmprogstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhmprogstat),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disp) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhmprogstat),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alm_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhmprogstat),
            "::",
            stringify!(alm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhmprogstat),
            "::",
            stringify!(reserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prog_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhmprogstat),
            "::",
            stringify!(prog_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_no) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbhmprogstat),
            "::",
            stringify!(block_no)
        )
    );
}
pub type ODBHMPROGSTAT = odbhmprogstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtpaprg {
    pub format_version: ::std::os::raw::c_short,
    pub func_version: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_long,
    pub create: odbtpaprg__bindgen_ty_1,
    pub edit: odbtpaprg__bindgen_ty_2,
    pub convert: odbtpaprg__bindgen_ty_3,
    pub attr: ::std::os::raw::c_ulong,
    pub name_copy: [::std::os::raw::c_char; 36usize],
    pub prg_name: [::std::os::raw::c_char; 36usize],
    pub comment: [::std::os::raw::c_char; 20usize],
    pub axis: ::std::os::raw::c_ulong,
    pub out_nc_prg: [::std::os::raw::c_char; 36usize],
    pub reserve: [::std::os::raw::c_long; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtpaprg__bindgen_ty_1 {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtpaprg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbtpaprg__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtpaprg__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(odbtpaprg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtpaprg__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtpaprg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_1),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_1),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_1),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_1),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_1),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_1),
            "::",
            stringify!(sec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtpaprg__bindgen_ty_2 {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtpaprg__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<odbtpaprg__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtpaprg__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(odbtpaprg__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtpaprg__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtpaprg__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_2),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_2),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_2),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_2),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_2),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_2),
            "::",
            stringify!(sec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtpaprg__bindgen_ty_3 {
    pub year: ::std::os::raw::c_short,
    pub mon: ::std::os::raw::c_short,
    pub day: ::std::os::raw::c_short,
    pub hour: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub sec: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtpaprg__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<odbtpaprg__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtpaprg__bindgen_ty_3>(),
        12usize,
        concat!("Size of: ", stringify!(odbtpaprg__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtpaprg__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtpaprg__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_3),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_3),
            "::",
            stringify!(mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_3),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_3),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_3),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg__bindgen_ty_3),
            "::",
            stringify!(sec)
        )
    );
}
#[test]
fn bindgen_test_layout_odbtpaprg() {
    const UNINIT: ::std::mem::MaybeUninit<odbtpaprg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtpaprg>(),
        224usize,
        concat!("Size of: ", stringify!(odbtpaprg))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtpaprg>(),
        8usize,
        concat!("Alignment of ", stringify!(odbtpaprg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(format_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(func_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convert) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(convert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_copy) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(name_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_name) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_nc_prg) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(out_nc_prg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtpaprg),
            "::",
            stringify!(reserve)
        )
    );
}
pub type ODBTPAPRG = odbtpaprg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idbtpinfo {
    pub prg_name: [::std::os::raw::c_char; 36usize],
    pub comment: [::std::os::raw::c_char; 20usize],
    pub axis: ::std::os::raw::c_ulong,
    pub out_nc_prg: [::std::os::raw::c_char; 36usize],
    pub reserve: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_idbtpinfo() {
    const UNINIT: ::std::mem::MaybeUninit<idbtpinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<idbtpinfo>(),
        120usize,
        concat!("Size of: ", stringify!(idbtpinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<idbtpinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(idbtpinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtpinfo),
            "::",
            stringify!(prg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtpinfo),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtpinfo),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_nc_prg) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtpinfo),
            "::",
            stringify!(out_nc_prg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(idbtpinfo),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IDBTPINFO = idbtpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tprogeditcmd {
    pub cmd_num: ::std::os::raw::c_char,
    pub cmd: [::std::os::raw::c_char; 31usize],
    pub word_num: ::std::os::raw::c_char,
    pub word: [::std::os::raw::c_char; 31usize],
}
#[test]
fn bindgen_test_layout_tprogeditcmd() {
    const UNINIT: ::std::mem::MaybeUninit<tprogeditcmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tprogeditcmd>(),
        64usize,
        concat!("Size of: ", stringify!(tprogeditcmd))
    );
    assert_eq!(
        ::std::mem::align_of::<tprogeditcmd>(),
        1usize,
        concat!("Alignment of ", stringify!(tprogeditcmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogeditcmd),
            "::",
            stringify!(cmd_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogeditcmd),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_num) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogeditcmd),
            "::",
            stringify!(word_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogeditcmd),
            "::",
            stringify!(word)
        )
    );
}
pub type ODBTPEDTCMD = tprogeditcmd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tprogcmd {
    pub cmd_id: ::std::os::raw::c_long,
    pub integer: [::std::os::raw::c_long; 4usize],
    pub val: [tprogcmd__bindgen_ty_1; 4usize],
    pub text: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tprogcmd__bindgen_ty_1 {
    pub val: ::std::os::raw::c_long,
    pub dec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_tprogcmd__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<tprogcmd__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tprogcmd__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(tprogcmd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tprogcmd__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(tprogcmd__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogcmd__bindgen_ty_1),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogcmd__bindgen_ty_1),
            "::",
            stringify!(dec)
        )
    );
}
#[test]
fn bindgen_test_layout_tprogcmd() {
    const UNINIT: ::std::mem::MaybeUninit<tprogcmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tprogcmd>(),
        168usize,
        concat!("Size of: ", stringify!(tprogcmd))
    );
    assert_eq!(
        ::std::mem::align_of::<tprogcmd>(),
        8usize,
        concat!("Alignment of ", stringify!(tprogcmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogcmd),
            "::",
            stringify!(cmd_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogcmd),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogcmd),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tprogcmd),
            "::",
            stringify!(text)
        )
    );
}
pub type IDBTPCMD = tprogcmd;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbsimuelm {
    pub type_: ::std::os::raw::c_char,
    pub rot_w: ::std::os::raw::c_char,
    pub type2: ::std::os::raw::c_char,
    pub plane: ::std::os::raw::c_char,
    pub tcode: ::std::os::raw::c_long,
    pub data: iodbsimuelm__bindgen_ty_1,
    pub dm_type: ::std::os::raw::c_char,
    pub cssc_md: ::std::os::raw::c_char,
    pub dm_x: [::std::os::raw::c_long; 3usize],
    pub dm_y: [::std::os::raw::c_long; 3usize],
    pub dm_z: [::std::os::raw::c_long; 3usize],
    pub cnt_x: [::std::os::raw::c_long; 3usize],
    pub cord: [::std::os::raw::c_long; 6usize],
    pub tlchng: ::std::os::raw::c_char,
    pub fd_type: ::std::os::raw::c_char,
    pub mcode: ::std::os::raw::c_long,
    pub dummy4: ::std::os::raw::c_short,
    pub cylndr: ::std::os::raw::c_long,
    pub aux: ::std::os::raw::c_long,
    pub dcode: ::std::os::raw::c_long,
    pub smax: ::std::os::raw::c_long,
    pub dwell: ::std::os::raw::c_long,
    pub fcode: ::std::os::raw::c_long,
    pub scode: ::std::os::raw::c_long,
    pub nummcd: ::std::os::raw::c_char,
    pub fcddec: ::std::os::raw::c_char,
    pub shift: ::std::os::raw::c_long,
    pub fbsft: ::std::os::raw::c_char,
    pub tilt: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbsimuelm__bindgen_ty_1 {
    pub rapid: iodbsimuelm__bindgen_ty_1__bindgen_ty_1,
    pub line: iodbsimuelm__bindgen_ty_1__bindgen_ty_2,
    pub arc: iodbsimuelm__bindgen_ty_1__bindgen_ty_3,
    pub thrd1: iodbsimuelm__bindgen_ty_1__bindgen_ty_4,
    pub thrd2: iodbsimuelm__bindgen_ty_1__bindgen_ty_5,
    pub dummy_d: iodbsimuelm__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm__bindgen_ty_1__bindgen_ty_1 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mv_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm__bindgen_ty_1__bindgen_ty_2 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_2>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mv_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm__bindgen_ty_1__bindgen_ty_3 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
    pub cnt_p: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_3>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(mv_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt_p) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(cnt_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm__bindgen_ty_1__bindgen_ty_4 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
    pub ptch: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_4>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(mv_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptch) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ptch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm__bindgen_ty_1__bindgen_ty_5 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
    pub ptch: ::std::os::raw::c_long,
    pub mv_p2: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_5>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(mv_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptch) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(ptch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(mv_p2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm__bindgen_ty_1__bindgen_ty_6 {
    pub mv_p: [::std::os::raw::c_long; 16usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_6>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(mv_p)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsimuelm__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(iodbsimuelm__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsimuelm__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rapid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1),
            "::",
            stringify!(rapid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1),
            "::",
            stringify!(arc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrd1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1),
            "::",
            stringify!(thrd1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrd2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1),
            "::",
            stringify!(thrd2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy_d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm__bindgen_ty_1),
            "::",
            stringify!(dummy_d)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsimuelm() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm>(),
        400usize,
        concat!("Size of: ", stringify!(iodbsimuelm))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsimuelm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot_w) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(rot_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(type2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(tcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_type) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dm_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cssc_md) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(cssc_md)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_x) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dm_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_y) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dm_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_z) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dm_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt_x) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(cnt_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cord) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(cord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlchng) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(tlchng)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_type) as usize - ptr as usize },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(fd_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy4) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dummy4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cylndr) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(cylndr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcode) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smax) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(smax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwell) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(dwell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcode) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(fcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scode) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(scode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nummcd) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(nummcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcddec) as usize - ptr as usize },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(fcddec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbsft) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(fbsft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tilt) as usize - ptr as usize },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm),
            "::",
            stringify!(tilt)
        )
    );
}
pub type IODBSIMUELM = iodbsimuelm;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbsimuelm2 {
    pub type_: ::std::os::raw::c_char,
    pub rot_w: ::std::os::raw::c_char,
    pub type2: ::std::os::raw::c_char,
    pub plane: ::std::os::raw::c_char,
    pub tcode: ::std::os::raw::c_long,
    pub data: iodbsimuelm2__bindgen_ty_1,
    pub dm_type: ::std::os::raw::c_char,
    pub cssc_md: ::std::os::raw::c_char,
    pub dm_x: [::std::os::raw::c_long; 3usize],
    pub dm_y: [::std::os::raw::c_long; 3usize],
    pub dm_z: [::std::os::raw::c_long; 3usize],
    pub cnt_x: [::std::os::raw::c_long; 3usize],
    pub cord: [::std::os::raw::c_long; 6usize],
    pub tlchng: ::std::os::raw::c_char,
    pub fd_type: ::std::os::raw::c_char,
    pub mcode: ::std::os::raw::c_long,
    pub dummy4: ::std::os::raw::c_short,
    pub cylndr: ::std::os::raw::c_long,
    pub aux: ::std::os::raw::c_long,
    pub dcode: ::std::os::raw::c_long,
    pub smax: ::std::os::raw::c_long,
    pub dwell: ::std::os::raw::c_long,
    pub fcode: ::std::os::raw::c_long,
    pub scode: ::std::os::raw::c_long,
    pub nummcd: ::std::os::raw::c_char,
    pub fcddec: ::std::os::raw::c_char,
    pub shift: ::std::os::raw::c_long,
    pub fbsft: ::std::os::raw::c_char,
    pub tilt: ::std::os::raw::c_char,
    pub dummy6: ::std::os::raw::c_short,
    pub mcode2: ::std::os::raw::c_long,
    pub mcode3: ::std::os::raw::c_long,
    pub mcode4: ::std::os::raw::c_long,
    pub mcode5: ::std::os::raw::c_long,
    pub reserve: [::std::os::raw::c_long; 10usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbsimuelm2__bindgen_ty_1 {
    pub rapid: iodbsimuelm2__bindgen_ty_1__bindgen_ty_1,
    pub line: iodbsimuelm2__bindgen_ty_1__bindgen_ty_2,
    pub arc: iodbsimuelm2__bindgen_ty_1__bindgen_ty_3,
    pub thrd1: iodbsimuelm2__bindgen_ty_1__bindgen_ty_4,
    pub thrd2: iodbsimuelm2__bindgen_ty_1__bindgen_ty_5,
    pub dummy_d: iodbsimuelm2__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm2__bindgen_ty_1__bindgen_ty_1 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mv_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm2__bindgen_ty_1__bindgen_ty_2 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_2>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mv_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm2__bindgen_ty_1__bindgen_ty_3 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
    pub cnt_p: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_3>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(mv_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt_p) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(cnt_p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm2__bindgen_ty_1__bindgen_ty_4 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
    pub ptch: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_4>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(mv_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptch) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ptch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm2__bindgen_ty_1__bindgen_ty_5 {
    pub mv_p: [::std::os::raw::c_long; 8usize],
    pub ptch: ::std::os::raw::c_long,
    pub mv_p2: [::std::os::raw::c_long; 2usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_5>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(mv_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptch) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(ptch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(mv_p2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbsimuelm2__bindgen_ty_1__bindgen_ty_6 {
    pub mv_p: [::std::os::raw::c_long; 16usize],
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_6>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mv_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(mv_p)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsimuelm2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(iodbsimuelm2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsimuelm2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rapid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1),
            "::",
            stringify!(rapid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1),
            "::",
            stringify!(arc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrd1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1),
            "::",
            stringify!(thrd1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrd2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1),
            "::",
            stringify!(thrd2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy_d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2__bindgen_ty_1),
            "::",
            stringify!(dummy_d)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbsimuelm2() {
    const UNINIT: ::std::mem::MaybeUninit<iodbsimuelm2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbsimuelm2>(),
        512usize,
        concat!("Size of: ", stringify!(iodbsimuelm2))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbsimuelm2>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbsimuelm2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rot_w) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(rot_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(type2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plane) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(plane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(tcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_type) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dm_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cssc_md) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(cssc_md)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_x) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dm_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_y) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dm_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dm_z) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dm_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt_x) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(cnt_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cord) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(cord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlchng) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(tlchng)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_type) as usize - ptr as usize },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(fd_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy4) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dummy4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cylndr) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(cylndr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcode) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smax) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(smax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwell) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dwell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcode) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(fcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scode) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(scode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nummcd) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(nummcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcddec) as usize - ptr as usize },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(fcddec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbsft) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(fbsft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tilt) as usize - ptr as usize },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(tilt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy6) as usize - ptr as usize },
        394usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(dummy6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode2) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(mcode2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode3) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(mcode3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode4) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(mcode4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode5) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(mcode5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserve) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbsimuelm2),
            "::",
            stringify!(reserve)
        )
    );
}
pub type IODBSIMUELM2 = iodbsimuelm2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtunreq {
    pub stat: [odbtunreq__bindgen_ty_1; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbtunreq__bindgen_ty_1 {
    pub status: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbtunreq__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbtunreq__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtunreq__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(odbtunreq__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtunreq__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtunreq__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtunreq__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtunreq__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_odbtunreq() {
    const UNINIT: ::std::mem::MaybeUninit<odbtunreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbtunreq>(),
        128usize,
        concat!("Size of: ", stringify!(odbtunreq))
    );
    assert_eq!(
        ::std::mem::align_of::<odbtunreq>(),
        2usize,
        concat!("Alignment of ", stringify!(odbtunreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbtunreq),
            "::",
            stringify!(stat)
        )
    );
}
pub type ODBTUNREQ = odbtunreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obdtunstat {
    pub stat: [obdtunstat__bindgen_ty_1; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obdtunstat__bindgen_ty_1 {
    pub status: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_obdtunstat__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<obdtunstat__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<obdtunstat__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(obdtunstat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<obdtunstat__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(obdtunstat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obdtunstat__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(obdtunstat__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_obdtunstat() {
    const UNINIT: ::std::mem::MaybeUninit<obdtunstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<obdtunstat>(),
        128usize,
        concat!("Size of: ", stringify!(obdtunstat))
    );
    assert_eq!(
        ::std::mem::align_of::<obdtunstat>(),
        2usize,
        concat!("Alignment of ", stringify!(obdtunstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obdtunstat),
            "::",
            stringify!(stat)
        )
    );
}
pub type ODBTUNSTAT = obdtunstat;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbrct_item {
    pub item_num: ::std::os::raw::c_ushort,
    pub type_: ::std::os::raw::c_uchar,
    pub axsp_num: ::std::os::raw::c_char,
    pub ptn_num: ::std::os::raw::c_char,
    pub dummy: ::std::os::raw::c_uchar,
    pub attr: ::std::os::raw::c_ushort,
    pub ptn: [iodbrct_item_data_info; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbrct_item_data_info {
    pub enable: ::std::os::raw::c_char,
    pub dummy2: [::std::os::raw::c_char; 3usize],
    pub attr2: ::std::os::raw::c_long,
    pub uParam: iodbrct_item_data_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbrct_item_data_info__bindgen_ty_1 {
    pub bdata: ::std::os::raw::c_char,
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALPRM,
    pub bdatas: [::std::os::raw::c_char; 32usize],
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_iodbrct_item_data_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrct_item_data_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrct_item_data_info__bindgen_ty_1>(),
        512usize,
        concat!(
            "Size of: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrct_item_data_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(bdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(bdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbrct_item_data_info() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrct_item_data_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrct_item_data_info>(),
        528usize,
        concat!("Size of: ", stringify!(iodbrct_item_data_info))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrct_item_data_info>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrct_item_data_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info),
            "::",
            stringify!(attr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uParam) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item_data_info),
            "::",
            stringify!(uParam)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbrct_item() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrct_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrct_item>(),
        3176usize,
        concat!("Size of: ", stringify!(iodbrct_item))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrct_item>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbrct_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(item_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axsp_num) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(axsp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptn_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(ptn_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_item),
            "::",
            stringify!(ptn)
        )
    );
}
pub type IODBRCT_ITEM = iodbrct_item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrct_cstmname {
    pub grp_num: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_ushort,
    pub grp_name: [::std::os::raw::c_char; 16usize],
    pub ptn_name: [[::std::os::raw::c_char; 16usize]; 3usize],
}
#[test]
fn bindgen_test_layout_iodbrct_cstmname() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrct_cstmname> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrct_cstmname>(),
        68usize,
        concat!("Size of: ", stringify!(iodbrct_cstmname))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrct_cstmname>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrct_cstmname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_cstmname),
            "::",
            stringify!(grp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_cstmname),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_cstmname),
            "::",
            stringify!(grp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptn_name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_cstmname),
            "::",
            stringify!(ptn_name)
        )
    );
}
pub type IODBRCT_CSTMNAME = iodbrct_cstmname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbrct_grpptn {
    pub grp_num: ::std::os::raw::c_ushort,
    pub ptn_num: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_iodbrct_grpptn() {
    const UNINIT: ::std::mem::MaybeUninit<iodbrct_grpptn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbrct_grpptn>(),
        4usize,
        concat!("Size of: ", stringify!(iodbrct_grpptn))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbrct_grpptn>(),
        2usize,
        concat!("Alignment of ", stringify!(iodbrct_grpptn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grp_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_grpptn),
            "::",
            stringify!(grp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptn_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbrct_grpptn),
            "::",
            stringify!(ptn_num)
        )
    );
}
pub type IODBRCT_GRPPTN = iodbrct_grpptn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbrct_slctptnname {
    pub sl_ptrn_no: ::std::os::raw::c_long,
    pub sl_nm_slct: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_odbrct_slctptnname() {
    const UNINIT: ::std::mem::MaybeUninit<odbrct_slctptnname> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbrct_slctptnname>(),
        16usize,
        concat!("Size of: ", stringify!(odbrct_slctptnname))
    );
    assert_eq!(
        ::std::mem::align_of::<odbrct_slctptnname>(),
        8usize,
        concat!("Alignment of ", stringify!(odbrct_slctptnname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_ptrn_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrct_slctptnname),
            "::",
            stringify!(sl_ptrn_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_nm_slct) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbrct_slctptnname),
            "::",
            stringify!(sl_nm_slct)
        )
    );
}
pub type ODBRCT_SLCTPTNNAME = odbrct_slctptnname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbpressure {
    pub cmd_val: ::std::os::raw::c_long,
    pub feedbak_val: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbpressure() {
    const UNINIT: ::std::mem::MaybeUninit<odbpressure> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbpressure>(),
        16usize,
        concat!("Size of: ", stringify!(odbpressure))
    );
    assert_eq!(
        ::std::mem::align_of::<odbpressure>(),
        8usize,
        concat!("Alignment of ", stringify!(odbpressure))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpressure),
            "::",
            stringify!(cmd_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feedbak_val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbpressure),
            "::",
            stringify!(feedbak_val)
        )
    );
}
pub type ODBPRESSURE = odbpressure;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbexpos {
    pub data: f64,
    pub dec: ::std::os::raw::c_long,
    pub digit: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_odbexpos() {
    const UNINIT: ::std::mem::MaybeUninit<odbexpos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbexpos>(),
        24usize,
        concat!("Size of: ", stringify!(odbexpos))
    );
    assert_eq!(
        ::std::mem::align_of::<odbexpos>(),
        8usize,
        concat!("Alignment of ", stringify!(odbexpos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexpos),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexpos),
            "::",
            stringify!(dec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbexpos),
            "::",
            stringify!(digit)
        )
    );
}
pub type ODBEXPOS = odbexpos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iodbwaitmcode {
    pub mcode: ::std::os::raw::c_long,
    pub pathnum: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iodbwaitmcode() {
    const UNINIT: ::std::mem::MaybeUninit<iodbwaitmcode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbwaitmcode>(),
        16usize,
        concat!("Size of: ", stringify!(iodbwaitmcode))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbwaitmcode>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbwaitmcode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwaitmcode),
            "::",
            stringify!(mcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pathnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbwaitmcode),
            "::",
            stringify!(pathnum)
        )
    );
}
pub type IODBWAITMCODE = iodbwaitmcode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curoverr {
    pub current: ::std::os::raw::c_ushort,
    pub minmum: ::std::os::raw::c_ushort,
    pub maximum: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_curoverr() {
    const UNINIT: ::std::mem::MaybeUninit<curoverr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<curoverr>(),
        8usize,
        concat!("Size of: ", stringify!(curoverr))
    );
    assert_eq!(
        ::std::mem::align_of::<curoverr>(),
        2usize,
        concat!("Alignment of ", stringify!(curoverr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curoverr),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minmum) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(curoverr),
            "::",
            stringify!(minmum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(curoverr),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(curoverr),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CUROVRR = curoverr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curload {
    pub current: ::std::os::raw::c_ushort,
    pub effect: ::std::os::raw::c_ushort,
    pub target: ::std::os::raw::c_ushort,
    pub irregular: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_curload() {
    const UNINIT: ::std::mem::MaybeUninit<curload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<curload>(),
        16usize,
        concat!("Size of: ", stringify!(curload))
    );
    assert_eq!(
        ::std::mem::align_of::<curload>(),
        8usize,
        concat!("Alignment of ", stringify!(curload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curload),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).effect) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(curload),
            "::",
            stringify!(effect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(curload),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irregular) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(curload),
            "::",
            stringify!(irregular)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curload),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CURLOAD = curload;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curtemp {
    pub current: ::std::os::raw::c_ushort,
    pub start: ::std::os::raw::c_ushort,
    pub end: ::std::os::raw::c_ushort,
    pub alarm: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_curtemp() {
    const UNINIT: ::std::mem::MaybeUninit<curtemp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<curtemp>(),
        16usize,
        concat!("Size of: ", stringify!(curtemp))
    );
    assert_eq!(
        ::std::mem::align_of::<curtemp>(),
        8usize,
        concat!("Alignment of ", stringify!(curtemp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curtemp),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(curtemp),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(curtemp),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(curtemp),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curtemp),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CURTEMP = curtemp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct currdtm {
    pub current: ::std::os::raw::c_ushort,
    pub threshold: ::std::os::raw::c_ushort,
    pub dummy: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_currdtm() {
    const UNINIT: ::std::mem::MaybeUninit<currdtm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<currdtm>(),
        16usize,
        concat!("Size of: ", stringify!(currdtm))
    );
    assert_eq!(
        ::std::mem::align_of::<currdtm>(),
        8usize,
        concat!("Alignment of ", stringify!(currdtm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(currdtm),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(currdtm),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(currdtm),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CURRDTM = currdtm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbsoccur {
    pub mode: ::std::os::raw::c_short,
    pub table: ::std::os::raw::c_short,
    pub dummy: ::std::os::raw::c_long,
    pub ovrr: CUROVRR,
    pub load: CURLOAD,
    pub temp: CURTEMP,
    pub rdtm: CURRDTM,
}
#[test]
fn bindgen_test_layout_odbsoccur() {
    const UNINIT: ::std::mem::MaybeUninit<odbsoccur> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbsoccur>(),
        72usize,
        concat!("Size of: ", stringify!(odbsoccur))
    );
    assert_eq!(
        ::std::mem::align_of::<odbsoccur>(),
        8usize,
        concat!("Alignment of ", stringify!(odbsoccur))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ovrr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(ovrr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(temp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdtm) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(odbsoccur),
            "::",
            stringify!(rdtm)
        )
    );
}
pub type ODBSOCCUR = odbsoccur;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soctlattr {
    pub prm_no: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_soctlattr() {
    const UNINIT: ::std::mem::MaybeUninit<soctlattr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<soctlattr>(),
        4usize,
        concat!("Size of: ", stringify!(soctlattr))
    );
    assert_eq!(
        ::std::mem::align_of::<soctlattr>(),
        2usize,
        concat!("Alignment of ", stringify!(soctlattr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prm_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soctlattr),
            "::",
            stringify!(prm_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(soctlattr),
            "::",
            stringify!(type_)
        )
    );
}
pub type ODBSOCTLATTR = soctlattr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct soctldat {
    pub u: soctldat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union soctldat__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALPRM,
}
#[test]
fn bindgen_test_layout_soctldat__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<soctldat__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<soctldat__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(soctldat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<soctldat__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(soctldat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soctldat__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soctldat__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soctldat__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soctldat__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
}
#[test]
fn bindgen_test_layout_soctldat() {
    const UNINIT: ::std::mem::MaybeUninit<soctldat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<soctldat>(),
        16usize,
        concat!("Size of: ", stringify!(soctldat))
    );
    assert_eq!(
        ::std::mem::align_of::<soctldat>(),
        8usize,
        concat!("Alignment of ", stringify!(soctldat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soctldat),
            "::",
            stringify!(u)
        )
    );
}
pub type IODBSOCTLDAT = soctldat;
extern "C" {
    pub fn cnc_machine3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_machine3_ex(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBAXIS_EX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_actf(arg1: ::std::os::raw::c_ushort, arg2: *mut ODBACT) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_absolute(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_machine(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_machine2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_relative(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_distance(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_distancem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_skip(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srvdelay(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_accdecdly(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddynamic(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddynamic2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDY2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddynamic3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDY3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddynamic3m(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDY3M,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_acts(arg1: ::std::os::raw::c_ushort, arg2: *mut ODBACT) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_acts2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBACT2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrelpos(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBWRR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_prstwkcd(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBWRA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmovrlap(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBOVL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmovrlapm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBOVLM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_canmovrlap(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspload(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBSPN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspmaxrpm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBSPN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspgear(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBSPN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_absolute2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_relative2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_distance2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setvrtclpos(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setthrdngpos(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdposition(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspeed(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBSPEED,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsvmeter(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBSVLOAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspmeter(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBSPLOAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhndintrpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBHND,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd5axmandt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB5AXMAN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd5axovrlap(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clr5axpls(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspcss(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBCSS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut PRGPNT,
        arg3: *mut PRGPNT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecptm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut PRGPNT,
        arg3: *mut PRGPNT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecprgnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdjogdrun(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBJOGDRUN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setfrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdaxisdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBAXDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_simulation(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBSIML,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspdlspeed(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdposfig(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBPOSFIG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdactspdl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnstart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_download(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cdownload(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnend2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnstart3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnstart3_f(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_download3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnend3(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnstart3m(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_download3m(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnend3m(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnstart4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_download4(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dwnend4(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fileread_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fileread(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fileread_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_filewrite_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_filewrite(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_filewrite_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_vrfstart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_verify(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cverify(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_vrfend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_vrfstart4(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_verify4(
        arg1: ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_vrfend4(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dncstart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dnc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cdnc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dncend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dncstart2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dnc2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dncend2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddncdgndt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBDNCDGN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddncdgndt2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBDNCDGN2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upload(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBUP,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cupload(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBUP,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upstart3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upstart3_f(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upload3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upend3(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upstart4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upload4(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upend4(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_save_maint(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clear_maint(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_buff(arg1: ::std::os::raw::c_ushort, arg2: *mut ODBBUF) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_search(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_search2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delall(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_delall(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delete(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delrange(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_ushort,
        arg6: *mut PRGDIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdproginfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBNC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprgnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPRO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exeprgname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBEXEPRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exeprgname2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exeprgname_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBEXEPRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dncprgname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBDNCPRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdseqnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSEQ,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_seqsrch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_seqsrch2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rewind(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdblkcount(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecprog2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecprog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBEXEPRGINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmdiprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmdiprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmdipntr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBMDIP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmdipntr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_newprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_copyprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_renameprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_condense(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mergeprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdactpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdactpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdprgname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdactpt_bgedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdmainpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdcallstack(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBNESTPDF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setactptopt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rduvactpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wractpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_wractpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_wractpt_bgedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogline(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogline2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrprogline(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delprogline(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_searchword(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_ulong,
        arg7: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_searchword2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_ulong,
        arg7: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_searchword(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: ::std::os::raw::c_ulong,
        arg7: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_searchword2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: ::std::os::raw::c_ulong,
        arg7: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_searchword_bgedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: ::std::os::raw::c_ulong,
        arg7: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_dssearch(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: ::std::os::raw::c_ulong,
        arg7: *mut ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_searchresult(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_searchresult2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_searchresult(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_searchresult2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_searchresult_bgedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_replaceword_all(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_char,
        arg7: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setpglock(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setpdf_pglock(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_resetpglock(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_resetpdf_pglock(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpglockstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_pglockstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ODBPRGNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setsumdt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_line(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_line2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_line_bgedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_execline(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpdf_line(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_delline(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpdf_char(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_delchar(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_replacechar(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_drive(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPDFDRV,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_inf(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBPDFINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_curdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpdf_curdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_subdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IDBPDFSDIR,
        arg4: *mut ODBPDFSDIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_alldir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IDBPDFADIR,
        arg4: *mut ODBPDFADIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_prginf(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBPDFPRG,
        arg3: *mut ODBPDFPRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprotect(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
        path: *mut ::std::os::raw::c_char,
        prtct: *mut ODBPRTCT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprotect2(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
        path: *mut ::std::os::raw::c_char,
        prtct: *mut ODBPRTCT2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpdf_subdirn(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ODBPDFNFIL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_add(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_add_bgedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_del(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rename(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdmain(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_slctmain(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_cond(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpdf_attr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut IDBPDFTDIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_copy(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_move(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_cpmv_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_cpmv_poll(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_cpmv_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_cpmv_restart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_file_cpmv_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_file_cpmv_poll(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_file_cpmv_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_file_cpmv_restart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_prog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_prog2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_prog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_prog_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_prog2_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_prog3_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_punch_prog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_punch_prog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_punch_prog3_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_punch_prog3_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_punch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_punch_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_pdf_punch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_pdf_punch(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_prog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_prog2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_prog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_prog_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_prog2_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_prog3_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_read_prog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_read_prog3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_read_prog3_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_read_prog3_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_read(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_read_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_pdf_read(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_pdf_read(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_read_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_read_poll(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_read_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_read_restart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stop_async_read_punch(h: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_verify_prog(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_verify_prog_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_data_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punch_data_end(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_data_punch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_data_punch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_data_read(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_data_read(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcdp_unmount(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcdp_mountchk(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcdp_mount(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcdp_update_entry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcdp_wractpt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdactpt_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBACTPTW,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wractpt_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_dncset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_dncset2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_dncread(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_mergeprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdembedf_inf(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBEMBEDFINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setpdf_pglockexec(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getsysfolder_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getexemacstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_relsmain(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBTOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofsr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBTO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtofsr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrtofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBZOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrzofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofsr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrzofsr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmsptype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBMSTP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmsptype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBMSTP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparam3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrparam3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparar(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparar3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrparas(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrparas3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_preset_prm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBBOOK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_validate_prm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cancel_prm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcncid(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBOPMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramstatus(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBSRAMSTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_validate_opt(
        arg1: ::std::os::raw::c_ushort,
        slct: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsetr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrsets(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparam_ext(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_async_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_end_async_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_async_busy_state(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddiag_ext(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpitchr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBPI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpitchr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpitchr2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpitchr2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_checkpitch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhipitchr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhipitchr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhipitchinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacro(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmacro(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacro2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacro3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBM3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmacro3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacror(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBMR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmacror(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBMR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacror2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacror2_name(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        pdb: *mut IODBMRN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacror3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        pdb: *mut IODBMRN3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacror4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        pdb: *mut IODBMRN4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmacror2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacro_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmacro_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacronum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacro(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ODBPM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpmacro(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacror(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut IODBPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpmacror(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacror2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpmacror2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacror_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpmacror_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofsinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTLINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofsinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTLINF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofsinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdholmes(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBHOLDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdenblinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcenblinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofsmes(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTLDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcenter(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlmsinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTLMSINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofsenbl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtofsms(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpitchinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacroinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBMVINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacrolclevel(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmacrolcval(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpitchblkinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBPITCHBLK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdvolc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBVOLC,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrvolc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBVOLC,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdvolccomp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBVOLCOMP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dvpunchvolc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBVOLCOMP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dvreadvolc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBVOLCOMP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrotvolc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut IODBROTVOLC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrotvolc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut IODBROTVOLC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrotvolc2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut IODBROTVOLC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacroinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacroinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMINF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacroinfo3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMINF3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmacvalflag(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMVALFLG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tofs_rnge(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDATRNG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_zofs_rnge(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDATRNG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wksft_rnge(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBDATRNG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhsprminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut HSPINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhsparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut HSPINFO,
        arg4: *mut HSPDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhsparamm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut HSPINFO,
        arg4: *mut HSPDATAM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrmofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlgeomsize(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLGS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtlgeomsize(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut IODBTLGS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlgeomsize_ext(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLGSEXT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtlgeomsize_ext(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut IODBTLGSEXT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlgeomsize_ext2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLGSEXT2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtlgeomsize_ext2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut IODBTLGSEXT2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrpid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBTLIFE1,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdngrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTLIFE2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdntool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBTLIFE3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlife(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBTLIFE3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcount(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBTLIFE3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd1length(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd2length(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd1radius(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd2radius(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_t1info(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_t2info(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_toolnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTLIFE4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoolrng(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBTR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoolgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcountr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBWRC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdusegrpid(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBUSEGR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmaxgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLFNO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmaxtool(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLFNO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdusetlno(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBTLUSE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd1tlifedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBTD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd2tlifedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBTD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr1tlifedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr2tlifedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrpinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBTGI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrpinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBTGI2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrpinfo3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBTGI3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrpinfo4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut IODBTGI4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrgrpinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTGI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrgrpinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTGI2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrgrpinfo3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTGI3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_deltlifegrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_instlifedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_deltlifedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrcntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrpid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ODBTLIFE5,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd1tlifedat2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut IODBTD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr1tlifedat2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTLINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlusegrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBUSEGRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLGRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtltool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLTOOL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoolchggrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcntover(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexchgtgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBEXGP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcnttype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBTLIFE3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtoolgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlife(arg1: ::std::os::raw::c_ushort, arg2: *mut IDBITD)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcount(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcnttype(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr1length(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr2length(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr1radius(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr2radius(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrt1info(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrt2info(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtoolnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBITD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_read_cexeinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut CEXEINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_regtool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLMNG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_regtool_f2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLMNG_F2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_deltool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLMNG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtool2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLM2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtool_f2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLMNG_F2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTLMNG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtool_f2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTLMNG_F2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtool2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBTLM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_regmagazine(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBTLMAG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delmagazine(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBTLMAG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmagazine(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBTLMAG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmagazine(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdctname(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlname(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhdnxt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtldspcstms(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtldspcstms2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspdlwaitname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLSPWTNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcstmdecfig(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlnewstatus(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoolgeom_tlm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLGEOM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtoolgeom_tlm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLGEOM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_btlfpotsrh(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdinterference(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLINTF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoollife_count(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoollife_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: IODBTL_RDTYPE,
        arg5: *mut IODBTLLF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoollifed_count(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoollifed_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLLFD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoollife_tcodedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut IODBTLLF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlmgr_check(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLMGR_CHECK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_in(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBTLMNG_F2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_out(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: *mut IODBTLMAG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtool_inhis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTOOL_INHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtool_outhis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTOOL_OUTHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtool_cause(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTOOL_CAUSENME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_temp_in(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLMAG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_temp_out(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLMAG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_in2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLMAG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srttl_getnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srttl_getdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
        arg7: *mut IODBTLMNG_SORT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlmgr_name(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcstm_decfig(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmag_property(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBMAGPRTY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmag_property(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBMAGPRTY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpot_property(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBPOTPRTY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpot_property(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBPOTPRTY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delmag_property(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBMAGPRTY2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delpot_property(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_move(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLMAG2,
        arg3: *mut IODBTLMAG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_reg_toolstrage(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_uchar,
        arg3: *mut IODBTLMAG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_magazinesrch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: IDBTLM_SRCHDT,
        arg4: *mut IODBTLMAG_SRCHINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_toolsrch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: IDBTLM_SRCHDT,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdedgedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBTLMNG_MU_EDGE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wredgedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBTLMNG_MU_EDGE_DATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wredgedata2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IDBTLM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdedgedatapage(
        arg1: ::std::os::raw::c_ushort,
        arg2: IDBTLMGR_ADD_INFO,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBTLMGR_PAGE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdedgeactive(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_in3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut IODBTLMNG_F2,
        arg4: *mut IODBTLMNG_MU_EDGE_DATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopophis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startophis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophisno(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophistry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophistry2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophistry3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhisno(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhistry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBAHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhistry_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBAHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhistry2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBAHIS2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhistry3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBAHIS3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clearophis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_backupophis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhissgnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhissgnl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhissgnl3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIG3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhissgnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhissgnl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhissgnl3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIG3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophistry4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophisno4(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdomhisno(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhistry4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBAHIS4,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdomhistry2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBOMHIS2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdophisno3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhisno3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmhistry5(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBAHIS5,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrkeyhistry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdiinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdinamesetting(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ODBNME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdinamesetting(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBNME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdifignum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdifignum(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdidispsetting(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ODBDST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdidispsetting(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBDST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdishapedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_ushort,
        arg6: *mut ODBSHP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdishapedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: ::std::os::raw::c_ushort,
        arg6: *mut ODBSHP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicubedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ODBCUB,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdicubedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ODBCUB,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicubeinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ODBCBI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdieffectshape(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdieffectshape(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdimoveaxis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ODBMVA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdimoveaxis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ODBMVA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdiseltool(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicurrentshape(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicrntshapeinf(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_ushort,
        arg6: *mut ODBCRNTSHP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_opentdicubeinfo(
        FlibHndl: ::std::os::raw::c_ushort,
        arg1: *mut ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_seqrdtdicubeinfo(
        FlibHndl: ::std::os::raw::c_ushort,
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ODBCBI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicylinderdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ODBCYL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdicylinderdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ODBCYL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdiplanedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ODBPLN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdiplanedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ODBPLN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdifiguredata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ODBFIG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdifiguredata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ODBFIG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdiinitview(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdiinitview(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_settdiobjectshape(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_settditoolshape(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicomment(
        FlibHndl: ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_short,
        comment: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdicomment(
        FlibHndl: ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_short,
        comment: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtdicolordata(
        FlibHndl: ::std::os::raw::c_ushort,
        ob_type: ::std::os::raw::c_short,
        ob_s_no: ::std::os::raw::c_ushort,
        rd_num: ::std::os::raw::c_ushort,
        data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtdicolordata(
        FlibHndl: ::std::os::raw::c_ushort,
        ob_type: ::std::os::raw::c_short,
        ob_s_no: ::std::os::raw::c_ushort,
        wrt_num: ::std::os::raw::c_ushort,
        data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdalmnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdalminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut IODBMDGINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBMDGINFO,
        arg3: *mut ODBMDGMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdflow(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBMDGINFO,
        arg5: *mut ODBMDGFLOW,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rddtmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBMDGINFO,
        arg4: *mut ODBMDGDTMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdmsgnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_msgsrch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdmsgordr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ODBMDGMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdcontinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut IODBMDGINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdorderalmno(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBMDGINFO,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdlatchedalm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBMDGINFO,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdalminfoview2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBVIEWGRP2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdwvdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_char,
        arg4: *mut ODBMDGWVDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdheatsimlt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBLOAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdloadlvl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBLOAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_monistat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_moniclear(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdg_rdsysinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sysinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSYS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_statinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_statinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBST2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmovestate(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_statinfo_dmg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_STATINF_DMG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcmstatdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_alarm(arg1: ::std::os::raw::c_ushort, arg2: *mut ODBALM) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_alarm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clearalm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ALMINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalminfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ALMINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBALMMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmmsg2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBALMMSG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalmmsg3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBALMMSG3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clralm(
        hndl: ::std::os::raw::c_ushort,
        id: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_modal(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBMDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cannedcycle(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBCANCMD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgcode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBGCD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgcodem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBGCD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_block_status(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcommand(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBCMD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_diagnoss(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBDGN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_diagnosr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_adcnv(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OPMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopmsg2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OPMSG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopmsg3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut OPMSG3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopmsg3m(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut OPMSG3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlnopmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopmsgmps(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut OPMSGMPS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setpath(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getpath(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_allclibhndl(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_freelibhndl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getlibopt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setlibopt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getmactype(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setmactype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getpmactype(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setpmactype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getcrntscrn(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_slctscrn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sysconfig(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSYSC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprstrinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPRS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprstrinfom(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPRSM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrseqsrch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrseqsrch2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopnlsgnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBSGNL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wropnlsgnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSGNL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopnlgnrl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBGNRL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wropnlgnrl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBGNRL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopnlgnrl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBGNRL2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wropnlgnrl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBGNRL2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopnlgsname(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBRDNA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wropnlgsname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRDNA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopnlgsname2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBRDNA2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wropnlgsname2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRDNA2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getdtailerr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBERR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getdtailerr2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBERR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparainfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ODBPARAIF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsetinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ODBSETIF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddiaginfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ODBDIAGIF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparainfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBPARAIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparainfo3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBPARAIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsetinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBPARAIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddiaginfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBPARAIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparanum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPARANUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsetnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSETNUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddiagnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBDIAGNUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getfigure(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfrominfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBFINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromsvstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromsave(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromsvend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromldstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromload(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromldend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromdelete(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsraminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srambkstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srambackup(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srambkend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getfrominfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBFINFORM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromgetstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromget(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromgetend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromputstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromput(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromputend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fromremove(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getsraminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramgetstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramgetstart2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramget(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramget2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramgetend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramgetend2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramputstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramputstart2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramput(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramput2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramputend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sramputend2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsramnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsramaddr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut SRAMADDR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getlockstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chgprotbit(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvftpget(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvftpput(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvftpstat(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvrdpgdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDSDIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvdelete(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvdownload(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvupload(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvcnclupdn(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvupdnstat(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvgetdncpg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvsetdncpg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvrdset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBDSSET,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvwrset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBDSSET,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvchkdsk(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvhdformat(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvsavecram(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvrdcram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvmntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBDSMNT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvgetmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvsetmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvrderrmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvwrfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvrdfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdloopgain(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcurrent(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsrvspeed(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsrvtsa(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsrvtcmd(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdopmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdposerrs(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdposerrs2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPSER,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdposerrz(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsynerrsy(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsynerrrg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspdlalm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdctrldi(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSPDI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdctrldo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSPDO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdnspdl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsvfeedback(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBSVFBACK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfbusmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfbusmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwaveprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBWAVE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwaveprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBWAVE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwaveprm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBWVPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwaveprm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBWVPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwaveprm3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBWVPRM3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwaveprm3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBWVPRM3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wavestart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wavestop(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wavestat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwavedata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ODBWVDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwavedata3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ODBWVDT3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwavecount(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwavedata2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ODBWVDT2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrmtwaveprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRMTPRM,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrmtwaveprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRMTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rmtwavestart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rmtwavestop(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rmtwavestat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrmtwavedt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ODBRMTDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsavsigadr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIGAD,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrsavsigadr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIGAD,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsavsigdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmgrpdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBMGRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmgrpdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBMGRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecmcode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBEXEM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrstrmcode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBRSTRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdproctime(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPTIME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdproctime3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ODBPTIME3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmdiprgstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprgdirtime(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut PRGDIRTM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdir2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut PRGDIR2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdir3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut PRGDIR3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdir4(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut PRGDIR3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdir4_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_short,
        arg7: *mut PRGDIR3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddncfname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrdncfname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcomparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBCPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcomparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBCPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcomlogmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcomopemsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrcvmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsndmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sendmessage(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrmsgbuff(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrcvstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdintchk(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBINT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrintchk(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBINT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdintinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdshft(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdshft(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdsfms(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdsfms(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdshft2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdshft2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdsfms2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdsfms2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdshft3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdshft3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdsfms3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdsfms3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopomhis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startomhis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdomhisinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBOMIF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdomhistry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ODBOMHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clearomhis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdbtofsr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBBTO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrbtofsr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBBTO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdbtofsinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBBTLINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdbaxis(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsyssoft(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSYSS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsyssoft2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSYSS2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmdlconfig(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBMDLC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmdlconfig2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpscdproc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPSCD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpscdproc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPSCD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpscdproc2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPSCD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpscdproc2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPSCD2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpscdpirc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPIRC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpscdpirc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPIRC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpscdedge(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBEDGE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpscdedge(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBEDGE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpscdslop(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBSLOP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpscdslop(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBSLOP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpwrdty(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLPWDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlpwrdty(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLPWDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpwrdat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLOPDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpwrcpst(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlpwrcpst(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlagslt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLAGSL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlagslt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLAGSL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlagst(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLAGST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlagst(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLAGST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdledgprc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLEGPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrledgprc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLEGPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlprcprc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLPCPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlprcprc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBLPCPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlcmddat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLCMDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdldsplc(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrldsplc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlerrz(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlactnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLACTN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlcmmt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLCMMT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpwrslt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlpwrslt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpwrctrl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlpwrctrl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpwofsthis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ODBPWOFST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmngtime(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut IODBMNGTIME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmngtime(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut IODBMNGTIME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddischarge(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBDISCHRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddischrgalm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ODBDISCHRGALM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlppfbdt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBLPPFBFG,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBLPPFBDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlppfbdt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBLPPFBFG,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBLPPFBDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_gettimer(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTIMER,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_settimer(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTIMER,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtimer(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTIME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtimer(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBTIME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtlctldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLCTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtlctldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBTLCTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtooldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtooldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLDT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmultitldt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMLTTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmultitldt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMLTTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmtapdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMTAP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmtapdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMTAP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmultipieceno(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoolinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPTLINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsafetyzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBSAFE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrsafetyzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBSAFE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtoolzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLZN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtoolzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBTLZN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdacttlzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBACTTLZN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsetzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrsetzone(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdbrstrinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBBRS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmenuswitch(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrmenuswitch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdradofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBROFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlenofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfixcycle(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBFIX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcdrotate(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBROT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd3dcdcnv(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DCD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmirimage(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBMIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdscaling(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSCL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd3dtofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DTO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdposofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhpccset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBHPST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhpccset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBHPST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_hpccatset(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhpcctupr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBHPPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhpcctupr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBHPPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdhpcctuac(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBHPAC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrhpcctuac(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBHPAC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_hpccattune(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_hpccactfine(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_hpccselfine(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfixoffs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBFOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfixoffs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBFOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdactfixofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfixofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfixofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdactdofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrdofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cdautoset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcdslctprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut IODBCTPR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcdslctprmm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut IODBCTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdjogmdi(
        arg1: ::std::os::raw::c_ushort,
        code: *mut ODBJOGCMD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrjogmdi(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrjogmdiclr(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd3dtooltip(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DHDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd5dtooltip(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODB5DHDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd5dmacmov(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODB5DHDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd5dpulse(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODB5DPLS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clr5dplsmov(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd3dpulse(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DPLS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd3dmovrlap(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DHDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd3dofschg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clr3dplsmov(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_reset(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_reset2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dispoptmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_optmsgans(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getcncmodel(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdaxisname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBAXISNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspdlname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBSPDLNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspdlnamem(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBSPDLNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exaxisname(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut [::std::os::raw::c_char; 4usize],
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exaxisname2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut [::std::os::raw::c_char; 4usize],
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrelaxis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBRELAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdabsaxis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_axisnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_axisnum2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcexesram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcexesram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cexesraminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cexesramsize(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtrqmonitor(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcoordnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ftosjis(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrunsolicprm(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        data: *mut IODBUNSOLIC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdunsolicprm(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        data: *mut IODBUNSOLIC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrunsolicprm2(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        data: *mut IODBUNSOLIC2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdunsolicprm2(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        data: *mut IODBUNSOLIC2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_unsolicstart(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        hWnd: ::std::os::raw::c_int,
        msgno: ::std::os::raw::c_ulong,
        chkalive: ::std::os::raw::c_short,
        bill: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_unsolicstop(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdunsolicmsg(
        bill: ::std::os::raw::c_short,
        data: *mut IDBUNSOLICMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdunsolicmsg2(
        bill: ::std::os::raw::c_short,
        data2: *mut IDBUNSOLICMSG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtrqlimit(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBTRQ,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ftrq_from_save(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ftrq_from_load(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ftrq_data_copy(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdftrq_info(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBP_FTRQ_PRM_INF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdftrq_storecount(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdftrq_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn embetb_rdparam_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBEMBETHPRMW,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn embetb_wrparam_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBEMBETHPRMW,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpm_mcnitem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut [::std::os::raw::c_char; 62usize],
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpm_mcnitem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut [::std::os::raw::c_char; 62usize],
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpm_cncitem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut [::std::os::raw::c_char; 62usize],
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpm_item(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPMAINTE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpm_item(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBPMAINTE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcncmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcncmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdope_lvl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_prot_pswinp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_prot_pswcan(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_prot_pswchg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_prot_pswinit(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprt_lvl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrprt_lvl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprt_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfsraminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ODBSRAMIF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfsraminfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ODBSRAMIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfile_sram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfile_sram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pwoff_alarm(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_req_alarm(
        FlibHndl: ::std::os::raw::c_ushort,
        alm_grp: ::std::os::raw::c_short,
        alm_num: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_set_cutcnd_exval(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chglang(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_settpnlcalib(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tpl_read(
        FlibHndl: ::std::os::raw::c_ushort,
        data: *mut ODBTPNLINTF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_nextdistance(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdipltp(arg1: ::std::os::raw::c_ushort, buf: *mut ODBIPL)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsyssoft3(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBSYSS3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_settolnum_qset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setzofsnum_qset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_gettolnum_qset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getzofsnum_qset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtofsdrctinp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: REALMES,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdoverstore(
        FlibHndl: ::std::os::raw::c_ushort,
        code: *mut IODBOVSTR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wroverstore(
        FlibHndl: ::std::os::raw::c_ushort,
        code: *mut IODBOVSTR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clroverstore(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chgoverstore(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdoverstoremode(
        FlibHndl: ::std::os::raw::c_ushort,
        mode: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdblockcount(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPRS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_loadtorq(
        arg1: ::std::os::raw::c_ushort,
        motor: ::std::os::raw::c_short,
        axis: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBLOAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdservoid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBCSVID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspindleid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBCSPID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfromservoid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSVID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfromspindleid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSPID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfromservoid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSVID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfromspindleid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSPID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdservoid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBCSVID2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspindleid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBCSPID2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfromservoid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSVID2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfromspindleid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSPID2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfromservoid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSVID2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfromspindleid2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBCSPID2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrfromsvspid(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdofslength(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBOFSLEN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrepeatval(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrepeatval_ext(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getregprgnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsyshard(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBSYSH,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsyssoft3_str(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBSYSS3_STR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsyshard_str(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBSYSH_STR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sysinfo_ex(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSYSEX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdproctime2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPTIME2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwseterror(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        g_num: ::std::os::raw::c_short,
        code: ::std::os::raw::c_short,
        data: *mut IODBWSETERROR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwseterror(
        FlibHndl: ::std::os::raw::c_ushort,
        number: ::std::os::raw::c_short,
        g_num: ::std::os::raw::c_short,
        code: ::std::os::raw::c_short,
        data: *mut IODBWSETERROR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlrntrnsdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBTRNS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlrninfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBLRNINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlrninfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBLRNINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlrninfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrlrncrnt(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_backuplrn(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_restorlrn(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_punchlrncrnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_readlrncrnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stoplrntrns(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_statlrntrns(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlrninfol(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBLRNINFOL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlrnprfcmnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBLRNPRF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlrnprf(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdoptfuncinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sendkey(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBKEYINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getlanguage(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_start2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_rddata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DCHK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_rddata2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODB3DCHK,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODB3DMTBINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_rddata3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ODB3DCHK,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODB3DMTBINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_rddata4(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ODB3DCHK,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODB3DMTBINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_getprginfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_3dchk_mchn_stop(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDB3DMSTOP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setrstraxis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrrstraxis(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcncmem2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
        arg6: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcncmem2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
        arg6: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdaxisstatus_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBAXSTS_BG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_set_smth_exval(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_confirm_restart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chkversion(
        arg1: ::std::os::raw::c_ushort,
        condition: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tool_srh_free_min_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBTL_FREE_NUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmtdtnid(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mtdtnstart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getscrowner(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdedmcram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wredmcram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmodalval(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsvmonitor(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdspmonitor(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrsignal_f(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ncg_protcancel(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_set_prps(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_reset_prps(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_status_prps(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsrsvchnl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsrdidinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBIDINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcswridinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBIDINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsstartrd(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsstartwrt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsstopexec(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsrdexstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSRCSST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsrdopdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcswropdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsfreechnl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsrdlayout(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSRCSLYT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_srcsrddrvcp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startdrawpos(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopdrawpos(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startdyngrph(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopdyngrph(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrphcmd(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrgrphcmdptr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdgrphcanflg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrgrphcmd(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdactpos_w(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBWACT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_data_copy(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_grppos(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stop_grppos(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_grppos(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBGRPPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_grpaxisinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBGRPAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_grppos3(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stop_grppos3(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_grppos3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBGRPPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtstartrd(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtstartwr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtendrd(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtendwr(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtstopexec(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtrddata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtwrdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtstartrd2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtstartwr2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtendrd2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtendwr2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtrddata2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_svdtwrdata2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdsetchnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBCHAN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdsetchnl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBCHAN2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdclrchnl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdstartsmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdstartsmplb(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdstartsmpl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut TRG_DATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdcancelsmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdreadsmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ODBSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdreadsmpl2(
        arg1: ::std::os::raw::c_ushort,
        trg: *mut ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ODBSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdendsmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdendsmpl2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdread1shot(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdbetainfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ODBBINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sfbsetchnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut IDBSFBCHAN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sfbclrchnl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sfbstartsmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sfbcancelsmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sfbreadsmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ODBSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sfbendsmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtsetchnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut IDBSDTCHAN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtsetchnl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut IDBSDTCHAN2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtclrchnl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtstartsmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtstartsmpl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut TRG_DATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtcancelsmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtreadsmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ODBSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtreadsmpl2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ODBSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtendsmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtendsmpl2(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdtread1shot(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startnccmd(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startnccmd2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopnccmd(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getdspmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setcurscrn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdfstatchg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_sdfmnghwnd(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getprntname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startrmtdgn(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stoprmtdgn(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrmtdgn(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrmtdgn(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcommstatus(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chkrmtdgn(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_startrmtdgn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_RMTDGNINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_stoprmtdgn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdrmtdgn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut OUT_RMTDGNINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_chginquiry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_allowance(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_allowcnd(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBCAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_workzero(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_slide(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfeedmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_upstarto8(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_searcho8(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_deleteo8(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdiro8(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_ushort,
        arg6: *mut PRGDIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprgnumo8(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPROO8,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddynamico8(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDYO8,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmdipntro8(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBMDIPO8,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprogdir2o8(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut PRGDIR2O8,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_progdigit(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startgetdgdat(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopgetdgdat(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddgdat(
        FlibHndl: ::std::os::raw::c_ushort,
        arg1: *mut ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrdgdatptr(
        FlibHndl: ::std::os::raw::c_ushort,
        arg1: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrdgdat(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_opencexefile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_closecexefile(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcexefile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcexefile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_cexedirectory(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut CFILEINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfssb_amp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBFSSBAMP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfssb_axis_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfssb_plsmod(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBPLSMDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfssb_axis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBFSSBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrfssb_axis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBFSSBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfssb_mainte(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBFSSBMT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdfssb_info(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBFSSBINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fssb_autoset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_fssb_reset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_info(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBIFSBINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_slvunt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBIFSBSLVUNT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_slu_sv(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBSLUSV,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_slu_sp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBSLUSP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_slu_pm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBSLUPM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_as_amp_sv(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBSVAMP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrifsb_as_axis_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_as_hrv(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrifsb_as_hrv(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_as_amp_sp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBSPAMP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrifsb_as_spdl_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_as_plsmod(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBPLSMDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_as_sv_axis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBIFSBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrifsb_as_sv_axis(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBIFSBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_mainte_sv(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBIFSBMNTSV,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_mainte_sp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBIFSBMNTSP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ifsb_autoset(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ifsb_reset(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_almstate(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_sysalm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBIFSBSYSALM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_fssbunt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBIFSBFSSBUNT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_comstatdtl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBIFSBCOMSTATDTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_warning_cnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_warning_msg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBIFSBWARNINGMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_warnhst_cnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdifsb_warnhst_msg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBIFSBWARNHSTMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_crdmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_cwrmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcrng(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_ushort,
        arg5: ::std::os::raw::c_ushort,
        arg6: ::std::os::raw::c_ushort,
        arg7: *mut IODBPMC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrpmcrng(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBPMC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrpmcrng2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBPMC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdwrpmcrng(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBRWPMC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdkpm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrkpm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdkpm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrkpm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_kpmsiz(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBPMCINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdcntldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBPMCCNTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrcntldata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPMCCNTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdcntlgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrcntlgrp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdalmmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBPMCALM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_getdtailerr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMCERR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrpmcmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcsemem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrpmcsemem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmctitle(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMCTITLE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmctitle2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMCTITLE2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdprmstart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdprmend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrprmstart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrpmcparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrprmend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcrng_ext(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPMCEXT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wriolinkdat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdpmcaddr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ODBPMCADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_select_pmc_unit(
        h: ::std::os::raw::c_ushort,
        unittype: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_current_pmc_unit(
        h: ::std::os::raw::c_ushort,
        unittype: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_number_of_pmc(
        h: ::std::os::raw::c_ushort,
        piNum: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_pmc_unit_types(
        h: ::std::os::raw::c_ushort,
        unittypes: *mut ::std::os::raw::c_long,
        count: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_set_timer_type(
        h: ::std::os::raw::c_ushort,
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_timer_type(
        h: ::std::os::raw::c_ushort,
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_read_seq_program_and_memory_type(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMCLADMEMTYPE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdcntlexrelay(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBPMCCNTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrcntlexrelay(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPMCCNTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdcntl_exrelay_grp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_wrcntl_exrelay_grp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_convert_from_string_to_address(
        arg1: ::std::os::raw::c_ushort,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ODBPMCADRINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_select_divided_ladder(
        h: ::std::os::raw::c_ushort,
        divnumber: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_current_divided_ladder(
        h: ::std::os::raw::c_ushort,
        divnumber: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_number_of_ladder(
        h: ::std::os::raw::c_ushort,
        number: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_get_divided_ladders(
        h: ::std::os::raw::c_ushort,
        divnums: *mut ::std::os::raw::c_long,
        count: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdioconfigtitle(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_rdmessagetitle(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPRFINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdconfig(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPRFCNF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdbusprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBBUSPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrbusprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBBUSPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdslvprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrslvprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdallcadr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPRFADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrallcadr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPRFADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdslvaddr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSLVADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrslvaddr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSLVADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdslvstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSLVST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdslvid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBSLVID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrslvid(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBSLVID,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdslvprm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBSLVPRM3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrslvprm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBSLVPRM3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrddido(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBDIDO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrdido(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBDIDO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdindiadr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBINDEADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwrindiadr(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBINDEADR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfrdopmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pmc_prfwropmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_dwnstart(
        FwHndl: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_ushort,
        b: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_download(
        FwHndl: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_long,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_dwnend(FwHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_upstart(
        FwHndl: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_ushort,
        b: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_upload(
        FwHndl: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_long,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_upend(FwHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cb_transinfo(
        FwHndl: ::std::os::raw::c_ushort,
        info: *mut ODBTRANSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_rdbyte(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_rdword(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_rddword(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_wrbyte(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_wrword(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_wrdword(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn etb_rdparam(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: *mut IODBETP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn etb_wrparam(hLib: ::std::os::raw::c_ushort, a: *mut IODBETP) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn etb_rderrmsg(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: *mut ODBETMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdmode(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrmode(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdhddinfo(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ODBHDDINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdhdddir(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: ::std::os::raw::c_long,
        c: *mut ::std::os::raw::c_short,
        d: *mut ODBHDDDIR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_delhddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_copyhddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_renhddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_puthddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_mputhddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdhostinfo(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_long,
        b: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdhostdir(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: ::std::os::raw::c_long,
        c: *mut ::std::os::raw::c_short,
        d: *mut ODBHOSTDIR,
        e: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdhostdir2(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: ::std::os::raw::c_long,
        c: *mut ::std::os::raw::c_short,
        d: *mut ::std::os::raw::c_long,
        e: *mut ODBHOSTDIR,
        f: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_delhostfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_gethostfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_mgethostfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdresult(hLib: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_cancel(hLib: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdncfile(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdncfile2(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrncfile(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rddnchddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrdnchddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rddnchostfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_short,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrdnchostfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdhostno(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdmntinfo(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
        b: *mut DSMNTINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_checkhdd(hLib: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_formathdd(hLib: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_makehdddir(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_delhdddir(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_chghdddir(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_lputhddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_ldelhddfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_lgethostfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdm198hdddir(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrm198hdddir(hLib: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdm198host(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrm198host(hLib: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrhostno(
        hLib: ::std::os::raw::c_ushort,
        a: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_searchword(
        FlibHndl: ::std::os::raw::c_ushort,
        prog_data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_searchresult(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_rdfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_wrfile(
        hLib: ::std::os::raw::c_ushort,
        a: *mut ::std::os::raw::c_char,
        b: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_dwnstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_download(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ds_dwnend(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ETHPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IN_ETHPRMFLAG,
        arg4: *mut IN_ETHPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdembdev(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrembdev(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_embrestart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rddsmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_ETHDSMODE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrdsmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_ping(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_ping_result(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ETHPING,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_ping_cancel(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdlsistate(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ETHLSI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_clrlsistate(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdtaskstate(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ETHTASK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut OUT_ETHLOG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_clrlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdtype(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_ETHTYPE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdtype2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_ETHTYPE2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdtype3(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_ETHTYPE3,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rddsstate(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_DSSTATE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdhost(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrhost(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rddsm198dir(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrdsm198dir(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rddsm198host(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrdsm198host(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdembm198host(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrembm198host(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rddsformat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_dsformat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_dschkdsk(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdrmdinquiry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrrmdinquiry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdunsolicmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wrunsolicmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdunsolicstate(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_UNSOLICSTATE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_applyunsolicprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn net_backup_param(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn net_restore_param(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdfsclntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_FSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_disconfsclnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_disconfsclntall(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdmbsclntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_MBSVRINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdmbsclntinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_MBSVRINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipabscparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_EIPA_BASIC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipabscparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_EIPA_BASIC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wreipabscparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_EIPA_BASIC_PRM_FLG,
        arg3: *mut IN_EIPA_BASIC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wreipabscparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IN_EIPA_BASIC_PRM_FLG,
        arg4: *mut IN_EIPA_BASIC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipaalcparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_EIPA_ALLOC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipaalcparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut OUT_EIPA_ALLOC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wreipaalcparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IN_EIPA_ALLOC_PRM_FLG,
        arg5: *mut IN_EIPA_ALLOC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wreipaalcparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IN_EIPA_ALLOC_PRM_FLG,
        arg6: *mut IN_EIPA_ALLOC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipmsnsinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_EIP_MSNSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipmsnsinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_EIP_MSNSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipdeviceinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_EIP_DEVICEINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipdeviceinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_EIP_DEVICEINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipascnlist(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut OUT_EIPA_SCNDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipascnlist2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut OUT_EIPA_SCNDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeiplistdetail(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut OUT_EIP_LISTDETAIL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeiplistdetail2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: *mut OUT_EIP_LISTDETAIL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_eipaedsout(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_eipaedsout2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipsparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_EIPS_BASIC_PRM,
        arg4: *mut OUT_EIPS_STATE_PRM,
        arg5: *mut OUT_EIPS_ALLOC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipsparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_EIPS_BASIC_PRM,
        arg5: *mut OUT_EIPS_STATE_PRM,
        arg6: *mut OUT_EIPS_ALLOC_PRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wreipsparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IN_EIPS_BASIC,
        arg6: *mut IN_EIPS_ALLOC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_wreipsparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IN_EIPS_BASIC,
        arg7: *mut IN_EIPS_ALLOC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipsmntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_EIPS_COM_INFO,
        arg4: *mut OUT_EIPS_DETAIL_INFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipsmntinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_EIPS_COM_INFO,
        arg5: *mut OUT_EIPS_DETAIL_INFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_reqeipsidinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_reqeipsidinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_reseipsidinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_EIPS_IDENTITY_INFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_reseipsidinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_EIPS_IDENTITY_INFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_eipsedsout(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_eipsedsout2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_eipsparamsort(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_rdeipsafmntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_ADPSAFE_MNTINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_eipsafdumperror(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn eth_edaxmlout(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn net_rdtype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_NETDEVPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddsdncfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrdsdncfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrdsdncfile2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddsdevinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBPDFINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddsdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rddsfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut IN_DSFILE,
        arg4: *mut OUT_DSINFO,
        arg5: *mut OUT_DSFILE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsmkdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsrmdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsremove(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dschdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut IN_DSFILE,
        arg5: *mut OUT_DSINFO,
        arg6: *mut OUT_DSFILE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsrename(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dscopyfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsget_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsput_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsmget_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsmput_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dslistget_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dslistput_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dslistdel_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsftpstat(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsftpcancel(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getmacaddress(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dssearch(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsrdopen(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsread(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsrdclose(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dswropen(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dswrite(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dswrclose(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsfile_req(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ODB_IN_DSFILE_REQ,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dsstat_rdfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ODB_IN_STAT_DSFILE,
        arg4: *mut OUT_DSINFO,
        arg5: *mut OUT_DSFILE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_param(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut T_SLVSLT_IND,
        arg4: *mut OUT_PBMPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_wr_param(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IN_PBMPRMFLG,
        arg4: *mut IN_PBMPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_ini_prm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut T_SLVSLT_IND,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_allslvtbl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_ALLSLVTBL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_exe_subfunc(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut T_SLVSLT_IND,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_subprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut T_SLVSLT_IND,
        arg4: *mut OUT_PBMSUBPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_errcode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut T_ERR_CODE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_chg_mode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_uchar,
        arg3: *mut OUT_CHGMODERESULT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_cominfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_PBMCOMINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_nodetable(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_nodeinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_PBMNODEINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_slot(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbm_rd_slotinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_PBMSLOTINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_rd_param(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PBSPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_wr_param(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_PBSPRMFLG,
        arg3: *mut IN_PBSPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_ini_prm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_rd_cominfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PBSSTATUS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_rd_param2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PBSPRM2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_wr_param2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_PBSPRMFLG2,
        arg3: *mut IN_PBSPRM2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pbs_rd_cominfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PBSSTATUS2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_DNMPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rdparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_DNMPRM2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IN_DNMPRMFLAG,
        arg5: *mut IN_DNMPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_wrparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IN_DNMPRMFLAG2,
        arg5: *mut IN_DNMPRM2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rdnodetable(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_DNMNODE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rdnodeinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_DNMNODEINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rdfirminfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_DNMFIRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rderrorrecord(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_DNMERR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_clrerrorrecord(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rdslvstatus(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_rd_hist(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut OUT_DNMHIST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dnm_clr_hist(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dns_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_DNSPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dns_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_DNSPRMFLAG,
        arg3: *mut IN_DNSPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dns_rdinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_DNSINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dns_restart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dns_rd_hist(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut OUT_DNSHIST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dns_clr_hist(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_FLNTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_FLNTPRMFLG,
        arg3: *mut IN_FLNTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_wrparam2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IN_FLNTPRMFLG,
        arg4: *mut IN_FLNTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdentry(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_FLNTENTRY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdentry2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTENTRY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdnodeinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_uchar,
        arg3: *mut OUT_FLNTNODETBL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdnodeinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut OUT_FLNTNODETBL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdnetwork(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_FLNTNETTBL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdnetwork2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTNETTBL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_clrnetwork(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_clrnetwork2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_FLNTLOG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdlog2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTLOG2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_clrlog(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_clrlog2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut OUT_FLNTMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdmsg2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut OUT_FLNTMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_clrmsg(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_clrmsg2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rddeviceinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_FLNTDEVINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rddeviceinfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTDEVINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdsfstatus(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTSFSTS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn flnt_rdsferrnode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_FLNTSFERRTBL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdflnetsram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrflnetsram(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cclr_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_CCLRPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cclr_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_CCLRPRMFLAG,
        arg3: *mut IN_CCLRPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cclr_rdinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_CCLRINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn usb_rdinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_USBINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn usb_rdlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut OUT_USBLOG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn usb_clrlog(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn usb_format_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn usb_format_result(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PND_PARAM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_PND_PARAM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_rdmntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PND_MNTINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_clrmntinfo(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_rdmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_wrmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnd_outsafemntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut OUT_PNC_PARAM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IN_PNC_PARAM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_rdmntinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_PNC_CNTRLR_INFO,
        arg4: *mut OUT_PNC_DEVICE_INFO,
        arg5: *mut OUT_PNC_ALLCOM_STAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_reqdetailinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_resdetailinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut OUT_PNC_DETAIL_INFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_rdmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pnc_wrmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_rdlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut OUT_ECTLOG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_clrlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_outputlog(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_rdslvtype(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ECTTYPE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_rdslvdeviceinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ECTDEVINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_rdslvnetwork(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut OUT_ECTNETINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_chgslvmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ect_outputesi(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdnodenum(arg1: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdnodeinfo(
        arg1: ::std::os::raw::c_long,
        arg2: *mut ODBNODE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_setdefnode(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_allclibhndl2(
        arg1: ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_allclibhndl3(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_allclibhndl4(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_ulong,
        arg5: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_settimeout(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_resetconnect(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getfocas1opt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdetherinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmminit(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ODBPMMSLV,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmchkalm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmsysdt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ODBPMMSYD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmgetstart(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut IDBPMMGTI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmget(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ODBPMMGET,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmgetend(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmprmpage(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: *mut ODBPMMPRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpmmprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ODBPMMPRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmmprmtp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBPMMPRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpmmprmtp(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBPMMPRP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pmmiochanl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPMMIO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdioassigned(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_absolute_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_relative_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_machine_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_rdactpt_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pdf_wractpt_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_statinfo_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdseqnum_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBSEQ,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_modal_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBMDL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdipltp_bg(
        arg1: ::std::os::raw::c_ushort,
        buf: *mut ODBIPL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_nextdistance_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofs_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBTOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtofsr_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBTO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofs_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBZOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofsr_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBZOR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdshft_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalminfo_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ALMINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprgnumo8_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPROO8,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdexecprog_bg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_absolute_mgi(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_get_mccteststs(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut DCSMCA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_get_flowmonitor(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBDCSFMONI,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_get_crosschk_alarm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut DCSCRSALM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_get_safetysts(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut DCSSVSPSTS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_get_safetysts2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut DCSSVSPST2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getrtmrvars(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrtmrvars(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrtmrvars(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getrtmrvar(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrtmrvar(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrtmrvar(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getrtmioinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBRTMIOR,
        arg4: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getrtmiorngnum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrtmiowrenbl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRTMIO,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrtmiowrenbl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRTMIO,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrtmiowrenblbit(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRTMIO,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrtmiowrenblbit(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRTMIO,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdrtmiowrenblrng(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRTMIOR,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrtmiowrenblrng(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRTMIOR,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stplutosmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdplutosmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ODBRENPLT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_edplutosmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stpossmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpossmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ODBRENPLT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_endpossmpl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iodbcbp {
    pub datano: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub u: iodbcbp__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iodbcbp__bindgen_ty_1 {
    pub cdata: ::std::os::raw::c_char,
    pub idata: ::std::os::raw::c_short,
    pub ldata: ::std::os::raw::c_long,
    pub rdata: REALPRM,
    pub cdatas: [::std::os::raw::c_char; 32usize],
    pub idatas: [::std::os::raw::c_short; 32usize],
    pub ldatas: [::std::os::raw::c_long; 32usize],
    pub rdatas: [REALPRM; 32usize],
}
#[test]
fn bindgen_test_layout_iodbcbp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<iodbcbp__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbcbp__bindgen_ty_1>(),
        512usize,
        concat!("Size of: ", stringify!(iodbcbp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbcbp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbcbp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(idata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(rdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(cdatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(idatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(ldatas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdatas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp__bindgen_ty_1),
            "::",
            stringify!(rdatas)
        )
    );
}
#[test]
fn bindgen_test_layout_iodbcbp() {
    const UNINIT: ::std::mem::MaybeUninit<iodbcbp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iodbcbp>(),
        520usize,
        concat!("Size of: ", stringify!(iodbcbp))
    );
    assert_eq!(
        ::std::mem::align_of::<iodbcbp>(),
        8usize,
        concat!("Alignment of ", stringify!(iodbcbp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datano) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp),
            "::",
            stringify!(datano)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iodbcbp),
            "::",
            stringify!(u)
        )
    );
}
pub type IODBCBP = iodbcbp;
extern "C" {
    pub fn cnc_rdcbmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcbmem2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcbmem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcbmem2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcbprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrcbprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrscdldat(
        FlibHndl: ::std::os::raw::c_ushort,
        s_number: ::std::os::raw::c_short,
        e_number: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        scdldat: *mut SCDL_1D,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdscdldat(
        FlibHndl: ::std::os::raw::c_ushort,
        s_number: ::std::os::raw::c_short,
        e_number: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        scdldat: *mut SCDL_1D,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdscdlinfo(
        FlibHndl: ::std::os::raw::c_ushort,
        scdl_mode: *mut ::std::os::raw::c_short,
        scdl_num: *mut ::std::os::raw::c_short,
        data_no: *mut ::std::os::raw::c_short,
        crnt_no: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startptcnv(
        FlibHndl: ::std::os::raw::c_ushort,
        request: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptcnvinfo(
        FlibHndl: ::std::os::raw::c_ushort,
        executing: *mut ::std::os::raw::c_short,
        conv_status: *mut ::std::os::raw::c_long,
        ofs_change: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptcnvalm(
        FlibHndl: ::std::os::raw::c_ushort,
        alm_no: *mut ::std::os::raw::c_long,
        prog_name: *mut ::std::os::raw::c_char,
        prog_data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptexedistalm(
        FlibHndl: ::std::os::raw::c_ushort,
        dist_alm_no: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptaxitablestatus(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
        axis: ::std::os::raw::c_short,
        odbptaxistat: *mut ODBPTAXISTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptsptablestatus(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
        axis: ::std::os::raw::c_short,
        odbptspstat: *mut ODBPTSPSTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptaxfunctablestatus(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
        odbptaxistat: *mut ODBPTAXFUNCSTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_clrptdata(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ptdwnstart(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ptdownload(
        FlibHndl: ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ptdwnend(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ptlink(
        FlibHndl: ::std::os::raw::c_ushort,
        backup: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_ptlink2(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_slctptdata(
        FlibHndl: ::std::os::raw::c_ushort,
        num: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_slctpttype(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptcnvinfo2(
        FlibHndl: ::std::os::raw::c_ushort,
        cnvinfo: *mut ODBPTCNVINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptcomment(
        FlibHndl: ::std::os::raw::c_ushort,
        odbptcomment: *mut ODBPTCOMMENT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_num(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_num: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_gb(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_idx: ::std::os::raw::c_long,
        odbpthis_gb: *mut ODBPTHIS_GB,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_pt(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_idx: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        odbpthis_pt: *mut ODBPTHIS_PT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_ax(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_idx: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        axis: ::std::os::raw::c_long,
        odbpthis_ax: *mut ODBPTHIS_AX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_sp(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_idx: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        spdl: ::std::os::raw::c_long,
        odbpthis_sp: *mut ODBPTHIS_SP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_aux(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_idx: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        odbpthis_aux: *mut ODBPTHIS_AUX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpthis_log(
        FlibHndl: ::std::os::raw::c_ushort,
        hist_idx: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
        path: ::std::os::raw::c_long,
        idx: ::std::os::raw::c_long,
        count: *mut ::std::os::raw::c_long,
        odbpthis_log: *mut ODBPTHIS_LOG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptstoptime(
        arg1: ::std::os::raw::c_ushort,
        stop_time: *mut f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrptstoptime(
        arg1: ::std::os::raw::c_ushort,
        stop_time: f64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdptcmdsize(
        arg1: ::std::os::raw::c_ushort,
        cmd_id: ::std::os::raw::c_short,
        cmd_size: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_dtsvinfo(
        h: ::std::os::raw::c_ushort,
        dtsvver: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delsysalm(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsysalm(
        FlibHndl: ::std::os::raw::c_ushort,
        kind: ::std::os::raw::c_short,
        page: ::std::os::raw::c_short,
        length: ::std::os::raw::c_ushort,
        data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpalaxis(
        FlibHndl: ::std::os::raw::c_ushort,
        axis: ::std::os::raw::c_short,
        palax: *mut IODBPALAX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_hdck_nochange_info(
        FlibHndl: ::std::os::raw::c_ushort,
        path_no: ::std::os::raw::c_short,
        hdck_info: *mut ODBAHDCK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_getpntcnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdpntlist(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBRSTLIST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdpnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBRSTINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdmodal(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBGCD,
        arg6: *mut ODBCMD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_selectpnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_wrpnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRSTINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_createpnt(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_search(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_setsuppress(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdpntlist2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBRSTLIST2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdpnt2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBRSTINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_wrpnt2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRSTINFO2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_getdncprg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdaddinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rstrt_rdlpmppnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBRSTMPINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsuofs_vect(
        FlibHndl: ::std::os::raw::c_ushort,
        ax_idx: ::std::os::raw::c_short,
        ax_cnt: *mut ::std::os::raw::c_short,
        su_ofs_info: *mut ODBSUOVECT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdnutatortofs_vect(
        FlibHndl: ::std::os::raw::c_ushort,
        ax_idx: ::std::os::raw::c_short,
        ax_cnt: *mut ::std::os::raw::c_short,
        su_ofs_info: *mut ODBSUOVECT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsuo_prm_name(
        h: ::std::os::raw::c_ushort,
        data_idx: ::std::os::raw::c_short,
        su_data: *mut ODBSUODATA,
        length: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmcdfinfo(
        FlibHndl: ::std::os::raw::c_ushort,
        file_no: ::std::os::raw::c_long,
        file_inf: *mut ODBFILESTATUS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_canmcdfinfo(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chkmcdfile(
        FlibHndl: ::std::os::raw::c_ushort,
        fname: *mut ::std::os::raw::c_char,
        exist: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delmcdfile(
        FlibHndl: ::std::os::raw::c_ushort,
        fname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_delmcdfilebynum(
        FlibHndl: ::std::os::raw::c_ushort,
        file_no: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdmcdprgcmnt(
        FlibHndl: ::std::os::raw::c_ushort,
        fname: *mut ::std::os::raw::c_char,
        prog_inf: *mut ODBPROGINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpmcaxisinfo(
        FlibHndl: ::std::os::raw::c_ushort,
        axis: ::std::os::raw::c_short,
        type_: ::std::os::raw::c_short,
        pmcaxisinfo: *mut ODBPMCAXISINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdusbdevinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ODBUSBSIZE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdusbfilelist(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBUSBFILE,
        arg3: *mut ODBUSBINFO,
        arg4: *mut ODBUSBFILE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_usbmkdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_usbrmdir(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_usbremove(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_usbrename(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chkusbfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_searchusbfile(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBUSBSEARCH,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_chkusbmount(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_writeusbfile(
        h: ::std::os::raw::c_ushort,
        path: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdaxisdata64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBAXDT64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_prstwkcd64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBWRA64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrrelpos64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBWRR64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcommand64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBCMD64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdparam64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBPSD64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrparam64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBPSD64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_zofs_rnge64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBDATRNG64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofsr64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBZOR64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrzofs64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBZOFS64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wksft_rnge64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBDATRNG64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdshft64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBWCSF64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdshft64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdwkcdsfms64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBWCSF64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrwkcdsfms64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBWCSF64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_diagnoss64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBDGN64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_diagnosr64(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrtofsdrctinp64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: REALMES64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdholmes64(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBHOLDATA64,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdcenter64(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdzofsmes64(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: f64,
        arg4: ::std::os::raw::c_long,
        arg5: *mut f64,
        arg6: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_saveprog_start(FlibHndl: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_saveprog_end(
        FlibHndl: ::std::os::raw::c_ushort,
        result: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_unlock(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_lock(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_setpassword(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_unregister(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_register(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_rdinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBMDDINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_setswitch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_getswitch(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_setexceptparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBMDDEXCEPTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_getexceptparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBMDDEXCEPTPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mdd_update(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdsignals(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_ushort,
        arg6: *mut ODBRBSIGNAL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdalmmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        alm_msg: *mut IODBRBALMMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdgrouplist(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ODBRBGRPLIST,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_wrgroup(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IDBRBGROUP,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_selectgroup(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_wrsignalname(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut IDBRBSIGNAL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_wralmmsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut IODBRBALMMSG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_wrcomsetting(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRBCOMSET,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdcomsetting(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBRBCOMSET,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_wrselectedsignals(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut IODBRBSUMMARY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdselectedsignals(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut IODBRBSUMMARY,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdsignals2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_ushort,
        arg6: *mut IODBRBSIGNAL2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_wrsignals2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut IODBRBSIGNAL2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_clrsignals(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_robo_rdponprop(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdtcodemsg(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_aux_statinfo(
        h: ::std::os::raw::c_ushort,
        stat: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdindexprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBINDEXPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrindexprm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBINDEXPRM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdindexdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBINDEXDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrindexdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBINDEXDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdindexofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrindexofs(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdindexposdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut IODBINDEXPOSDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrindexposdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut IODBINDEXPOSDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdindexinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBINDEXINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdchopping(
        h: ::std::os::raw::c_ushort,
        chopping: *mut ODBCHOPPING,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_loginf(
        arg1: ::std::os::raw::c_ushort,
        sfsgloginf: *mut ODBSFSGLOGINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_siginf(
        arg1: ::std::os::raw::c_ushort,
        sno_sig: ::std::os::raw::c_short,
        len_sig: *mut ::std::os::raw::c_short,
        extract: ::std::os::raw::c_short,
        sfsg_siginf_ex_pmc: *mut ODBSFSGSIGINFEX,
        sfsg_siginf_ex_dcs: *mut ODBSFSGSIGINFEX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_sighis(
        arg1: ::std::os::raw::c_ushort,
        sfsg_sighis: *mut IODBSFSGSIGHIS,
        sig_his_pmc: *mut ::std::os::raw::c_uchar,
        sig_his_dcs: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_signal_num(
        arg1: ::std::os::raw::c_ushort,
        sfsg_signal_num: *mut ODBSFSGSIGNALNUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_update_count(
        arg1: ::std::os::raw::c_ushort,
        update_count: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_search(
        arg1: ::std::os::raw::c_ushort,
        sfsg_siginf: *mut IODBSFSGSIGINF,
        extract: ::std::os::raw::c_short,
        no_sig: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr_sfsg_extractslct(
        arg1: ::std::os::raw::c_ushort,
        no_sig: ::std::os::raw::c_short,
        select: ::std::os::raw::c_short,
        extract: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_sfsg_disp_stat(
        arg1: ::std::os::raw::c_ushort,
        sfsg_dsp_stat: *mut IODBSFSGDSPSTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr_sfsg_disp_stat(
        arg1: ::std::os::raw::c_ushort,
        sfsg_dsp_stat: *mut IODBSFSGDSPSTAT,
        select: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_rdparam(
        FlibHndl: ::std::os::raw::c_ushort,
        set_num: ::std::os::raw::c_short,
        number: ::std::os::raw::c_short,
        axis: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        param: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_wrparam(
        FlibHndl: ::std::os::raw::c_ushort,
        set_num: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        param: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_rdname(
        FlibHndl: ::std::os::raw::c_ushort,
        set_num: ::std::os::raw::c_short,
        setname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_wrname(
        FlibHndl: ::std::os::raw::c_ushort,
        set_num: ::std::os::raw::c_short,
        setname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_rdparanum(
        FlibHndl: ::std::os::raw::c_ushort,
        paranum: *mut ODBPARANUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_rdparainfo2(
        FlibHndl: ::std::os::raw::c_ushort,
        s_number: ::std::os::raw::c_short,
        read_no: *mut ::std::os::raw::c_short,
        prev_no: *mut ::std::os::raw::c_short,
        next_no: *mut ::std::os::raw::c_short,
        info: *mut ODBPARAIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_rdactset(
        FlibHndl: ::std::os::raw::c_ushort,
        set_num: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_s5s_wractset(
        FlibHndl: ::std::os::raw::c_ushort,
        set_num: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_stop_sample(h: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_start_sample(h: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_allnum(
        h: ::std::os::raw::c_ushort,
        his_num: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_inf(
        h: ::std::os::raw::c_ushort,
        st_no: ::std::os::raw::c_short,
        num: *mut ::std::os::raw::c_short,
        hstinf: *mut ODBMSRHSTINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_msudat(
        h: ::std::os::raw::c_ushort,
        hst_no: ::std::os::raw::c_short,
        msu_no: ::std::os::raw::c_short,
        msudat: *mut ODBMSUDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_pmc_ex(
        FlibHndl: ::std::os::raw::c_ushort,
        hst_no: ::std::os::raw::c_short,
        expmcsgnl_no: ::std::os::raw::c_short,
        expmcsgnl: *mut ODBEXPMCSGNL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_pmc(
        h: ::std::os::raw::c_ushort,
        hst_no: ::std::os::raw::c_short,
        pmcsgnl: *mut ODBMSRPMCSGNL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_ncdat(
        h: ::std::os::raw::c_ushort,
        hst_no: ::std::os::raw::c_short,
        path_no: ::std::os::raw::c_short,
        ncdat: *mut ODBMSRNCDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_delhis_all(h: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdmon_msunum(
        h: ::std::os::raw::c_ushort,
        msu_num: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdmon_msudat(
        h: ::std::os::raw::c_ushort,
        msu_no: ::std::os::raw::c_short,
        msudat: *mut ODBMSUDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdmon_pmcinf_ex(
        FlibHndl: ::std::os::raw::c_ushort,
        expmcsgnl_no: ::std::os::raw::c_short,
        expmcsgnl: *mut ODBEXPMCSGNL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdmon_pmcinf(
        h: ::std::os::raw::c_ushort,
        pmcsgnl: *mut ODBMSRPMCSGNL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_ohisnum(
        h: ::std::os::raw::c_ushort,
        hst_no: ::std::os::raw::c_short,
        num: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_msr_rdhis_ohisrec(
        h: ::std::os::raw::c_ushort,
        hst_no: ::std::os::raw::c_short,
        st_no: ::std::os::raw::c_ushort,
        ed_no: *mut ::std::os::raw::c_ushort,
        len: *mut ::std::os::raw::c_ushort,
        db: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_rd_cycle_data(
        h: ::std::os::raw::c_ushort,
        lev: ::std::os::raw::c_short,
        atrb: ::std::os::raw::c_short,
        powccyc: *mut ODBPOWCCYC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_clear_inte(h: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_rd_clear_time(
        h: ::std::os::raw::c_ushort,
        clear_time: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_wr_outer_set(
        h: ::std::os::raw::c_ushort,
        data_no: ::std::os::raw::c_short,
        powcouter: *mut ODBPOWCOUTER,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_rd_outer_set(
        h: ::std::os::raw::c_ushort,
        powcouter: *mut ODBPOWCOUTER,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_del_cycle_data(
        h: ::std::os::raw::c_ushort,
        lev: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_powc_rd_history(
        h: ::std::os::raw::c_ushort,
        unit: ::std::os::raw::c_short,
        num: *mut ::std::os::raw::c_short,
        powchisall: *mut ODBPOWCHISALL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pwcm_clear_consump(h: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_pwcm_rd_consump(
        FlibHndl: ::std::os::raw::c_ushort,
        type_: ::std::os::raw::c_short,
        power: *mut ODBPWCMDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpscdedge2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBEDGE2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpscdedge2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBEDGE2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlpscdpwrctl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPWRCTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpscdpwrctl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBPWRCTL,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdldsplc2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBDSPLC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrldsplc2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBDSPLC,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlagingmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlagingmode(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlagingtime(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlhsstate(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLSTATE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlpoweroffset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBLPWOFS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrlswork(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IDBLSWORK,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlalmhistry(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
        arg5: *mut ODBLALMHIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rduvactpt2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBUVMCRPT2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlnzlmcn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBAXIS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlfiberdata(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_lctcdcstm(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_uchar,
        arg5: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdlcstmname(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_uchar,
        arg5: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd1punchtl_ex(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBPUNCH1_EX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrpunchtl_ex(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IODBPUNCH1_EX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd2punchtl_ex(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBPUNCH2_EX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_twp_rdfcoord(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ODBCOORD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_twp_rdfmt_mtrx(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut IDBTWPFORM,
        arg4: *mut ODBFTRMTX,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_rdparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_wrparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBPSD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_rdparanum(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPARANUM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_rdparainfo2(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ODBPARAIF2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_rdactset(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_wractset(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_rdheader(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBMCSHEAD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_wrheader(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBMCSHEAD,
        arg4: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_mcs_rdcompparam(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_getpaxispath(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdalarmchar(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_start_hm_cmpl(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_hm_cmpl_stat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_hm_progstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBHMPROGSTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_set_hm_progno(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_hm_execprog(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdprgrmupdtcnt(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_rdprg_by_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ODBTPAPRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_rdprg_by_name(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ODBTPAPRG,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_wrinfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut IDBTPINFO,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_rdcmd(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut ODBTPEDTCMD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_editcmd(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut IDBTPCMD,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_rdline(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_ulong,
        arg6: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_st_convert(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_convert_stat(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_rdpos(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_tprog_wrpos(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
        arg5: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdecamdatar(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrecamdatar(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsa_rdpulsediag(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBPLSDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_setting_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBMMSCRNINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr_mm_setting_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ODBMMSCRNINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_icn_cstm_str_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_icn_cstm_str_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMMICONCSTMSTRING,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr_mm_icn_cstm_str_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBMMICONCSTMSTRING,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_ctgry_cstm_str_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMMCTGRYCSTMSTRING,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr_mm_ctgry_cstm_str_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut IODBMMCTGRYCSTMSTRING,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_mc_dflt_scrn_inf(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ODBMMSCRNINF,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_mc_scrn_def_num(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_mc_scrn_def_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMMMCSCRNDEFDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_mc_ctgry_def_data(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBMMMCCTGRYDEFDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_mm_mc_message_string(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simuopen(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simuclose(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simurwd(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simustart(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simustop(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simuproc(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_simusngl(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_rdsimuelm(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIMUELM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn anm_rdsimuelm2(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut IODBSIMUELM2,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdblkdist(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut REALDATA,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_reqsvgtung(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTUNREQ,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_stopsvgtung(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsvgtungstat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ODBTUNSTAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdCtgInfo(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdItem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRCT_ITEM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrItem(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRCT_ITEM,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrRecom(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdRcmAdjst(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrRcmAdjst(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrOvLp(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_cpSlctPtn(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ushort,
        arg4: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdGrpName(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRCT_CSTMNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrGrpName(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRCT_CSTMNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdPtnSlct(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRCT_GRPPTN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrPtnSlct(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: *mut IODBRCT_GRPPTN,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdslctptnname(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ODBRCT_SLCTPTNNAME,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdptnadjst(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_wrptnadjst(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rct_rdtunemoni(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdpressure(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ODBPRESSURE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_absolute2_exdgt(
        FlibHndl: ::std::os::raw::c_ushort,
        axis_data: *mut ODBEXPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_machine_exdgt(
        FlibHndl: ::std::os::raw::c_ushort,
        axis_data: *mut ODBEXPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_relative2_exdgt(
        FlibHndl: ::std::os::raw::c_ushort,
        axis_data: *mut ODBEXPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_distance_exdgt(
        FlibHndl: ::std::os::raw::c_ushort,
        axis_data: *mut ODBEXPOS,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wr_scrlwaitmcode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBWAITMCODE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rd_scrlwaitmcode(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut IODBWAITMCODE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_del_scrlwaitmcode(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsoc_curdat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ODBSOCCUR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsoc_wave_start(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsoc_wave(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsoc_wave_end(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_soc_wave_setchnl(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsoc_tlatrr(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut ::std::os::raw::c_short,
        arg7: *mut ::std::os::raw::c_short,
        arg8: *mut ODBSOCTLATTR,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_rdsoc_tldat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_char,
        arg7: *mut IODBSOCTLDAT,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_wrsoc_tldat(
        arg1: ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: *mut ::std::os::raw::c_short,
        arg6: *mut IODBSOCTLDAT,
    ) -> ::std::os::raw::c_short;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_PMCLAD_COIL_ADDRESS {
    pub pmc: ::std::os::raw::c_int,
    pub program: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub bit: ::std::os::raw::c_int,
    pub _reserved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tag_PMCLAD_COIL_ADDRESS() {
    const UNINIT: ::std::mem::MaybeUninit<tag_PMCLAD_COIL_ADDRESS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_PMCLAD_COIL_ADDRESS>(),
        24usize,
        concat!("Size of: ", stringify!(tag_PMCLAD_COIL_ADDRESS))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_PMCLAD_COIL_ADDRESS>(),
        4usize,
        concat!("Alignment of ", stringify!(tag_PMCLAD_COIL_ADDRESS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_ADDRESS),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).program) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_ADDRESS),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_ADDRESS),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_ADDRESS),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_ADDRESS),
            "::",
            stringify!(bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_ADDRESS),
            "::",
            stringify!(_reserved)
        )
    );
}
pub type PMCLAD_COIL_ADDRESS = tag_PMCLAD_COIL_ADDRESS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_PMCLAD_COIL_STRING {
    pub pmc: ::std::os::raw::c_int,
    pub program: ::std::os::raw::c_int,
    pub string: *mut ::std::os::raw::c_char,
    pub _reserved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tag_PMCLAD_COIL_STRING() {
    const UNINIT: ::std::mem::MaybeUninit<tag_PMCLAD_COIL_STRING> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_PMCLAD_COIL_STRING>(),
        24usize,
        concat!("Size of: ", stringify!(tag_PMCLAD_COIL_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_PMCLAD_COIL_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(tag_PMCLAD_COIL_STRING))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_STRING),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).program) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_STRING),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_STRING),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_COIL_STRING),
            "::",
            stringify!(_reserved)
        )
    );
}
pub type PMCLAD_COIL_STRING = tag_PMCLAD_COIL_STRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_PMCLAD_MESSAGE {
    pub message: *const ::std::os::raw::c_char,
    pub lines: ::std::os::raw::c_int,
    pub color_fg: ::std::os::raw::c_int,
    pub color_bg: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tag_PMCLAD_MESSAGE() {
    const UNINIT: ::std::mem::MaybeUninit<tag_PMCLAD_MESSAGE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tag_PMCLAD_MESSAGE>(),
        24usize,
        concat!("Size of: ", stringify!(tag_PMCLAD_MESSAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<tag_PMCLAD_MESSAGE>(),
        8usize,
        concat!("Alignment of ", stringify!(tag_PMCLAD_MESSAGE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_MESSAGE),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_MESSAGE),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_fg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_MESSAGE),
            "::",
            stringify!(color_fg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_bg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tag_PMCLAD_MESSAGE),
            "::",
            stringify!(color_bg)
        )
    );
}
pub type PMCLAD_MESSAGE = tag_PMCLAD_MESSAGE;
extern "C" {
    pub fn cnc_pmclad_screen(
        FwHndl: ::std::os::raw::c_ushort,
        iCommand: ::std::os::raw::c_int,
        pParam: *mut ::std::os::raw::c_void,
        pstMessage: *mut PMCLAD_MESSAGE,
    ) -> ::std::os::raw::c_short;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdllversion {
    pub dll: [odbdllversion__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct odbdllversion__bindgen_ty_1 {
    pub Name: [::std::os::raw::c_char; 260usize],
    pub FileVersion: [::std::os::raw::c_char; 32usize],
    pub ProductVersion: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_odbdllversion__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<odbdllversion__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdllversion__bindgen_ty_1>(),
        324usize,
        concat!("Size of: ", stringify!(odbdllversion__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdllversion__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(odbdllversion__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdllversion__bindgen_ty_1),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileVersion) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdllversion__bindgen_ty_1),
            "::",
            stringify!(FileVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProductVersion) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdllversion__bindgen_ty_1),
            "::",
            stringify!(ProductVersion)
        )
    );
}
#[test]
fn bindgen_test_layout_odbdllversion() {
    const UNINIT: ::std::mem::MaybeUninit<odbdllversion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<odbdllversion>(),
        648usize,
        concat!("Size of: ", stringify!(odbdllversion))
    );
    assert_eq!(
        ::std::mem::align_of::<odbdllversion>(),
        1usize,
        concat!("Alignment of ", stringify!(odbdllversion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(odbdllversion),
            "::",
            stringify!(dll)
        )
    );
}
pub type ODBDLLVERSION = odbdllversion;
extern "C" {
    pub fn cnc_getdllversion(
        FwHndl: ::std::os::raw::c_ushort,
        vers: *mut ODBDLLVERSION,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_startupprocess(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exitprocess() -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cnc_exitthread() -> ::std::os::raw::c_short;
}
